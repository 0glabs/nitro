{
  "address": "0x8a70430fBCb284b5bb1d46903af3678EBDEaA7f4",
  "abi": [
    {
      "inputs": [],
      "name": "test",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a2189891b3574c0c6636f1c44ef61ebe39ad9f31e0fe6751bfba2239abc9751",
  "receipt": {
    "to": null,
    "from": "0xFF21a5fD9E13241c95033Fcbc501EeaDC3572771",
    "contractAddress": "0x8a70430fBCb284b5bb1d46903af3678EBDEaA7f4",
    "transactionIndex": 0,
    "gasUsed": "761356",
    "logsBloom": "0x
    "blockHash": "0x1d9371e0a64761a35493e13de62b198dfbdc05a2892b253a7cc8505a2c4125c7",
    "transactionHash": "0x5a2189891b3574c0c6636f1c44ef61ebe39ad9f31e0fe6751bfba2239abc9751",
    "logs": [],
    "blockNumber": 54,
    "cumulativeGasUsed": "761356",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e7611196dd0ae85361a704f7442944b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"test\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/test_helpers/ValueArrayTester.sol\":\"ValueArrayTester\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/state/ValueArrays.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\n\\nstruct ValueArray {\\n\\tValue[] inner;\\n}\\n\\nlibrary ValueArrays {\\n\\tfunction get(ValueArray memory arr, uint256 index) internal pure returns (Value memory) {\\n\\t\\treturn arr.inner[index];\\n\\t}\\n\\n\\tfunction set(ValueArray memory arr, uint256 index, Value memory val) internal pure {\\n\\t\\tarr.inner[index] = val;\\n\\t}\\n\\n\\tfunction length(ValueArray memory arr) internal pure returns (uint256) {\\n\\t\\treturn arr.inner.length;\\n\\t}\\n\\n\\tfunction push(ValueArray memory arr, Value memory val) internal pure {\\n\\t\\tValue[] memory newInner = new Value[](arr.inner.length + 1);\\n\\t\\tfor (uint256 i = 0; i < arr.inner.length; i++) {\\n\\t\\t\\tnewInner[i] = arr.inner[i];\\n\\t\\t}\\n\\t\\tnewInner[arr.inner.length] = val;\\n\\t\\tarr.inner = newInner;\\n\\t}\\n\\n\\tfunction pop(ValueArray memory arr) internal pure returns (Value memory popped) {\\n\\t\\tpopped = arr.inner[arr.inner.length - 1];\\n\\t\\tValue[] memory newInner = new Value[](arr.inner.length - 1);\\n\\t\\tfor (uint256 i = 0; i < newInner.length; i++) {\\n\\t\\t\\tnewInner[i] = arr.inner[i];\\n\\t\\t}\\n\\t\\tarr.inner = newInner;\\n\\t}\\n}\\n\",\"keccak256\":\"0xee609e88227972d896e3c4dd3eb9d5fbedbcc043c1c593735923509557c5f125\",\"license\":\"UNLICENSED\"},\"src/state/Values.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nenum ValueType {\\n\\tI32,\\n\\tI64,\\n\\tF32,\\n\\tF64,\\n\\tREF_NULL,\\n\\tFUNC_REF,\\n\\tINTERNAL_REF,\\n\\tSTACK_BOUNDARY\\n}\\n\\nstruct Value {\\n\\tValueType valueType;\\n\\tuint256 contents;\\n}\\n\\nlibrary Values {\\n\\tfunction hash(Value memory val) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\\"Value:\\\", val.valueType, val.contents));\\n\\t}\\n\\n\\tfunction maxValueType() internal pure returns (ValueType) {\\n\\t\\treturn ValueType.STACK_BOUNDARY;\\n\\t}\\n\\n\\tfunction isNumeric(ValueType val) internal pure returns (bool) {\\n\\t\\treturn val == ValueType.I32 || val == ValueType.I64 || val == ValueType.F32 || val == ValueType.F64;\\n\\t}\\n\\n\\tfunction isNumeric(Value memory val) internal pure returns (bool) {\\n\\t\\treturn isNumeric(val.valueType);\\n\\t}\\n\\n\\tfunction assumeI32(Value memory val) internal pure returns(uint32) {\\n\\t\\tuint uintval = uint(val.contents);\\n\\t\\trequire(val.valueType == ValueType.I32, \\\"NOT_I32\\\");\\n\\t\\trequire(uintval < (1<<32), \\\"BAD_I32\\\");\\n\\t\\treturn uint32(uintval);\\n\\t}\\n\\n\\tfunction assumeI64(Value memory val) internal pure returns(uint64) {\\n\\t\\tuint uintval = uint(val.contents);\\n\\t\\trequire(val.valueType == ValueType.I64, \\\"NOT_I64\\\");\\n\\t\\trequire(uintval < (1<<64), \\\"BAD_I64\\\");\\n\\t\\treturn uint64(uintval);\\n\\t}\\n\\n\\tfunction newRefNull() internal pure returns (Value memory) {\\n\\t\\treturn Value({\\n\\t\\t\\tvalueType: ValueType.REF_NULL,\\n\\t\\t\\tcontents: 0\\n\\t\\t});\\n\\t}\\n\\n\\tfunction newI32(uint32 x) internal pure returns (Value memory) {\\n\\t\\treturn Value({\\n\\t\\t\\tvalueType: ValueType.I32,\\n\\t\\t\\tcontents: uint256(x)\\n\\t\\t});\\n\\t}\\n\\n\\tfunction newI64(uint64 x) internal pure returns (Value memory) {\\n\\t\\treturn Value({\\n\\t\\t\\tvalueType: ValueType.I64,\\n\\t\\t\\tcontents: uint256(x)\\n\\t\\t});\\n\\t}\\n\\n\\tfunction newBoolean(bool x) internal pure returns (Value memory) {\\n\\t\\tif (x) {\\n\\t\\t\\treturn newI32(uint32(1));\\n\\t\\t} else {\\n\\t\\t\\treturn newI32(uint32(0));\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x2c30c3b373b6442aaef6407afe370abc25a2eb41bb4368294dd120c99c1b594f\",\"license\":\"UNLICENSED\"},\"src/test_helpers/ValueArrayTester.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"../state/ValueArrays.sol\\\";\\n\\ncontract ValueArrayTester {\\n    function test() external pure {\\n        ValueArray memory arr = ValueArray(new Value[](2));\\n        require(ValueArrays.length(arr) == 2, \\\"START_LEN\\\");\\n        ValueArrays.set(arr, 0, Values.newI32(1));\\n        ValueArrays.set(arr, 1, Values.newI32(2));\\n        ValueArrays.push(arr, Values.newI32(3));\\n        require(ValueArrays.length(arr) == 3, \\\"PUSH_LEN\\\");\\n        for (uint256 i = 0; i < ValueArrays.length(arr); i++) {\\n            Value memory val = ValueArrays.get(arr, i);\\n            require(val.valueType == ValueType.I32, \\\"PUSH_VAL_TYPE\\\");\\n            require(val.contents == i + 1, \\\"PUSH_VAL_CONTENTS\\\");\\n        }\\n        Value memory popped = ValueArrays.pop(arr);\\n        require(popped.valueType == ValueType.I32, \\\"POP_RET_TYPE\\\");\\n        require(popped.contents == 3, \\\"POP_RET_CONTENTS\\\");\\n        require(ValueArrays.length(arr) == 2, \\\"POP_LEN\\\");\\n        for (uint256 i = 0; i < ValueArrays.length(arr); i++) {\\n            Value memory val = ValueArrays.get(arr, i);\\n            require(val.valueType == ValueType.I32, \\\"POP_VAL_TYPE\\\");\\n            require(val.contents == i + 1, \\\"POP_VAL_CONTENTS\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a0630ec87f729001f79e47b7f921e4efb49fbd0d59425df58cb5bee0694cfa5\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610cee806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f8a8fd6d14610030575b600080fd5b61003861003a565b005b60006040518060200160405280600267ffffffffffffffff81111561006257610061610b18565b5b60405190808252806020026020018201604052801561009b57816020015b610088610716565b8152602001906001900390816100805790505b50815250905060026100ac82610468565b146100ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e39061093d565b60405180910390fd5b6101018160006100fc6001610477565b6104b4565b6101168160016101116002610477565b6104b4565b610129816101246003610477565b6104dc565b600361013482610468565b14610174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016b906108dd565b60405180910390fd5b60005b61018082610468565b81101561026657600061019383836105d8565b9050600060078111156101a9576101a8610aba565b5b816000015160078111156101c0576101bf610aba565b5b14610200576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f79061089d565b60405180910390fd5b60018261020d91906109ae565b816020015114610252576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610249906108bd565b60405180910390fd5b50808061025e90610a42565b915050610177565b50600061027282610607565b90506000600781111561028857610287610aba565b5b8160000151600781111561029f5761029e610aba565b5b146102df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d69061087d565b60405180910390fd5b6003816020015114610326576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031d9061095d565b60405180910390fd5b600261033183610468565b14610371576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103689061091d565b60405180910390fd5b60005b61037d83610468565b81101561046357600061039084836105d8565b9050600060078111156103a6576103a5610aba565b5b816000015160078111156103bd576103bc610aba565b5b146103fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f4906108fd565b60405180910390fd5b60018261040a91906109ae565b81602001511461044f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104469061097d565b60405180910390fd5b50808061045b90610a42565b915050610374565b505050565b60008160000151519050919050565b61047f610716565b60405180604001604052806000600781111561049e5761049d610aba565b5b81526020018363ffffffff168152509050919050565b80836000015183815181106104cc576104cb610ae9565b5b6020026020010181905250505050565b600060018360000151516104f091906109ae565b67ffffffffffffffff81111561050957610508610b18565b5b60405190808252806020026020018201604052801561054257816020015b61052f610716565b8152602001906001900390816105275790505b50905060005b8360000151518110156105a5578360000151818151811061056c5761056b610ae9565b5b602002602001015182828151811061058757610586610ae9565b5b6020026020010181905250808061059d90610a42565b915050610548565b508181846000015151815181106105bf576105be610ae9565b5b6020026020010181905250808360000181905250505050565b6105e0610716565b826000015182815181106105f7576105f6610ae9565b5b6020026020010151905092915050565b61060f610716565b816000015160018360000151516106269190610a04565b8151811061063757610636610ae9565b5b60200260200101519050600060018360000151516106559190610a04565b67ffffffffffffffff81111561066e5761066d610b18565b5b6040519080825280602002602001820160405280156106a757816020015b610694610716565b81526020019060019003908161068c5790505b50905060005b815181101561070657836000015181815181106106cd576106cc610ae9565b5b60200260200101518282815181106106e8576106e7610ae9565b5b602002602001018190525080806106fe90610a42565b9150506106ad565b5080836000018190525050919050565b60405180604001604052806000600781111561073557610734610aba565b5b8152602001600081525090565b600061074f600c8361099d565b915061075a82610b47565b602082019050919050565b6000610772600d8361099d565b915061077d82610b70565b602082019050919050565b600061079560118361099d565b91506107a082610b99565b602082019050919050565b60006107b860088361099d565b91506107c382610bc2565b602082019050919050565b60006107db600c8361099d565b91506107e682610beb565b602082019050919050565b60006107fe60078361099d565b915061080982610c14565b602082019050919050565b600061082160098361099d565b915061082c82610c3d565b602082019050919050565b600061084460108361099d565b915061084f82610c66565b602082019050919050565b600061086760108361099d565b915061087282610c8f565b602082019050919050565b6000602082019050818103600083015261089681610742565b9050919050565b600060208201905081810360008301526108b681610765565b9050919050565b600060208201905081810360008301526108d681610788565b9050919050565b600060208201905081810360008301526108f6816107ab565b9050919050565b60006020820190508181036000830152610916816107ce565b9050919050565b60006020820190508181036000830152610936816107f1565b9050919050565b6000602082019050818103600083015261095681610814565b9050919050565b6000602082019050818103600083015261097681610837565b9050919050565b600060208201905081810360008301526109968161085a565b9050919050565b600082825260208201905092915050565b60006109b982610a38565b91506109c483610a38565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156109f9576109f8610a8b565b5b828201905092915050565b6000610a0f82610a38565b9150610a1a83610a38565b925082821015610a2d57610a2c610a8b565b5b828203905092915050565b6000819050919050565b6000610a4d82610a38565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a8057610a7f610a8b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f504f505f5245545f545950450000000000000000000000000000000000000000600082015250565b7f505553485f56414c5f5459504500000000000000000000000000000000000000600082015250565b7f505553485f56414c5f434f4e54454e5453000000000000000000000000000000600082015250565b7f505553485f4c454e000000000000000000000000000000000000000000000000600082015250565b7f504f505f56414c5f545950450000000000000000000000000000000000000000600082015250565b7f504f505f4c454e00000000000000000000000000000000000000000000000000600082015250565b7f53544152545f4c454e0000000000000000000000000000000000000000000000600082015250565b7f504f505f5245545f434f4e54454e545300000000000000000000000000000000600082015250565b7f504f505f56414c5f434f4e54454e54530000000000000000000000000000000060008201525056fea26469706673582212205c78d93b7fa781c002a21ff12bb7d63ca719958ca23d1b43e655ac53aa053d9e64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f8a8fd6d14610030575b600080fd5b61003861003a565b005b60006040518060200160405280600267ffffffffffffffff81111561006257610061610b18565b5b60405190808252806020026020018201604052801561009b57816020015b610088610716565b8152602001906001900390816100805790505b50815250905060026100ac82610468565b146100ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e39061093d565b60405180910390fd5b6101018160006100fc6001610477565b6104b4565b6101168160016101116002610477565b6104b4565b610129816101246003610477565b6104dc565b600361013482610468565b14610174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016b906108dd565b60405180910390fd5b60005b61018082610468565b81101561026657600061019383836105d8565b9050600060078111156101a9576101a8610aba565b5b816000015160078111156101c0576101bf610aba565b5b14610200576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f79061089d565b60405180910390fd5b60018261020d91906109ae565b816020015114610252576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610249906108bd565b60405180910390fd5b50808061025e90610a42565b915050610177565b50600061027282610607565b90506000600781111561028857610287610aba565b5b8160000151600781111561029f5761029e610aba565b5b146102df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d69061087d565b60405180910390fd5b6003816020015114610326576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031d9061095d565b60405180910390fd5b600261033183610468565b14610371576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103689061091d565b60405180910390fd5b60005b61037d83610468565b81101561046357600061039084836105d8565b9050600060078111156103a6576103a5610aba565b5b816000015160078111156103bd576103bc610aba565b5b146103fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f4906108fd565b60405180910390fd5b60018261040a91906109ae565b81602001511461044f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104469061097d565b60405180910390fd5b50808061045b90610a42565b915050610374565b505050565b60008160000151519050919050565b61047f610716565b60405180604001604052806000600781111561049e5761049d610aba565b5b81526020018363ffffffff168152509050919050565b80836000015183815181106104cc576104cb610ae9565b5b6020026020010181905250505050565b600060018360000151516104f091906109ae565b67ffffffffffffffff81111561050957610508610b18565b5b60405190808252806020026020018201604052801561054257816020015b61052f610716565b8152602001906001900390816105275790505b50905060005b8360000151518110156105a5578360000151818151811061056c5761056b610ae9565b5b602002602001015182828151811061058757610586610ae9565b5b6020026020010181905250808061059d90610a42565b915050610548565b508181846000015151815181106105bf576105be610ae9565b5b6020026020010181905250808360000181905250505050565b6105e0610716565b826000015182815181106105f7576105f6610ae9565b5b6020026020010151905092915050565b61060f610716565b816000015160018360000151516106269190610a04565b8151811061063757610636610ae9565b5b60200260200101519050600060018360000151516106559190610a04565b67ffffffffffffffff81111561066e5761066d610b18565b5b6040519080825280602002602001820160405280156106a757816020015b610694610716565b81526020019060019003908161068c5790505b50905060005b815181101561070657836000015181815181106106cd576106cc610ae9565b5b60200260200101518282815181106106e8576106e7610ae9565b5b602002602001018190525080806106fe90610a42565b9150506106ad565b5080836000018190525050919050565b60405180604001604052806000600781111561073557610734610aba565b5b8152602001600081525090565b600061074f600c8361099d565b915061075a82610b47565b602082019050919050565b6000610772600d8361099d565b915061077d82610b70565b602082019050919050565b600061079560118361099d565b91506107a082610b99565b602082019050919050565b60006107b860088361099d565b91506107c382610bc2565b602082019050919050565b60006107db600c8361099d565b91506107e682610beb565b602082019050919050565b60006107fe60078361099d565b915061080982610c14565b602082019050919050565b600061082160098361099d565b915061082c82610c3d565b602082019050919050565b600061084460108361099d565b915061084f82610c66565b602082019050919050565b600061086760108361099d565b915061087282610c8f565b602082019050919050565b6000602082019050818103600083015261089681610742565b9050919050565b600060208201905081810360008301526108b681610765565b9050919050565b600060208201905081810360008301526108d681610788565b9050919050565b600060208201905081810360008301526108f6816107ab565b9050919050565b60006020820190508181036000830152610916816107ce565b9050919050565b60006020820190508181036000830152610936816107f1565b9050919050565b6000602082019050818103600083015261095681610814565b9050919050565b6000602082019050818103600083015261097681610837565b9050919050565b600060208201905081810360008301526109968161085a565b9050919050565b600082825260208201905092915050565b60006109b982610a38565b91506109c483610a38565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156109f9576109f8610a8b565b5b828201905092915050565b6000610a0f82610a38565b9150610a1a83610a38565b925082821015610a2d57610a2c610a8b565b5b828203905092915050565b6000819050919050565b6000610a4d82610a38565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a8057610a7f610a8b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f504f505f5245545f545950450000000000000000000000000000000000000000600082015250565b7f505553485f56414c5f5459504500000000000000000000000000000000000000600082015250565b7f505553485f56414c5f434f4e54454e5453000000000000000000000000000000600082015250565b7f505553485f4c454e000000000000000000000000000000000000000000000000600082015250565b7f504f505f56414c5f545950450000000000000000000000000000000000000000600082015250565b7f504f505f4c454e00000000000000000000000000000000000000000000000000600082015250565b7f53544152545f4c454e0000000000000000000000000000000000000000000000600082015250565b7f504f505f5245545f434f4e54454e545300000000000000000000000000000000600082015250565b7f504f505f56414c5f434f4e54454e54530000000000000000000000000000000060008201525056fea26469706673582212205c78d93b7fa781c002a21ff12bb7d63ca719958ca23d1b43e655ac53aa053d9e64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}