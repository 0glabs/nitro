{
  "address": "0xab0a1a8665b32Cf0C884909BaCB72417dEc28288",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxInboxMessagesRead",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExecutionContext",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum MachineStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value[]",
                      "name": "inner",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct ValueArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ValueStack",
              "name": "valueStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value[]",
                      "name": "inner",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct ValueArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ValueStack",
              "name": "internalStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint32[]",
                      "name": "inner",
                      "type": "uint32[]"
                    }
                  ],
                  "internalType": "struct PcArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PcStack",
              "name": "blockStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value",
                      "name": "returnPc",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "localsMerkleRoot",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "callerModule",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "callerModuleInternals",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct StackFrame[]",
                  "name": "proved",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct StackFrameWindow",
              "name": "frameStack",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "globalStateHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "moduleIdx",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "functionIdx",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "functionPc",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "modulesRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Machine",
          "name": "startMach",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "globalsMerkleRoot",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "size",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ModuleMemory",
              "name": "moduleMemory",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "tablesMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "functionsMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "internalsOffset",
              "type": "uint32"
            }
          ],
          "internalType": "struct Module",
          "name": "startMod",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "opcode",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "argumentData",
              "type": "uint256"
            }
          ],
          "internalType": "struct Instruction",
          "name": "inst",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        }
      ],
      "name": "executeOneStep",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum MachineStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value[]",
                      "name": "inner",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct ValueArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ValueStack",
              "name": "valueStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value[]",
                      "name": "inner",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct ValueArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ValueStack",
              "name": "internalStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint32[]",
                      "name": "inner",
                      "type": "uint32[]"
                    }
                  ],
                  "internalType": "struct PcArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PcStack",
              "name": "blockStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value",
                      "name": "returnPc",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "localsMerkleRoot",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "callerModule",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "callerModuleInternals",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct StackFrame[]",
                  "name": "proved",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct StackFrameWindow",
              "name": "frameStack",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "globalStateHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "moduleIdx",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "functionIdx",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "functionPc",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "modulesRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Machine",
          "name": "mach",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "globalsMerkleRoot",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "size",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ModuleMemory",
              "name": "moduleMemory",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "tablesMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "functionsMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "internalsOffset",
              "type": "uint32"
            }
          ],
          "internalType": "struct Module",
          "name": "mod",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x27f017464e64821363640c75a4e0fa0a91111cd949415d8469d81de3a2206689",
  "receipt": {
    "to": null,
    "from": "0xFF21a5fD9E13241c95033Fcbc501EeaDC3572771",
    "contractAddress": "0xab0a1a8665b32Cf0C884909BaCB72417dEc28288",
    "transactionIndex": 0,
    "gasUsed": "2799059",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xc53f4c1e0be6dd869a82e134441be0a33dcf4a9a9e5eb54d57e7a1947389daf2",
    "transactionHash": "0x27f017464e64821363640c75a4e0fa0a91111cd949415d8469d81de3a2206689",
    "logs": [],
    "blockNumber": 63,
    "cumulativeGasUsed": "2799059",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e7611196dd0ae85361a704f7442944b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxInboxMessagesRead\",\"type\":\"uint256\"}],\"internalType\":\"struct ExecutionContext\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum MachineStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value[]\",\"name\":\"inner\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ValueArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValueStack\",\"name\":\"valueStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value[]\",\"name\":\"inner\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ValueArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValueStack\",\"name\":\"internalStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"inner\",\"type\":\"uint32[]\"}],\"internalType\":\"struct PcArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct PcStack\",\"name\":\"blockStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value\",\"name\":\"returnPc\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"localsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callerModule\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"callerModuleInternals\",\"type\":\"uint32\"}],\"internalType\":\"struct StackFrame[]\",\"name\":\"proved\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct StackFrameWindow\",\"name\":\"frameStack\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"globalStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"moduleIdx\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionIdx\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionPc\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"modulesRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Machine\",\"name\":\"startMach\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"globalsMerkleRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"size\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct ModuleMemory\",\"name\":\"moduleMemory\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"tablesMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"functionsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"internalsOffset\",\"type\":\"uint32\"}],\"internalType\":\"struct Module\",\"name\":\"startMod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"opcode\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"argumentData\",\"type\":\"uint256\"}],\"internalType\":\"struct Instruction\",\"name\":\"inst\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"executeOneStep\",\"outputs\":[{\"components\":[{\"internalType\":\"enum MachineStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value[]\",\"name\":\"inner\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ValueArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValueStack\",\"name\":\"valueStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value[]\",\"name\":\"inner\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ValueArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValueStack\",\"name\":\"internalStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"inner\",\"type\":\"uint32[]\"}],\"internalType\":\"struct PcArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct PcStack\",\"name\":\"blockStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value\",\"name\":\"returnPc\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"localsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callerModule\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"callerModuleInternals\",\"type\":\"uint32\"}],\"internalType\":\"struct StackFrame[]\",\"name\":\"proved\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct StackFrameWindow\",\"name\":\"frameStack\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"globalStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"moduleIdx\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionIdx\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionPc\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"modulesRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Machine\",\"name\":\"mach\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"globalsMerkleRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"size\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct ModuleMemory\",\"name\":\"moduleMemory\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"tablesMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"functionsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"internalsOffset\",\"type\":\"uint32\"}],\"internalType\":\"struct Module\",\"name\":\"mod\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/osp/OneStepProverMemory.sol\":\"OneStepProverMemory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/osp/IOneStepProver.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../state/Machines.sol\\\";\\nimport \\\"../state/Modules.sol\\\";\\nimport \\\"../state/Instructions.sol\\\";\\n\\nstruct ExecutionContext {\\n    uint256 maxInboxMessagesRead;\\n}\\n\\nabstract contract IOneStepProver {\\n    function executeOneStep(\\n        ExecutionContext memory execCtx,\\n        Machine calldata mach,\\n        Module calldata mod,\\n        Instruction calldata instruction,\\n        bytes calldata proof\\n    )\\n        external\\n        view\\n        virtual\\n        returns (Machine memory result, Module memory resultMod);\\n}\\n\",\"keccak256\":\"0xf2a87c00ce591229417b9f094d817d3ae116a448e544a93473f99f692d04dfb0\",\"license\":\"UNLICENSED\"},\"src/osp/OneStepProverMemory.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../state/Values.sol\\\";\\nimport \\\"../state/Machines.sol\\\";\\nimport \\\"../state/Deserialize.sol\\\";\\nimport \\\"./IOneStepProver.sol\\\";\\n\\ncontract OneStepProverMemory is IOneStepProver {\\n    uint256 constant LEAF_SIZE = 32;\\n    uint64 constant PAGE_SIZE = 65536;\\n\\n    function pullLeafByte(bytes32 leaf, uint256 idx)\\n        internal\\n        pure\\n        returns (uint8)\\n    {\\n        require(idx < LEAF_SIZE, \\\"BAD_PULL_LEAF_BYTE_IDX\\\");\\n        // Take into account that we are casting the leaf to a big-endian integer\\n        uint256 leafShift = (LEAF_SIZE - 1 - idx) * 8;\\n        return uint8(uint256(leaf) >> leafShift);\\n    }\\n\\n    function setLeafByte(\\n        bytes32 oldLeaf,\\n        uint256 idx,\\n        uint8 val\\n    ) internal pure returns (bytes32) {\\n        require(idx < LEAF_SIZE, \\\"BAD_SET_LEAF_BYTE_IDX\\\");\\n        // Take into account that we are casting the leaf to a big-endian integer\\n        uint256 leafShift = (LEAF_SIZE - 1 - idx) * 8;\\n        uint256 newLeaf = uint256(oldLeaf);\\n        newLeaf &= ~(0xFF << leafShift);\\n        newLeaf |= uint256(val) << leafShift;\\n        return bytes32(newLeaf);\\n    }\\n\\n    function executeMemoryLoad(\\n        Machine memory mach,\\n        Module memory mod,\\n        Instruction calldata inst,\\n        bytes calldata proof\\n    ) internal pure {\\n        ValueType ty;\\n        uint256 readBytes;\\n        bool signed;\\n        if (inst.opcode == Instructions.I32_LOAD) {\\n            ty = ValueType.I32;\\n            readBytes = 4;\\n            signed = false;\\n        } else if (inst.opcode == Instructions.I64_LOAD) {\\n            ty = ValueType.I64;\\n            readBytes = 8;\\n            signed = false;\\n        } else if (inst.opcode == Instructions.F32_LOAD) {\\n            ty = ValueType.F32;\\n            readBytes = 4;\\n            signed = false;\\n        } else if (inst.opcode == Instructions.F64_LOAD) {\\n            ty = ValueType.F64;\\n            readBytes = 8;\\n            signed = false;\\n        } else if (inst.opcode == Instructions.I32_LOAD8_S) {\\n            ty = ValueType.I32;\\n            readBytes = 1;\\n            signed = true;\\n        } else if (inst.opcode == Instructions.I32_LOAD8_U) {\\n            ty = ValueType.I32;\\n            readBytes = 1;\\n            signed = false;\\n        } else if (inst.opcode == Instructions.I32_LOAD16_S) {\\n            ty = ValueType.I32;\\n            readBytes = 2;\\n            signed = true;\\n        } else if (inst.opcode == Instructions.I32_LOAD16_U) {\\n            ty = ValueType.I32;\\n            readBytes = 2;\\n            signed = false;\\n        } else if (inst.opcode == Instructions.I64_LOAD8_S) {\\n            ty = ValueType.I64;\\n            readBytes = 1;\\n            signed = true;\\n        } else if (inst.opcode == Instructions.I64_LOAD8_U) {\\n            ty = ValueType.I64;\\n            readBytes = 1;\\n            signed = false;\\n        } else if (inst.opcode == Instructions.I64_LOAD16_S) {\\n            ty = ValueType.I64;\\n            readBytes = 2;\\n            signed = true;\\n        } else if (inst.opcode == Instructions.I64_LOAD16_U) {\\n            ty = ValueType.I64;\\n            readBytes = 2;\\n            signed = false;\\n        } else if (inst.opcode == Instructions.I64_LOAD32_S) {\\n            ty = ValueType.I64;\\n            readBytes = 4;\\n            signed = true;\\n        } else if (inst.opcode == Instructions.I64_LOAD32_U) {\\n            ty = ValueType.I64;\\n            readBytes = 4;\\n            signed = false;\\n        } else {\\n            revert(\\\"INVALID_MEMORY_LOAD_OPCODE\\\");\\n        }\\n\\n        // Neither of these can overflow as they're computed with much less than 256 bit integers.\\n        uint256 startIdx = inst.argumentData +\\n            ValueStacks.pop(mach.valueStack).contents;\\n        if (startIdx + readBytes > mod.moduleMemory.size) {\\n            mach.status = MachineStatus.ERRORED;\\n            return;\\n        }\\n\\n        uint256 proofOffset = 0;\\n        uint256 lastProvedLeafIdx = ~uint256(0);\\n        bytes32 lastProvedLeafContents;\\n        uint64 readValue;\\n        for (uint256 i = 0; i < readBytes; i++) {\\n            uint256 idx = startIdx + i;\\n            uint256 leafIdx = idx / LEAF_SIZE;\\n            if (leafIdx != lastProvedLeafIdx) {\\n                (lastProvedLeafContents, proofOffset, ) = ModuleMemories\\n                    .proveLeaf(mod.moduleMemory, leafIdx, proof, proofOffset);\\n                lastProvedLeafIdx = leafIdx;\\n            }\\n            uint256 indexWithinLeaf = idx % LEAF_SIZE;\\n            readValue |=\\n                uint64(pullLeafByte(lastProvedLeafContents, indexWithinLeaf)) <<\\n                uint64(i * 8);\\n        }\\n\\n        if (signed) {\\n            // Go down to the original uint size, change to signed, go up to correct size, convert back to unsigned\\n            if (readBytes == 1 && ty == ValueType.I32) {\\n                readValue = uint32(int32(int8(uint8(readValue))));\\n            } else if (readBytes == 1 && ty == ValueType.I64) {\\n                readValue = uint64(int64(int8(uint8(readValue))));\\n            } else if (readBytes == 2 && ty == ValueType.I32) {\\n                readValue = uint32(int32(int16(uint16(readValue))));\\n            } else if (readBytes == 2 && ty == ValueType.I64) {\\n                readValue = uint64(int64(int16(uint16(readValue))));\\n            } else if (readBytes == 4 && ty == ValueType.I64) {\\n                readValue = uint64(int64(int32(uint32(readValue))));\\n            } else {\\n                revert(\\\"BAD_READ_BYTES_SIGNED\\\");\\n            }\\n        }\\n\\n        ValueStacks.push(\\n            mach.valueStack,\\n            Value({valueType: ty, contents: readValue})\\n        );\\n    }\\n\\n    function executeMemoryStore(\\n        Machine memory mach,\\n        Module memory mod,\\n        Instruction calldata inst,\\n        bytes calldata proof\\n    ) internal pure {\\n        uint64 writeBytes;\\n        uint64 toWrite;\\n        {\\n            ValueType ty;\\n            if (inst.opcode == Instructions.I32_STORE) {\\n                ty = ValueType.I32;\\n                writeBytes = 4;\\n            } else if (inst.opcode == Instructions.I64_STORE) {\\n                ty = ValueType.I64;\\n                writeBytes = 8;\\n            } else if (inst.opcode == Instructions.F32_STORE) {\\n                ty = ValueType.F32;\\n                writeBytes = 4;\\n            } else if (inst.opcode == Instructions.F64_STORE) {\\n                ty = ValueType.F64;\\n                writeBytes = 8;\\n            } else if (inst.opcode == Instructions.I32_STORE8) {\\n                ty = ValueType.I32;\\n                writeBytes = 1;\\n            } else if (inst.opcode == Instructions.I32_STORE16) {\\n                ty = ValueType.I32;\\n                writeBytes = 2;\\n            } else if (inst.opcode == Instructions.I64_STORE8) {\\n                ty = ValueType.I64;\\n                writeBytes = 1;\\n            } else if (inst.opcode == Instructions.I64_STORE16) {\\n                ty = ValueType.I64;\\n                writeBytes = 2;\\n            } else if (inst.opcode == Instructions.I64_STORE32) {\\n                ty = ValueType.I64;\\n                writeBytes = 4;\\n            } else {\\n                revert(\\\"INVALID_MEMORY_STORE_OPCODE\\\");\\n            }\\n\\n            Value memory writingVal = ValueStacks.pop(mach.valueStack);\\n            require(writingVal.valueType == ty, \\\"BAD_STORE_TYPE\\\");\\n            toWrite = uint64(writingVal.contents);\\n            if (writeBytes < 8) {\\n                toWrite &= (uint64(1) << (writeBytes * 8)) - 1;\\n            }\\n        }\\n\\n        // Neither of these can overflow as they're computed with much less than 256 bit integers.\\n        uint256 startIdx = inst.argumentData +\\n            ValueStacks.pop(mach.valueStack).contents;\\n        if (startIdx + writeBytes > mod.moduleMemory.size) {\\n            mach.status = MachineStatus.ERRORED;\\n            return;\\n        }\\n\\n        uint256 proofOffset = 0;\\n        uint256 lastProvedLeafIdx = ~uint256(0);\\n        MerkleProof memory lastProvedMerkle;\\n        bytes32 lastProvedLeafContents;\\n        for (uint256 i = 0; i < writeBytes; i++) {\\n            uint256 idx = startIdx + i;\\n            uint256 leafIdx = idx / LEAF_SIZE;\\n            if (leafIdx != lastProvedLeafIdx) {\\n                if (lastProvedLeafIdx != ~uint256(0)) {\\n                    // Apply the last leaf update\\n                    mod.moduleMemory.merkleRoot = MerkleProofs\\n                        .computeRootFromMemory(\\n                            lastProvedMerkle,\\n                            lastProvedLeafIdx,\\n                            lastProvedLeafContents\\n                        );\\n                }\\n                (\\n                    lastProvedLeafContents,\\n                    proofOffset,\\n                    lastProvedMerkle\\n                ) = ModuleMemories.proveLeaf(\\n                    mod.moduleMemory,\\n                    leafIdx,\\n                    proof,\\n                    proofOffset\\n                );\\n                lastProvedLeafIdx = leafIdx;\\n            }\\n            uint256 indexWithinLeaf = idx % LEAF_SIZE;\\n            lastProvedLeafContents = setLeafByte(\\n                lastProvedLeafContents,\\n                indexWithinLeaf,\\n                uint8(toWrite)\\n            );\\n            toWrite >>= 8;\\n        }\\n        mod.moduleMemory.merkleRoot = MerkleProofs.computeRootFromMemory(\\n            lastProvedMerkle,\\n            lastProvedLeafIdx,\\n            lastProvedLeafContents\\n        );\\n    }\\n\\n    function executeMemorySize(Machine memory mach, Module memory mod, Instruction calldata, bytes calldata) internal pure {\\n        uint32 pages = uint32(mod.moduleMemory.size / PAGE_SIZE);\\n        ValueStacks.push(mach.valueStack, Values.newI32(pages));\\n    }\\n\\n    function executeMemoryGrow(Machine memory mach, Module memory mod, Instruction calldata, bytes calldata) internal pure {\\n        uint32 oldPages = uint32(mod.moduleMemory.size / PAGE_SIZE);\\n        uint32 growingPages = Values.assumeI32(ValueStacks.pop(mach.valueStack));\\n        // Safe as the input integers are too small to overflow a uint256\\n        uint256 newSize = (uint256(oldPages) + uint256(growingPages)) * PAGE_SIZE;\\n        // Note: we require the size remain *below* 2^32, meaning the actual limit is 2^32-PAGE_SIZE\\n        if (newSize < (1 << 32)) {\\n            mod.moduleMemory.size = uint64(newSize);\\n            ValueStacks.push(mach.valueStack, Values.newI32(oldPages));\\n        } else {\\n            ValueStacks.push(mach.valueStack, Values.newI32(~uint32(0)));\\n        }\\n    }\\n\\n    function executeOneStep(ExecutionContext calldata, Machine calldata startMach, Module calldata startMod, Instruction calldata inst, bytes calldata proof)\\n        external\\n        pure\\n        override\\n        returns (Machine memory mach, Module memory mod)\\n    {\\n        mach = startMach;\\n        mod = startMod;\\n\\n        uint16 opcode = inst.opcode;\\n\\n        function(Machine memory, Module memory, Instruction calldata, bytes calldata)\\n            internal\\n            pure impl;\\n        if (\\n            opcode >= Instructions.I32_LOAD &&\\n            opcode <= Instructions.I64_LOAD32_U\\n        ) {\\n            impl = executeMemoryLoad;\\n        } else if (\\n            opcode >= Instructions.I32_STORE &&\\n            opcode <= Instructions.I64_STORE32\\n        ) {\\n            impl = executeMemoryStore;\\n        } else if (opcode == Instructions.MEMORY_SIZE) {\\n            impl = executeMemorySize;\\n        } else if (opcode == Instructions.MEMORY_GROW) {\\n            impl = executeMemoryGrow;\\n        } else {\\n            revert(\\\"INVALID_MEMORY_OPCODE\\\");\\n        }\\n\\n        impl(mach, mod, inst, proof);\\n    }\\n}\\n\",\"keccak256\":\"0x7bd8b906df620e416721bfd8ef140c59c79b8fbf878c6a408685c80eb318d470\",\"license\":\"UNLICENSED\"},\"src/state/Deserialize.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\nimport \\\"./ValueStacks.sol\\\";\\nimport \\\"./PcStacks.sol\\\";\\nimport \\\"./Machines.sol\\\";\\nimport \\\"./Instructions.sol\\\";\\nimport \\\"./StackFrames.sol\\\";\\nimport \\\"./MerkleProofs.sol\\\";\\nimport \\\"./ModuleMemories.sol\\\";\\nimport \\\"./Modules.sol\\\";\\nimport \\\"./GlobalStates.sol\\\";\\n\\nlibrary Deserialize {\\n\\tfunction u8(bytes calldata proof, uint256 startOffset) internal pure returns (uint8 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tret = uint8(proof[offset]);\\n\\t\\toffset++;\\n\\t}\\n\\n\\tfunction u16(bytes calldata proof, uint256 startOffset) internal pure returns (uint16 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tfor (uint256 i = 0; i < 16/8; i++) {\\n\\t\\t\\tret <<= 8;\\n\\t\\t\\tret |= uint8(proof[offset]);\\n\\t\\t\\toffset++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction u32(bytes calldata proof, uint256 startOffset) internal pure returns (uint32 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tfor (uint256 i = 0; i < 32/8; i++) {\\n\\t\\t\\tret <<= 8;\\n\\t\\t\\tret |= uint8(proof[offset]);\\n\\t\\t\\toffset++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction u64(bytes calldata proof, uint256 startOffset) internal pure returns (uint64 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tfor (uint256 i = 0; i < 64/8; i++) {\\n\\t\\t\\tret <<= 8;\\n\\t\\t\\tret |= uint8(proof[offset]);\\n\\t\\t\\toffset++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction u256(bytes calldata proof, uint256 startOffset) internal pure returns (uint256 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tfor (uint256 i = 0; i < 256/8; i++) {\\n\\t\\t\\tret <<= 8;\\n\\t\\t\\tret |= uint8(proof[offset]);\\n\\t\\t\\toffset++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction b32(bytes calldata proof, uint256 startOffset) internal pure returns (bytes32 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tuint256 retInt;\\n\\t\\t(retInt, offset) = u256(proof, offset);\\n\\t\\tret = bytes32(retInt);\\n\\t}\\n\\n\\tfunction value(bytes calldata proof, uint256 startOffset) internal pure returns (Value memory val, uint256 offset)  {\\n\\t\\toffset = startOffset;\\n\\t\\tuint8 typeInt = uint8(proof[offset]);\\n\\t\\toffset++;\\n\\t\\trequire(typeInt <= uint8(Values.maxValueType()), \\\"BAD_VALUE_TYPE\\\");\\n\\t\\tuint256 contents;\\n\\t\\t(contents, offset) = u256(proof, offset);\\n\\t\\tval = Value({\\n\\t\\t\\tvalueType: ValueType(typeInt),\\n\\t\\t\\tcontents: contents\\n\\t\\t});\\n\\t}\\n\\n\\tfunction valueStack(bytes calldata proof, uint256 startOffset) internal pure returns (ValueStack memory stack, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tbytes32 remainingHash;\\n\\t\\t(remainingHash, offset) = b32(proof, offset);\\n\\t\\tuint256 provedLength;\\n\\t\\t(provedLength, offset) = u256(proof, offset);\\n\\t\\tValue[] memory proved = new Value[](provedLength);\\n\\t\\tfor (uint256 i = 0; i < proved.length; i++) {\\n\\t\\t\\t(proved[i], offset) = value(proof, offset);\\n\\t\\t}\\n\\t\\tstack = ValueStack({\\n\\t\\t\\tproved: ValueArray(proved),\\n\\t\\t\\tremainingHash: remainingHash\\n\\t\\t});\\n\\t}\\n\\n\\tfunction pcStack(bytes calldata proof, uint256 startOffset) internal pure returns (PcStack memory stack, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tbytes32 remainingHash;\\n\\t\\t(remainingHash, offset) = b32(proof, offset);\\n\\t\\tuint256 provedLength;\\n\\t\\t(provedLength, offset) = u256(proof, offset);\\n\\t\\tuint32[] memory proved = new uint32[](provedLength);\\n\\t\\tfor (uint256 i = 0; i < proved.length; i++) {\\n\\t\\t\\t(proved[i], offset) = u32(proof, offset);\\n\\t\\t}\\n\\t\\tstack = PcStack({\\n\\t\\t\\tproved: PcArray(proved),\\n\\t\\t\\tremainingHash: remainingHash\\n\\t\\t});\\n\\t}\\n\\n\\tfunction instruction(bytes calldata proof, uint256 startOffset) internal pure returns (Instruction memory inst, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tuint16 opcode;\\n\\t\\tuint256 data;\\n\\t\\t(opcode, offset) = u16(proof, offset);\\n\\t\\t(data, offset) = u256(proof, offset);\\n\\t\\tinst = Instruction({\\n\\t\\t\\topcode: opcode,\\n\\t\\t\\targumentData: data\\n\\t\\t});\\n\\t}\\n\\n\\tfunction stackFrame(bytes calldata proof, uint256 startOffset) internal pure returns (StackFrame memory window, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tValue memory returnPc;\\n\\t\\tbytes32 localsMerkleRoot;\\n\\t\\tuint32 callerModule;\\n\\t\\tuint32 callerModuleInternals;\\n\\t\\t(returnPc, offset) = value(proof, offset);\\n\\t\\t(localsMerkleRoot, offset) = b32(proof, offset);\\n\\t\\t(callerModule, offset) = u32(proof, offset);\\n\\t\\t(callerModuleInternals, offset) = u32(proof, offset);\\n\\t\\twindow = StackFrame({\\n\\t\\t\\treturnPc: returnPc,\\n\\t\\t\\tlocalsMerkleRoot: localsMerkleRoot,\\n\\t\\t\\tcallerModule: callerModule,\\n\\t\\t\\tcallerModuleInternals: callerModuleInternals\\n\\t\\t});\\n\\t}\\n\\n\\tfunction stackFrameWindow(bytes calldata proof, uint256 startOffset) internal pure returns (StackFrameWindow memory window, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tbytes32 remainingHash;\\n\\t\\t(remainingHash, offset) = b32(proof, offset);\\n\\t\\tStackFrame[] memory proved;\\n\\t\\tif (proof[offset] != 0) {\\n\\t\\t\\toffset++;\\n\\t\\t\\tproved = new StackFrame[](1);\\n\\t\\t\\t(proved[0], offset) = stackFrame(proof, offset);\\n\\t\\t} else {\\n\\t\\t\\toffset++;\\n\\t\\t\\tproved = new StackFrame[](0);\\n\\t\\t}\\n\\t\\twindow = StackFrameWindow({\\n\\t\\t\\tproved: proved,\\n\\t\\t\\tremainingHash: remainingHash\\n\\t\\t});\\n\\t}\\n\\n\\tfunction moduleMemory(bytes calldata proof, uint256 startOffset) internal pure returns (ModuleMemory memory mem, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tuint64 size;\\n\\t\\tbytes32 root;\\n\\t\\t(size, offset) = u64(proof, offset);\\n\\t\\t(root, offset) = b32(proof, offset);\\n\\t\\tmem = ModuleMemory({\\n\\t\\t\\tsize: size,\\n\\t\\t\\tmerkleRoot: root\\n\\t\\t});\\n\\t}\\n\\n\\tfunction module(bytes calldata proof, uint256 startOffset) internal pure returns (Module memory mod, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tbytes32 globalsMerkleRoot;\\n\\t\\tModuleMemory memory mem;\\n\\t\\tbytes32 tablesMerkleRoot;\\n\\t\\tbytes32 functionsMerkleRoot;\\n\\t\\tuint32 internalsOffset;\\n\\t\\t(globalsMerkleRoot, offset) = b32(proof, offset);\\n\\t\\t(mem, offset) = moduleMemory(proof, offset);\\n\\t\\t(tablesMerkleRoot, offset) = b32(proof, offset);\\n\\t\\t(functionsMerkleRoot, offset) = b32(proof, offset);\\n\\t\\t(internalsOffset, offset) = u32(proof, offset);\\n\\t\\tmod = Module({\\n\\t\\t\\tglobalsMerkleRoot: globalsMerkleRoot,\\n\\t\\t\\tmoduleMemory: mem,\\n\\t\\t\\ttablesMerkleRoot: tablesMerkleRoot,\\n\\t\\t\\tfunctionsMerkleRoot: functionsMerkleRoot,\\n\\t\\t\\tinternalsOffset: internalsOffset\\n\\t\\t});\\n\\t}\\n\\n\\tfunction globalState(bytes calldata proof, uint256 startOffset) internal pure returns (GlobalState memory state, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\n\\t\\t// using constant ints for array size requires newer solidity\\n\\t\\tbytes32[1] memory bytes32_vals;\\n\\t\\tuint64[2] memory u64_vals;\\n\\n\\t\\tfor (uint8 i = 0; i< GlobalStates.BYTES32_VALS_NUM; i++) {\\n\\t\\t\\t(bytes32_vals[i], offset) = b32(proof, offset);\\n\\t\\t}\\n\\t\\tfor (uint8 i = 0; i< GlobalStates.U64_VALS_NUM; i++) {\\n\\t\\t\\t(u64_vals[i], offset) = u64(proof, offset);\\n\\t\\t}\\n\\t\\tstate = GlobalState({\\n\\t\\t\\tbytes32_vals: bytes32_vals,\\n\\t\\t\\tu64_vals: u64_vals\\n\\t\\t});\\n\\t}\\n\\n\\tfunction machine(bytes calldata proof, uint256 startOffset) internal pure returns (Machine memory mach, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tMachineStatus status;\\n\\t\\t{\\n\\t\\t\\tuint8 status_u8;\\n\\t\\t\\t(status_u8, offset) = u8(proof, offset);\\n\\t\\t\\tif (status_u8 == 0) {\\n\\t\\t\\t\\tstatus = MachineStatus.RUNNING;\\n\\t\\t\\t} else if (status_u8 == 1) {\\n\\t\\t\\t\\tstatus = MachineStatus.FINISHED;\\n\\t\\t\\t} else if (status_u8 == 2) {\\n\\t\\t\\t\\tstatus = MachineStatus.ERRORED;\\n\\t\\t\\t} else if (status_u8 == 3) {\\n\\t\\t\\t\\tstatus = MachineStatus.TOO_FAR;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(\\\"UNKNOWN_MACH_STATUS\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tValueStack memory values;\\n\\t\\tValueStack memory internalStack;\\n\\t\\tPcStack memory blocks;\\n\\t\\tbytes32 globalStateHash;\\n\\t\\tuint32 moduleIdx;\\n\\t\\tuint32 functionIdx;\\n\\t\\tuint32 functionPc;\\n\\t\\tStackFrameWindow memory frameStack;\\n\\t\\tbytes32 modulesRoot;\\n\\t\\t(values, offset) = valueStack(proof, offset);\\n\\t\\t(internalStack, offset) = valueStack(proof, offset);\\n\\t\\t(blocks, offset) = pcStack(proof, offset);\\n\\t\\t(frameStack, offset) = stackFrameWindow(proof, offset);\\n\\t\\t(globalStateHash, offset) = b32(proof, offset);\\n\\t\\t(moduleIdx, offset) = u32(proof, offset);\\n\\t\\t(functionIdx, offset) = u32(proof, offset);\\n\\t\\t(functionPc, offset) = u32(proof, offset);\\n\\t\\t(modulesRoot, offset) = b32(proof, offset);\\n\\t\\tmach = Machine({\\n\\t\\t\\tstatus: status,\\n\\t\\t\\tvalueStack: values,\\n\\t\\t\\tinternalStack: internalStack,\\n\\t\\t\\tblockStack: blocks,\\n\\t\\t\\tframeStack: frameStack,\\n\\t\\t\\tglobalStateHash: globalStateHash,\\n\\t\\t\\tmoduleIdx: moduleIdx,\\n\\t\\t\\tfunctionIdx: functionIdx,\\n\\t\\t\\tfunctionPc: functionPc,\\n\\t\\t\\tmodulesRoot: modulesRoot\\n\\t\\t});\\n\\t}\\n\\n\\tfunction merkleProof(bytes calldata proof, uint256 startOffset) internal pure returns (MerkleProof memory merkle, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tuint8 length;\\n\\t\\t(length, offset) = u8(proof, offset);\\n\\t\\tbytes32[] memory counterparts = new bytes32[](length);\\n\\t\\tfor (uint8 i = 0; i < length; i++) {\\n\\t\\t\\t(counterparts[i], offset) = b32(proof, offset);\\n\\t\\t}\\n\\t\\tmerkle = MerkleProof(counterparts);\\n\\t}\\n}\\n\",\"keccak256\":\"0x32a434c4f0cdabfeaac3589962cf2baae436569e8a9da409cfc418e5ead4cb1d\",\"license\":\"UNLICENSED\"},\"src/state/GlobalStates.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nstruct GlobalState {\\n\\tbytes32[1] bytes32_vals;\\n\\tuint64[2] u64_vals;\\n}\\n\\n\\nlibrary GlobalStates {\\n\\tuint16 constant BYTES32_VALS_NUM = 1;\\n\\tuint16 constant U64_VALS_NUM = 2;\\n\\tfunction hash(GlobalState memory state) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\n\\t\\t\\t\\\"Global state:\\\",\\n\\t\\t\\tstate.bytes32_vals[0],\\n\\t\\t\\tstate.u64_vals[0],\\n\\t\\t\\tstate.u64_vals[1]\\n\\t\\t));\\n\\t}\\n}\\n\",\"keccak256\":\"0x417592ac9b86d72227941cc836354eae4a32c6bf1730c798efaf5c8772043631\",\"license\":\"UNLICENSED\"},\"src/state/Instructions.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nstruct Instruction {\\n    uint16 opcode;\\n    uint256 argumentData;\\n}\\n\\nlibrary Instructions {\\n    uint16 constant UNREACHABLE = 0x00;\\n    uint16 constant NOP = 0x01;\\n    uint16 constant BLOCK = 0x02;\\n    uint16 constant BRANCH = 0x0C;\\n    uint16 constant BRANCH_IF = 0x0D;\\n    uint16 constant RETURN = 0x0F;\\n    uint16 constant CALL = 0x10;\\n    uint16 constant CALL_INDIRECT = 0x11;\\n    uint16 constant LOCAL_GET = 0x20;\\n    uint16 constant LOCAL_SET = 0x21;\\n    uint16 constant GLOBAL_GET = 0x23;\\n    uint16 constant GLOBAL_SET = 0x24;\\n\\n    uint16 constant I32_LOAD = 0x28;\\n    uint16 constant I64_LOAD = 0x29;\\n    uint16 constant F32_LOAD = 0x2A;\\n    uint16 constant F64_LOAD = 0x2B;\\n    uint16 constant I32_LOAD8_S = 0x2C;\\n    uint16 constant I32_LOAD8_U = 0x2D;\\n    uint16 constant I32_LOAD16_S = 0x2E;\\n    uint16 constant I32_LOAD16_U = 0x2F;\\n    uint16 constant I64_LOAD8_S = 0x30;\\n    uint16 constant I64_LOAD8_U = 0x31;\\n    uint16 constant I64_LOAD16_S = 0x32;\\n    uint16 constant I64_LOAD16_U = 0x33;\\n    uint16 constant I64_LOAD32_S = 0x34;\\n    uint16 constant I64_LOAD32_U = 0x35;\\n\\n    uint16 constant I32_STORE = 0x36;\\n    uint16 constant I64_STORE = 0x37;\\n    uint16 constant F32_STORE = 0x38;\\n    uint16 constant F64_STORE = 0x39;\\n    uint16 constant I32_STORE8 = 0x3A;\\n    uint16 constant I32_STORE16 = 0x3B;\\n    uint16 constant I64_STORE8 = 0x3C;\\n    uint16 constant I64_STORE16 = 0x3D;\\n    uint16 constant I64_STORE32 = 0x3E;\\n\\n    uint16 constant MEMORY_SIZE = 0x3F;\\n    uint16 constant MEMORY_GROW = 0x40;\\n\\n    uint16 constant DROP = 0x1A;\\n    uint16 constant SELECT = 0x1B;\\n    uint16 constant I32_CONST = 0x41;\\n    uint16 constant I64_CONST = 0x42;\\n    uint16 constant F32_CONST = 0x43;\\n    uint16 constant F64_CONST = 0x44;\\n    uint16 constant I32_EQZ = 0x45;\\n    uint16 constant I32_RELOP_BASE = 0x46;\\n    uint16 constant IRELOP_EQ = 0;\\n    uint16 constant IRELOP_NE = 1;\\n    uint16 constant IRELOP_LT_S = 2;\\n    uint16 constant IRELOP_LT_U = 3;\\n    uint16 constant IRELOP_GT_S = 4;\\n    uint16 constant IRELOP_GT_U = 5;\\n    uint16 constant IRELOP_LE_S = 6;\\n    uint16 constant IRELOP_LE_U = 7;\\n    uint16 constant IRELOP_GE_S = 8;\\n    uint16 constant IRELOP_GE_U = 9;\\n    uint16 constant IRELOP_LAST = IRELOP_GE_U;\\n\\n    uint16 constant I64_EQZ = 0x50;\\n    uint16 constant I64_RELOP_BASE = 0x51;\\n\\n    uint16 constant I32_UNOP_BASE = 0x67;\\n    uint16 constant IUNOP_CLZ = 0;\\n    uint16 constant IUNOP_CTZ = 1;\\n    uint16 constant IUNOP_POPCNT = 2;\\n    uint16 constant IUNOP_LAST = IUNOP_POPCNT;\\n\\n    uint16 constant I32_ADD = 0x6A;\\n    uint16 constant I32_SUB = 0x6B;\\n    uint16 constant I32_MUL = 0x6C;\\n    uint16 constant I32_DIV_S = 0x6D;\\n    uint16 constant I32_DIV_U = 0x6E;\\n    uint16 constant I32_REM_S = 0x6F;\\n    uint16 constant I32_REM_U = 0x70;\\n    uint16 constant I32_AND = 0x71;\\n    uint16 constant I32_OR = 0x72;\\n    uint16 constant I32_XOR = 0x73;\\n    uint16 constant I32_SHL = 0x74;\\n    uint16 constant I32_SHR_S = 0x75;\\n    uint16 constant I32_SHR_U = 0x76;\\n    uint16 constant I32_ROTL = 0x77;\\n    uint16 constant I32_ROTR = 0x78;\\n\\n    uint16 constant I64_UNOP_BASE = 0x79;\\n\\n    uint16 constant I64_ADD = 0x7C;\\n    uint16 constant I64_SUB = 0x7D;\\n    uint16 constant I64_MUL = 0x7E;\\n    uint16 constant I64_DIV_S = 0x7F;\\n    uint16 constant I64_DIV_U = 0x80;\\n    uint16 constant I64_REM_S = 0x81;\\n    uint16 constant I64_REM_U = 0x82;\\n    uint16 constant I64_AND = 0x83;\\n    uint16 constant I64_OR = 0x84;\\n    uint16 constant I64_XOR = 0x85;\\n    uint16 constant I64_SHL = 0x86;\\n    uint16 constant I64_SHR_S = 0x87;\\n    uint16 constant I64_SHR_U = 0x88;\\n    uint16 constant I64_ROTL = 0x89;\\n    uint16 constant I64_ROTR = 0x8A;\\n\\n    uint16 constant I32_WRAP_I64 = 0xA7;\\n    uint16 constant I64_EXTEND_I32_S = 0xAC;\\n    uint16 constant I64_EXTEND_I32_U = 0xAD;\\n\\n    uint16 constant I32_REINTERPRET_F32 = 0xBC;\\n    uint16 constant I64_REINTERPRET_F64 = 0xBD;\\n    uint16 constant F32_REINTERPRET_I32 = 0xBE;\\n    uint16 constant F64_REINTERPRET_I64 = 0xBF;\\n\\n    uint16 constant I32_EXTEND_8S = 0xC0;\\n    uint16 constant I32_EXTEND_16S = 0xC1;\\n    uint16 constant I64_EXTEND_8S = 0xC2;\\n    uint16 constant I64_EXTEND_16S = 0xC3;\\n    uint16 constant I64_EXTEND_32S = 0xC4;\\n\\n    uint16 constant END_BLOCK = 0x8000;\\n    uint16 constant END_BLOCK_IF = 0x8001;\\n    uint16 constant INIT_FRAME = 0x8002;\\n    uint16 constant ARBITRARY_JUMP_IF = 0x8003;\\n    uint16 constant PUSH_STACK_BOUNDARY = 0x8004;\\n    uint16 constant MOVE_FROM_STACK_TO_INTERNAL = 0x8005;\\n    uint16 constant MOVE_FROM_INTERNAL_TO_STACK = 0x8006;\\n    uint16 constant IS_STACK_BOUNDARY = 0x8007;\\n    uint16 constant DUP = 0x8008;\\n    uint16 constant CROSS_MODULE_CALL = 0x8009;\\n    uint16 constant CALLER_MODULE_INTERNAL_CALL = 0x800A;\\n\\n    uint16 constant GET_GLOBAL_STATE_BYTES32 = 0x8010;\\n    uint16 constant SET_GLOBAL_STATE_BYTES32 = 0x8011;\\n    uint16 constant GET_GLOBAL_STATE_U64 = 0x8012;\\n    uint16 constant SET_GLOBAL_STATE_U64 = 0x8013;\\n\\n    uint16 constant READ_PRE_IMAGE = 0x8020;\\n    uint16 constant READ_INBOX_MESSAGE = 0x8021;\\n    uint16 constant HALT_AND_SET_FINISHED = 0x8022;\\n\\n    uint256 constant INBOX_INDEX_SEQUENCER = 0;\\n    uint256 constant INBOX_INDEX_DELAYED = 1;\\n\\n    function hash(Instruction memory inst) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"Instruction:\\\", inst.opcode, inst.argumentData)\\n            );\\n    }\\n\\n    function newNop() internal pure returns (Instruction memory) {\\n        return Instruction({opcode: NOP, argumentData: 0});\\n    }\\n}\\n\",\"keccak256\":\"0xf273ee49bad2f0df9949848a86d77ede70547664094d5a5b988f1a50781cbcb5\",\"license\":\"UNLICENSED\"},\"src/state/Machines.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ValueStacks.sol\\\";\\nimport \\\"./PcStacks.sol\\\";\\nimport \\\"./Instructions.sol\\\";\\nimport \\\"./StackFrames.sol\\\";\\n\\nenum MachineStatus {\\n\\tRUNNING,\\n\\tFINISHED,\\n\\tERRORED,\\n\\tTOO_FAR\\n}\\n\\nstruct Machine {\\n\\tMachineStatus status;\\n\\tValueStack valueStack;\\n\\tValueStack internalStack;\\n\\tPcStack blockStack;\\n\\tStackFrameWindow frameStack;\\n\\tbytes32 globalStateHash;\\n\\tuint32 moduleIdx;\\n\\tuint32 functionIdx;\\n\\tuint32 functionPc;\\n\\tbytes32 modulesRoot;\\n}\\n\\nlibrary Machines {\\n\\tfunction hash(Machine memory mach) internal pure returns (bytes32) {\\n\\t\\t// Warning: the non-running hashes are replicated in BlockChallenge\\n\\t\\tif (mach.status == MachineStatus.RUNNING) {\\n\\t\\t\\treturn keccak256(abi.encodePacked(\\n\\t\\t\\t\\t\\\"Machine running:\\\",\\n\\t\\t\\t\\tValueStacks.hash(mach.valueStack),\\n\\t\\t\\t\\tValueStacks.hash(mach.internalStack),\\n\\t\\t\\t\\tPcStacks.hash(mach.blockStack),\\n\\t\\t\\t\\tStackFrames.hash(mach.frameStack),\\n\\t\\t\\t\\tmach.globalStateHash,\\n\\t\\t\\t\\tmach.moduleIdx,\\n\\t\\t\\t\\tmach.functionIdx,\\n\\t\\t\\t\\tmach.functionPc,\\n\\t\\t\\t\\tmach.modulesRoot\\n\\t\\t\\t));\\n\\t\\t} else if (mach.status == MachineStatus.FINISHED) {\\n\\t\\t\\treturn keccak256(abi.encodePacked(\\n\\t\\t\\t\\t\\\"Machine finished:\\\",\\n\\t\\t\\t\\tmach.globalStateHash\\n\\t\\t\\t));\\n\\t\\t} else if (mach.status == MachineStatus.ERRORED) {\\n\\t\\t\\treturn keccak256(abi.encodePacked(\\\"Machine errored:\\\"));\\n\\t\\t} else if (mach.status == MachineStatus.TOO_FAR) {\\n\\t\\t\\treturn keccak256(abi.encodePacked(\\\"Machine too far:\\\"));\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"BAD_MACH_STATUS\\\");\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xc7501a5fabd0fe8a0aac6a4f5ae560789a0932287718fbe4eda68aa8ed37b273\",\"license\":\"UNLICENSED\"},\"src/state/MerkleProofs.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\nimport \\\"./Instructions.sol\\\";\\nimport \\\"./Modules.sol\\\";\\n\\nstruct MerkleProof {\\n\\tbytes32[] counterparts;\\n}\\n\\nlibrary MerkleProofs {\\n\\tfunction computeRootFromValue(MerkleProof memory proof, uint256 index, Value memory leaf) internal pure returns (bytes32) {\\n\\t\\treturn computeRootUnsafe(proof, index, Values.hash(leaf), \\\"Value merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromInstruction(MerkleProof memory proof, uint256 index, Instruction memory inst) internal pure returns (bytes32) {\\n\\t\\treturn computeRootUnsafe(proof, index, Instructions.hash(inst), \\\"Instruction merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromFunction(MerkleProof memory proof, uint256 index, bytes32 codeRoot) internal pure returns (bytes32) {\\n\\t\\tbytes32 h = keccak256(abi.encodePacked(\\\"Function:\\\", codeRoot));\\n\\t\\treturn computeRootUnsafe(proof, index, h, \\\"Function merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromMemory(MerkleProof memory proof, uint256 index, bytes32 contents) internal pure returns (bytes32) {\\n\\t\\tbytes32 h = keccak256(abi.encodePacked(\\\"Memory leaf:\\\", contents));\\n\\t\\treturn computeRootUnsafe(proof, index, h, \\\"Memory merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromElement(MerkleProof memory proof, uint256 index, bytes32 funcTypeHash, Value memory val) internal pure returns (bytes32) {\\n\\t\\tbytes32 h = keccak256(abi.encodePacked(\\\"Table element:\\\", funcTypeHash, Values.hash(val)));\\n\\t\\treturn computeRootUnsafe(proof, index, h, \\\"Table element merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromTable(MerkleProof memory proof, uint256 index, uint8 tableType, uint64 tableSize, bytes32 elementsRoot) internal pure returns (bytes32) {\\n\\t\\tbytes32 h = keccak256(abi.encodePacked(\\\"Table:\\\", tableType, tableSize, elementsRoot));\\n\\t\\treturn computeRootUnsafe(proof, index, h, \\\"Table merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromModule(MerkleProof memory proof, uint256 index, Module memory mod) internal pure returns (bytes32) {\\n\\t\\treturn computeRootUnsafe(proof, index, Modules.hash(mod), \\\"Module merkle tree:\\\");\\n\\t}\\n\\n\\t// WARNING: leafHash must be computed in such a way that it cannot be a non-leaf hash.\\n\\tfunction computeRootUnsafe(MerkleProof memory proof, uint256 index, bytes32 leafHash, string memory prefix) internal pure returns (bytes32 h) {\\n\\t\\th = leafHash;\\n\\t\\tfor (uint256 layer = 0; layer < proof.counterparts.length; layer++) {\\n\\t\\t\\tif (index & 1 == 0) {\\n\\t\\t\\t\\th = keccak256(abi.encodePacked(prefix, h, proof.counterparts[layer]));\\n\\t\\t\\t} else {\\n\\t\\t\\t\\th = keccak256(abi.encodePacked(prefix, proof.counterparts[layer], h));\\n\\t\\t\\t}\\n\\t\\t\\tindex >>= 1;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x3696497409a3c3cdf6e0af1cc0048dbaa9fcb9ead23b409a717367e5dc08ed07\",\"license\":\"UNLICENSED\"},\"src/state/ModuleMemories.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./MerkleProofs.sol\\\";\\nimport \\\"./Deserialize.sol\\\";\\n\\nstruct ModuleMemory {\\n\\tuint64 size;\\n\\tbytes32 merkleRoot;\\n}\\n\\nlibrary ModuleMemories {\\n\\tfunction hash(ModuleMemory memory mem) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\\"Memory:\\\", mem.size, mem.merkleRoot));\\n\\t}\\n\\n\\tfunction proveLeaf(ModuleMemory memory mem, uint256 leafIdx, bytes calldata proof, uint256 startOffset) internal pure returns (bytes32 contents, uint256 offset, MerkleProof memory merkle) {\\n\\t\\toffset = startOffset;\\n\\t\\t(contents, offset) = Deserialize.b32(proof, offset);\\n\\t\\t(merkle, offset) = Deserialize.merkleProof(proof, offset);\\n\\t\\tbytes32 recomputedRoot = MerkleProofs.computeRootFromMemory(merkle, leafIdx, contents);\\n\\t\\trequire(recomputedRoot == mem.merkleRoot, \\\"WRONG_MEM_ROOT\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0x5f836a5d36dff4e34cd02ef20f16eccbe6869fe9011eba8e8ff6ba0430910fe0\",\"license\":\"UNLICENSED\"},\"src/state/Modules.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ModuleMemories.sol\\\";\\n\\nstruct Module {\\n    bytes32 globalsMerkleRoot;\\n    ModuleMemory moduleMemory;\\n    bytes32 tablesMerkleRoot;\\n    bytes32 functionsMerkleRoot;\\n    uint32 internalsOffset;\\n}\\n\\nlibrary Modules {\\n    function hash(Module memory mod) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"Module:\\\",\\n                    mod.globalsMerkleRoot,\\n                    ModuleMemories.hash(mod.moduleMemory),\\n                    mod.tablesMerkleRoot,\\n                    mod.functionsMerkleRoot,\\n                    mod.internalsOffset\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x40ac3cca47c15c6f601467e1a3a35bb058d65fd5ac74c628edcdec0fa4aad0f4\",\"license\":\"UNLICENSED\"},\"src/state/PcArrays.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nstruct PcArray {\\n\\tuint32[] inner;\\n}\\n\\nlibrary PcArrays {\\n\\tfunction get(PcArray memory arr, uint256 index) internal pure returns (uint32) {\\n\\t\\treturn arr.inner[index];\\n\\t}\\n\\n\\tfunction set(PcArray memory arr, uint256 index, uint32 val) internal pure {\\n\\t\\tarr.inner[index] = val;\\n\\t}\\n\\n\\tfunction length(PcArray memory arr) internal pure returns (uint256) {\\n\\t\\treturn arr.inner.length;\\n\\t}\\n\\n\\tfunction push(PcArray memory arr, uint32 val) internal pure {\\n\\t\\tuint32[] memory newInner = new uint32[](arr.inner.length + 1);\\n\\t\\tfor (uint256 i = 0; i < arr.inner.length; i++) {\\n\\t\\t\\tnewInner[i] = arr.inner[i];\\n\\t\\t}\\n\\t\\tnewInner[arr.inner.length] = val;\\n\\t\\tarr.inner = newInner;\\n\\t}\\n\\n\\tfunction pop(PcArray memory arr) internal pure returns (uint32 popped) {\\n\\t\\tpopped = arr.inner[arr.inner.length - 1];\\n\\t\\tuint32[] memory newInner = new uint32[](arr.inner.length - 1);\\n\\t\\tfor (uint256 i = 0; i < newInner.length; i++) {\\n\\t\\t\\tnewInner[i] = arr.inner[i];\\n\\t\\t}\\n\\t\\tarr.inner = newInner;\\n\\t}\\n}\\n\",\"keccak256\":\"0x1a2fa6e3929c5e6afd56643896b8074ee830207866ed65c2e85dd7908482c39b\",\"license\":\"UNLICENSED\"},\"src/state/PcStacks.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PcArrays.sol\\\";\\n\\nstruct PcStack {\\n\\tPcArray proved;\\n\\tbytes32 remainingHash;\\n}\\n\\nlibrary PcStacks {\\n\\tfunction hash(PcStack memory stack) internal pure returns (bytes32 h) {\\n\\t\\th = stack.remainingHash;\\n\\t\\tuint256 len = PcArrays.length(stack.proved);\\n\\t\\tfor (uint256 i = 0; i < len; i++) {\\n\\t\\t\\th = keccak256(abi.encodePacked(\\\"Program counter stack:\\\", PcArrays.get(stack.proved, i), h));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction pop(PcStack memory stack) internal pure returns (uint32) {\\n\\t\\treturn PcArrays.pop(stack.proved);\\n\\t}\\n\\n\\tfunction push(PcStack memory stack, uint32 val) internal pure {\\n\\t\\treturn PcArrays.push(stack.proved, val);\\n\\t}\\n\\n\\tfunction isEmpty(PcStack memory stack) internal pure returns (bool) {\\n\\t\\treturn PcArrays.length(stack.proved) == 0 && stack.remainingHash == bytes32(0);\\n\\t}\\n\\n\\tfunction hasProvenDepthLessThan(PcStack memory stack, uint256 bound) internal pure returns (bool) {\\n\\t\\treturn PcArrays.length(stack.proved) < bound && stack.remainingHash == bytes32(0);\\n\\t}\\n}\\n\",\"keccak256\":\"0x90258f73cc0d9af360f8ded68504aa1a2841ff46c20041dc40fc9df16a62b281\",\"license\":\"UNLICENSED\"},\"src/state/StackFrames.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\n\\nstruct StackFrame {\\n    Value returnPc;\\n    bytes32 localsMerkleRoot;\\n    uint32 callerModule;\\n    uint32 callerModuleInternals;\\n}\\n\\nstruct StackFrameWindow {\\n    StackFrame[] proved;\\n    bytes32 remainingHash;\\n}\\n\\nlibrary StackFrames {\\n    function hash(StackFrame memory frame) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"Stack frame:\\\",\\n                    Values.hash(frame.returnPc),\\n                    frame.localsMerkleRoot,\\n                    frame.callerModule,\\n                    frame.callerModuleInternals\\n                )\\n            );\\n    }\\n\\n    function hash(StackFrameWindow memory window)\\n        internal\\n        pure\\n        returns (bytes32 h)\\n    {\\n        h = window.remainingHash;\\n        for (uint256 i = 0; i < window.proved.length; i++) {\\n            h = keccak256(\\n                abi.encodePacked(\\n                    \\\"Stack frame stack:\\\",\\n                    hash(window.proved[i]),\\n                    h\\n                )\\n            );\\n        }\\n    }\\n\\n    function peek(StackFrameWindow memory window)\\n        internal\\n        pure\\n        returns (StackFrame memory)\\n    {\\n        require(window.proved.length == 1, \\\"BAD_WINDOW_LENGTH\\\");\\n        return window.proved[0];\\n    }\\n\\n    function pop(StackFrameWindow memory window)\\n        internal\\n        pure\\n        returns (StackFrame memory frame)\\n    {\\n        require(window.proved.length == 1, \\\"BAD_WINDOW_LENGTH\\\");\\n        frame = window.proved[0];\\n        window.proved = new StackFrame[](0);\\n    }\\n\\n    function push(StackFrameWindow memory window, StackFrame memory frame)\\n        internal\\n        pure\\n    {\\n        StackFrame[] memory newProved = new StackFrame[](\\n            window.proved.length + 1\\n        );\\n        for (uint256 i = 0; i < window.proved.length; i++) {\\n            newProved[i] = window.proved[i];\\n        }\\n        newProved[window.proved.length] = frame;\\n        window.proved = newProved;\\n    }\\n}\\n\",\"keccak256\":\"0x33d0cd90f98e6036b274316c9ef622cdba8751a393656f838eb9795423073ee1\",\"license\":\"UNLICENSED\"},\"src/state/ValueArrays.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\n\\nstruct ValueArray {\\n\\tValue[] inner;\\n}\\n\\nlibrary ValueArrays {\\n\\tfunction get(ValueArray memory arr, uint256 index) internal pure returns (Value memory) {\\n\\t\\treturn arr.inner[index];\\n\\t}\\n\\n\\tfunction set(ValueArray memory arr, uint256 index, Value memory val) internal pure {\\n\\t\\tarr.inner[index] = val;\\n\\t}\\n\\n\\tfunction length(ValueArray memory arr) internal pure returns (uint256) {\\n\\t\\treturn arr.inner.length;\\n\\t}\\n\\n\\tfunction push(ValueArray memory arr, Value memory val) internal pure {\\n\\t\\tValue[] memory newInner = new Value[](arr.inner.length + 1);\\n\\t\\tfor (uint256 i = 0; i < arr.inner.length; i++) {\\n\\t\\t\\tnewInner[i] = arr.inner[i];\\n\\t\\t}\\n\\t\\tnewInner[arr.inner.length] = val;\\n\\t\\tarr.inner = newInner;\\n\\t}\\n\\n\\tfunction pop(ValueArray memory arr) internal pure returns (Value memory popped) {\\n\\t\\tpopped = arr.inner[arr.inner.length - 1];\\n\\t\\tValue[] memory newInner = new Value[](arr.inner.length - 1);\\n\\t\\tfor (uint256 i = 0; i < newInner.length; i++) {\\n\\t\\t\\tnewInner[i] = arr.inner[i];\\n\\t\\t}\\n\\t\\tarr.inner = newInner;\\n\\t}\\n}\\n\",\"keccak256\":\"0xee609e88227972d896e3c4dd3eb9d5fbedbcc043c1c593735923509557c5f125\",\"license\":\"UNLICENSED\"},\"src/state/ValueStacks.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\nimport \\\"./ValueArrays.sol\\\";\\n\\nstruct ValueStack {\\n\\tValueArray proved;\\n\\tbytes32 remainingHash;\\n}\\n\\nlibrary ValueStacks {\\n\\tfunction hash(ValueStack memory stack) internal pure returns (bytes32 h) {\\n\\t\\th = stack.remainingHash;\\n\\t\\tuint256 len = ValueArrays.length(stack.proved);\\n\\t\\tfor (uint256 i = 0; i < len; i++) {\\n\\t\\t\\th = keccak256(abi.encodePacked(\\\"Value stack:\\\", Values.hash(ValueArrays.get(stack.proved, i)), h));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction peek(ValueStack memory stack) internal pure returns (Value memory) {\\n\\t\\tuint256 len = ValueArrays.length(stack.proved);\\n\\t\\treturn ValueArrays.get(stack.proved, len - 1);\\n\\t}\\n\\n\\tfunction pop(ValueStack memory stack) internal pure returns (Value memory) {\\n\\t\\treturn ValueArrays.pop(stack.proved);\\n\\t}\\n\\n\\tfunction push(ValueStack memory stack, Value memory val) internal pure {\\n\\t\\treturn ValueArrays.push(stack.proved, val);\\n\\t}\\n\\n\\tfunction isEmpty(ValueStack memory stack) internal pure returns (bool) {\\n\\t\\treturn ValueArrays.length(stack.proved) == 0 && stack.remainingHash == bytes32(0);\\n\\t}\\n\\n\\tfunction hasProvenDepthLessThan(ValueStack memory stack, uint256 bound) internal pure returns (bool) {\\n\\t\\treturn ValueArrays.length(stack.proved) < bound && stack.remainingHash == bytes32(0);\\n\\t}\\n}\\n\",\"keccak256\":\"0x5c0cf0db204e28fff836c7b53c622e6d7fcf5d91d3f17a275e2d99710b3dbcb5\",\"license\":\"UNLICENSED\"},\"src/state/Values.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nenum ValueType {\\n\\tI32,\\n\\tI64,\\n\\tF32,\\n\\tF64,\\n\\tREF_NULL,\\n\\tFUNC_REF,\\n\\tINTERNAL_REF,\\n\\tSTACK_BOUNDARY\\n}\\n\\nstruct Value {\\n\\tValueType valueType;\\n\\tuint256 contents;\\n}\\n\\nlibrary Values {\\n\\tfunction hash(Value memory val) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\\"Value:\\\", val.valueType, val.contents));\\n\\t}\\n\\n\\tfunction maxValueType() internal pure returns (ValueType) {\\n\\t\\treturn ValueType.STACK_BOUNDARY;\\n\\t}\\n\\n\\tfunction isNumeric(ValueType val) internal pure returns (bool) {\\n\\t\\treturn val == ValueType.I32 || val == ValueType.I64 || val == ValueType.F32 || val == ValueType.F64;\\n\\t}\\n\\n\\tfunction isNumeric(Value memory val) internal pure returns (bool) {\\n\\t\\treturn isNumeric(val.valueType);\\n\\t}\\n\\n\\tfunction assumeI32(Value memory val) internal pure returns(uint32) {\\n\\t\\tuint uintval = uint(val.contents);\\n\\t\\trequire(val.valueType == ValueType.I32, \\\"NOT_I32\\\");\\n\\t\\trequire(uintval < (1<<32), \\\"BAD_I32\\\");\\n\\t\\treturn uint32(uintval);\\n\\t}\\n\\n\\tfunction assumeI64(Value memory val) internal pure returns(uint64) {\\n\\t\\tuint uintval = uint(val.contents);\\n\\t\\trequire(val.valueType == ValueType.I64, \\\"NOT_I64\\\");\\n\\t\\trequire(uintval < (1<<64), \\\"BAD_I64\\\");\\n\\t\\treturn uint64(uintval);\\n\\t}\\n\\n\\tfunction newRefNull() internal pure returns (Value memory) {\\n\\t\\treturn Value({\\n\\t\\t\\tvalueType: ValueType.REF_NULL,\\n\\t\\t\\tcontents: 0\\n\\t\\t});\\n\\t}\\n\\n\\tfunction newI32(uint32 x) internal pure returns (Value memory) {\\n\\t\\treturn Value({\\n\\t\\t\\tvalueType: ValueType.I32,\\n\\t\\t\\tcontents: uint256(x)\\n\\t\\t});\\n\\t}\\n\\n\\tfunction newI64(uint64 x) internal pure returns (Value memory) {\\n\\t\\treturn Value({\\n\\t\\t\\tvalueType: ValueType.I64,\\n\\t\\t\\tcontents: uint256(x)\\n\\t\\t});\\n\\t}\\n\\n\\tfunction newBoolean(bool x) internal pure returns (Value memory) {\\n\\t\\tif (x) {\\n\\t\\t\\treturn newI32(uint32(1));\\n\\t\\t} else {\\n\\t\\t\\treturn newI32(uint32(0));\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x2c30c3b373b6442aaef6407afe370abc25a2eb41bb4368294dd120c99c1b594f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506131d3806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c4017b3814610030575b600080fd5b61004a60048036038101906100459190611f57565b610061565b6040516100589291906128a3565b60405180910390f35b610069611547565b6100716115dc565b8661007b90612ca7565b91508580360381019061008e9190612010565b905060008560000160208101906100a5919061203d565b9050611620602861ffff168261ffff16101580156100cc5750603561ffff168261ffff1611155b156100db5761019e9050610180565b603661ffff168261ffff16101580156100fd5750603e61ffff168261ffff1611155b1561010c576107f1905061017f565b603f61ffff168261ffff16141561012757610c43905061017e565b604061ffff168261ffff16141561014257610c7c905061017d565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017490612763565b60405180910390fd5b5b5b5b61019184848989898663ffffffff16565b5050965096945050505050565b6000806000602861ffff168660000160208101906101bc919061203d565b61ffff1614156101d7576000925060049150600090506104c3565b602961ffff168660000160208101906101f0919061203d565b61ffff16141561020b576001925060089150600090506104c2565b602a61ffff16866000016020810190610224919061203d565b61ffff16141561023f576002925060049150600090506104c1565b602b61ffff16866000016020810190610258919061203d565b61ffff161415610273576003925060089150600090506104c0565b602c61ffff1686600001602081019061028c919061203d565b61ffff1614156102a7576000925060019150600190506104bf565b602d61ffff168660000160208101906102c0919061203d565b61ffff1614156102db576000925060019150600090506104be565b602e61ffff168660000160208101906102f4919061203d565b61ffff16141561030f576000925060029150600190506104bd565b602f61ffff16866000016020810190610328919061203d565b61ffff161415610343576000925060029150600090506104bc565b603061ffff1686600001602081019061035c919061203d565b61ffff161415610377576001925060019150600190506104bb565b603161ffff16866000016020810190610390919061203d565b61ffff1614156103ab576001925060019150600090506104ba565b603261ffff168660000160208101906103c4919061203d565b61ffff1614156103df576001925060029150600190506104b9565b603361ffff168660000160208101906103f8919061203d565b61ffff161415610413576001925060029150600090506104b8565b603461ffff1686600001602081019061042c919061203d565b61ffff161415610447576001925060049150600190506104b7565b603561ffff16866000016020810190610460919061203d565b61ffff16141561047b576001925060049150600090506104b6565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ad906127c3565b60405180910390fd5b5b5b5b5b5b5b5b5b5b5b5b5b5b60006104d28960200151610d53565b6020015187602001356104e59190612a4e565b905087602001516000015167ffffffffffffffff1683826105069190612a4e565b11156105465760028960000190600381111561052557610524612e2a565b5b9081600381111561053957610538612e2a565b5b81525050505050506107ea565b6000808019905060008060005b878110156105fc57600081876105699190612a4e565b9050600060208261057a9190612aa4565b90508581146105a1576105948f60200151828f8f8b610d6f565b5080985081965050508095505b60006020836105b09190612d9b565b90506008846105bf9190612b06565b67ffffffffffffffff166105d38783610e04565b60ff1667ffffffffffffffff16901b8517945050505080806105f490612d1e565b915050610553565b5085156107a35760018714801561063757506000600781111561062257610621612e2a565b5b88600781111561063557610634612e2a565b5b145b1561064d578060000b63ffffffff1690506107a2565b60018714801561068157506001600781111561066c5761066b612e2a565b5b88600781111561067f5761067e612e2a565b5b145b15610691578060000b90506107a1565b6002871480156106c55750600060078111156106b0576106af612e2a565b5b8860078111156106c3576106c2612e2a565b5b145b156106db578060010b63ffffffff1690506107a0565b60028714801561070f5750600160078111156106fa576106f9612e2a565b5b88600781111561070d5761070c612e2a565b5b145b1561071f578060010b905061079f565b60048714801561075357506001600781111561073e5761073d612e2a565b5b88600781111561075157610750612e2a565b5b145b15610763578060030b905061079e565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610795906127a3565b60405180910390fd5b5b5b5b5b5b6107e18d6020015160405180604001604052808b60078111156107c9576107c8612e2a565b5b81526020018467ffffffffffffffff16815250610e82565b50505050505050505b5050505050565b6000806000603661ffff1686600001602081019061080f919061203d565b61ffff1614156108265760009050600492506109e9565b603761ffff1686600001602081019061083f919061203d565b61ffff1614156108565760019050600892506109e8565b603861ffff1686600001602081019061086f919061203d565b61ffff1614156108865760029050600492506109e7565b603961ffff1686600001602081019061089f919061203d565b61ffff1614156108b65760039050600892506109e6565b603a61ffff168660000160208101906108cf919061203d565b61ffff1614156108e65760009050600192506109e5565b603b61ffff168660000160208101906108ff919061203d565b61ffff1614156109165760009050600292506109e4565b603c61ffff1686600001602081019061092f919061203d565b61ffff1614156109465760019050600192506109e3565b603d61ffff1686600001602081019061095f919061203d565b61ffff1614156109765760019050600292506109e2565b603e61ffff1686600001602081019061098f919061203d565b61ffff1614156109a65760019050600492506109e1565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d890612883565b60405180910390fd5b5b5b5b5b5b5b5b5b60006109f88960200151610d53565b9050816007811115610a0d57610a0c612e2a565b5b81600001516007811115610a2457610a23612e2a565b5b14610a64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5b90612783565b60405180910390fd5b8060200151925060088467ffffffffffffffff161015610ab4576001600885610a8d9190612b60565b67ffffffffffffffff16600167ffffffffffffffff16901b610aaf9190612bd6565b831692505b50506000610ac58860200151610d53565b602001518660200135610ad89190612a4e565b905086602001516000015167ffffffffffffffff168367ffffffffffffffff1682610b039190612a4e565b1115610b4257600288600001906003811115610b2257610b21612e2a565b5b90816003811115610b3657610b35612e2a565b5b81525050505050610c3c565b60008080199050610b5161162a565b600080600090505b8767ffffffffffffffff16811015610c1b5760008187610b799190612a4e565b90506000602082610b8a9190612aa4565b9050858114610bd6576000198614610bb557610ba7858786610e94565b8e6020015160200181815250505b610bc68e60200151828e8e8b610d6f565b8097508199508296505050508095505b6000602083610be59190612d9b565b9050610bf285828c610f0b565b945060088a67ffffffffffffffff16901c99505050508080610c1390612d1e565b915050610b59565b50610c27828483610e94565b8b602001516020018181525050505050505050505b5050505050565b600062010000856020015160000151610c5c9190612ad5565b9050610c748660200151610c6f83610fa5565b610e82565b505050505050565b600062010000856020015160000151610c959190612ad5565b90506000610cae610ca98860200151610d53565b610fe2565b905060006201000067ffffffffffffffff168263ffffffff168463ffffffff16610cd89190612a4e565b610ce29190612b06565b9050640100000000811015610d30578087602001516000019067ffffffffffffffff16908167ffffffffffffffff1681525050610d2b8860200151610d2685610fa5565b610e82565b610d49565b610d488860200151610d43600019610fa5565b610e82565b5b5050505050505050565b610d5b61163d565b610d6882600001516110a7565b9050919050565b600080610d7a61162a565b839150610d888686846111b6565b8093508194505050610d9b8686846111e0565b80935081925050506000610db0828986610e94565b905088602001518114610df8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610def90612843565b60405180910390fd5b50955095509592505050565b600060208210610e49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e40906127e3565b60405180910390fd5b600060088360016020610e5c9190612ba2565b610e669190612ba2565b610e709190612b06565b9050808460001c901c91505092915050565b610e908260000151826112c3565b5050565b60008082604051602001610ea8919061273d565b604051602081830303815290604052805190602001209050610f018585836040518060400160405280601381526020017f4d656d6f7279206d65726b6c6520747265653a000000000000000000000000008152506113bf565b9150509392505050565b600060208310610f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4790612823565b60405180910390fd5b600060088460016020610f639190612ba2565b610f6d9190612ba2565b610f779190612b06565b905060008560001c90508160ff901b1981169050818460ff16901b811790508060001b925050509392505050565b610fad61163d565b604051806040016040528060006007811115610fcc57610fcb612e2a565b5b81526020018363ffffffff168152509050919050565b600080826020015190506000600781111561100057610fff612e2a565b5b8360000151600781111561101757611016612e2a565b5b14611057576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104e90612863565b60405180910390fd5b640100000000811061109e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109590612803565b60405180910390fd5b80915050919050565b6110af61163d565b816000015160018360000151516110c69190612ba2565b815181106110d7576110d6612e59565b5b60200260200101519050600060018360000151516110f59190612ba2565b67ffffffffffffffff81111561110e5761110d612e88565b5b60405190808252806020026020018201604052801561114757816020015b61113461163d565b81526020019060019003908161112c5790505b50905060005b81518110156111a6578360000151818151811061116d5761116c612e59565b5b602002602001015182828151811061118857611187612e59565b5b6020026020010181905250808061119e90612d1e565b91505061114d565b5080836000018190525050919050565b60008082905060006111c986868461149f565b80935081925050508060001b925050935093915050565b6111e861162a565b600082905060006111fa868684611509565b809350819250505060008160ff1667ffffffffffffffff81111561122157611220612e88565b5b60405190808252806020026020018201604052801561124f5781602001602082028036833780820191505090505b50905060005b8260ff168160ff1610156112a75761126e8888866111b6565b838360ff168151811061128457611283612e59565b5b60200260200101819650828152505050808061129f90612d67565b915050611255565b5060405180602001604052808281525093505050935093915050565b600060018360000151516112d79190612a4e565b67ffffffffffffffff8111156112f0576112ef612e88565b5b60405190808252806020026020018201604052801561132957816020015b61131661163d565b81526020019060019003908161130e5790505b50905060005b83600001515181101561138c578360000151818151811061135357611352612e59565b5b602002602001015182828151811061136e5761136d612e59565b5b6020026020010181905250808061138490612d1e565b91505061132f565b508181846000015151815181106113a6576113a5612e59565b5b6020026020010181905250808360000181905250505050565b600082905060005b856000015151811015611496576000600186161415611430578282876000015183815181106113f9576113f8612e59565b5b602002602001015160405160200161141393929190612704565b60405160208183030381529060405280519060200120915061147c565b828660000151828151811061144857611447612e59565b5b60200260200101518360405160200161146393929190612704565b6040516020818303038152906040528051906020012091505b600185901c9450808061148e90612d1e565b9150506113c7565b50949350505050565b60008082905060005b602081101561150057600883901b92508585838181106114cb576114ca612e59565b5b9050013560f81c60f81b60f81c60ff168317925081806114ea90612d1e565b92505080806114f890612d1e565b9150506114a8565b50935093915050565b60008082905084848281811061152257611521612e59565b5b9050013560f81c60f81b60f81c9150808061153c90612d1e565b915050935093915050565b6040518061014001604052806000600381111561156757611566612e2a565b5b8152602001611574611669565b8152602001611581611669565b815260200161158e61168c565b815260200161159b6116af565b815260200160008019168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600080191681525090565b6040518060a00160405280600080191681526020016115f96116cc565b81526020016000801916815260200160008019168152602001600063ffffffff1681525090565b611628612eb7565b565b6040518060200160405280606081525090565b60405180604001604052806000600781111561165c5761165b612e2a565b5b8152602001600081525090565b604051806040016040528061167c6116f3565b8152602001600080191681525090565b604051806040016040528061169f611706565b8152602001600080191681525090565b604051806040016040528060608152602001600080191681525090565b6040518060400160405280600067ffffffffffffffff168152602001600080191681525090565b6040518060200160405280606081525090565b6040518060200160405280606081525090565b600061172c611727846128f8565b6128d3565b905080838252602082019050828560a086028201111561174f5761174e612eff565b5b60005b8581101561177f57816117658882611d77565b845260208401935060a08301925050600181019050611752565b5050509392505050565b600061179c61179784612924565b6128d3565b905080838252602082019050828560408602820111156117bf576117be612eff565b5b60005b858110156117ef57816117d58882611eb3565b8452602084019350604083019250506001810190506117c2565b5050509392505050565b600061180c61180784612950565b6128d3565b9050808382526020820190508285602086028201111561182f5761182e612eff565b5b60005b8581101561185f57816118458882611f2d565b845260208401935060208301925050600181019050611832565b5050509392505050565b600082601f83011261187e5761187d612eeb565b5b813561188e848260208601611719565b91505092915050565b600082601f8301126118ac576118ab612eeb565b5b81356118bc848260208601611789565b91505092915050565b600082601f8301126118da576118d9612eeb565b5b81356118ea8482602086016117f9565b91505092915050565b6000813590506119028161310a565b92915050565b60008083601f84011261191e5761191d612eeb565b5b8235905067ffffffffffffffff81111561193b5761193a612ee6565b5b60208301915083600182028301111561195757611956612eff565b5b9250929050565b60008135905061196d81613121565b92915050565b60008135905061198281613131565b92915050565b60006020828403121561199e5761199d612ef0565b5b81905092915050565b6000604082840312156119bd576119bc612ef0565b5b81905092915050565b600061014082840312156119dd576119dc612ef0565b5b81905092915050565b600061014082840312156119fd576119fc612ef5565b5b611a086101406128d3565b90506000611a188482850161195e565b600083015250602082013567ffffffffffffffff811115611a3c57611a3b612efa565b5b611a4884828501611e47565b602083015250604082013567ffffffffffffffff811115611a6c57611a6b612efa565b5b611a7884828501611e47565b604083015250606082013567ffffffffffffffff811115611a9c57611a9b612efa565b5b611aa884828501611c9f565b606083015250608082013567ffffffffffffffff811115611acc57611acb612efa565b5b611ad884828501611d0b565b60808301525060a0611aec848285016118f3565b60a08301525060c0611b0084828501611f2d565b60c08301525060e0611b1484828501611f2d565b60e083015250610100611b2984828501611f2d565b61010083015250610120611b3f848285016118f3565b6101208301525092915050565b600060408284031215611b6257611b61612ef5565b5b611b6c60406128d3565b90506000611b7c84828501611f42565b6000830152506020611b90848285016118f3565b60208301525092915050565b600060c08284031215611bb257611bb1612ef0565b5b81905092915050565b600060c08284031215611bd157611bd0612ef5565b5b611bdb60a06128d3565b90506000611beb848285016118f3565b6000830152506020611bff84828501611b4c565b6020830152506060611c13848285016118f3565b6040830152506080611c27848285016118f3565b60608301525060a0611c3b84828501611f2d565b60808301525092915050565b600060208284031215611c5d57611c5c612ef5565b5b611c6760206128d3565b9050600082013567ffffffffffffffff811115611c8757611c86612efa565b5b611c93848285016118c5565b60008301525092915050565b600060408284031215611cb557611cb4612ef5565b5b611cbf60406128d3565b9050600082013567ffffffffffffffff811115611cdf57611cde612efa565b5b611ceb84828501611c47565b6000830152506020611cff848285016118f3565b60208301525092915050565b600060408284031215611d2157611d20612ef5565b5b611d2b60406128d3565b9050600082013567ffffffffffffffff811115611d4b57611d4a612efa565b5b611d5784828501611869565b6000830152506020611d6b848285016118f3565b60208301525092915050565b600060a08284031215611d8d57611d8c612ef5565b5b611d9760806128d3565b90506000611da784828501611eb3565b6000830152506040611dbb848285016118f3565b6020830152506060611dcf84828501611f2d565b6040830152506080611de384828501611f2d565b60608301525092915050565b600060208284031215611e0557611e04612ef5565b5b611e0f60206128d3565b9050600082013567ffffffffffffffff811115611e2f57611e2e612efa565b5b611e3b84828501611897565b60008301525092915050565b600060408284031215611e5d57611e5c612ef5565b5b611e6760406128d3565b9050600082013567ffffffffffffffff811115611e8757611e86612efa565b5b611e9384828501611def565b6000830152506020611ea7848285016118f3565b60208301525092915050565b600060408284031215611ec957611ec8612ef5565b5b611ed360406128d3565b90506000611ee384828501611973565b6000830152506020611ef784828501611f18565b60208301525092915050565b600081359050611f1281613141565b92915050565b600081359050611f2781613158565b92915050565b600081359050611f3c8161316f565b92915050565b600081359050611f5181613186565b92915050565b6000806000806000806101608789031215611f7557611f74612f09565b5b6000611f8389828a01611988565b965050602087013567ffffffffffffffff811115611fa457611fa3612f04565b5b611fb089828a016119c6565b9550506040611fc189828a01611b9c565b945050610100611fd389828a016119a7565b93505061014087013567ffffffffffffffff811115611ff557611ff4612f04565b5b61200189828a01611908565b92509250509295509295509295565b600060c0828403121561202657612025612f09565b5b600061203484828501611bbb565b91505092915050565b60006020828403121561205357612052612f09565b5b600061206184828501611f03565b91505092915050565b600061207683836125ec565b60a08301905092915050565b600061208e83836126a8565b60408301905092915050565b60006120a683836126e6565b60208301905092915050565b60006120bd826129ac565b6120c781856129ff565b93506120d28361297c565b8060005b838110156121035781516120ea888261206a565b97506120f5836129d8565b9250506001810190506120d6565b5085935050505092915050565b600061211b826129b7565b6121258185612a10565b93506121308361298c565b8060005b838110156121615781516121488882612082565b9750612153836129e5565b925050600181019050612134565b5085935050505092915050565b6000612179826129c2565b6121838185612a21565b935061218e8361299c565b8060005b838110156121bf5781516121a6888261209a565b97506121b1836129f2565b925050600181019050612192565b5085935050505092915050565b6121d581612c0a565b82525050565b6121ec6121e782612c0a565b612d91565b82525050565b6121fb81612c83565b82525050565b61220a81612c95565b82525050565b600061221b826129cd565b6122258185612a43565b9350612235818560208601612cba565b80840191505092915050565b600061224e601583612a32565b915061225982612f1f565b602082019050919050565b6000612271600e83612a32565b915061227c82612f48565b602082019050919050565b6000612294600c83612a43565b915061229f82612f71565b600c82019050919050565b60006122b7601583612a32565b91506122c282612f9a565b602082019050919050565b60006122da601a83612a32565b91506122e582612fc3565b602082019050919050565b60006122fd601683612a32565b915061230882612fec565b602082019050919050565b6000612320600783612a32565b915061232b82613015565b602082019050919050565b6000612343601583612a32565b915061234e8261303e565b602082019050919050565b6000612366600e83612a32565b915061237182613067565b602082019050919050565b6000612389600783612a32565b915061239482613090565b602082019050919050565b60006123ac601b83612a32565b91506123b7826130b9565b602082019050919050565b6000610140830160008301516123db60008601826121f2565b50602083015184820360208601526123f3828261266b565b9150506040830151848203604086015261240d828261266b565b915050606083015184820360608601526124278282612572565b9150506080830151848203608086015261244182826125af565b91505060a083015161245660a08601826121cc565b5060c083015161246960c08601826126e6565b5060e083015161247c60e08601826126e6565b506101008301516124916101008601826126e6565b506101208301516124a66101208601826121cc565b508091505092915050565b6040820160008201516124c760008501826126f5565b5060208201516124da60208501826121cc565b50505050565b60c0820160008201516124f660008501826121cc565b50602082015161250960208501826124b1565b50604082015161251c60608501826121cc565b50606082015161252f60808501826121cc565b50608082015161254260a08501826126e6565b50505050565b60006020830160008301518482036000860152612565828261216e565b9150508091505092915050565b6000604083016000830151848203600086015261258f8282612548565b91505060208301516125a460208601826121cc565b508091505092915050565b600060408301600083015184820360008601526125cc82826120b2565b91505060208301516125e160208601826121cc565b508091505092915050565b60a08201600082015161260260008501826126a8565b50602082015161261560408501826121cc565b50604082015161262860608501826126e6565b50606082015161263b60808501826126e6565b50505050565b6000602083016000830151848203600086015261265e8282612110565b9150508091505092915050565b600060408301600083015184820360008601526126888282612641565b915050602083015161269d60208601826121cc565b508091505092915050565b6040820160008201516126be6000850182612201565b5060208201516126d160208501826126d7565b50505050565b6126e081612c48565b82525050565b6126ef81612c52565b82525050565b6126fe81612c62565b82525050565b60006127108286612210565b915061271c82856121db565b60208201915061272c82846121db565b602082019150819050949350505050565b600061274882612287565b915061275482846121db565b60208201915081905092915050565b6000602082019050818103600083015261277c81612241565b9050919050565b6000602082019050818103600083015261279c81612264565b9050919050565b600060208201905081810360008301526127bc816122aa565b9050919050565b600060208201905081810360008301526127dc816122cd565b9050919050565b600060208201905081810360008301526127fc816122f0565b9050919050565b6000602082019050818103600083015261281c81612313565b9050919050565b6000602082019050818103600083015261283c81612336565b9050919050565b6000602082019050818103600083015261285c81612359565b9050919050565b6000602082019050818103600083015261287c8161237c565b9050919050565b6000602082019050818103600083015261289c8161239f565b9050919050565b600060e08201905081810360008301526128bd81856123c2565b90506128cc60208301846124e0565b9392505050565b60006128dd6128ee565b90506128e98282612ced565b919050565b6000604051905090565b600067ffffffffffffffff82111561291357612912612e88565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561293f5761293e612e88565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561296b5761296a612e88565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612a5982612c48565b9150612a6483612c48565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612a9957612a98612dcc565b5b828201905092915050565b6000612aaf82612c48565b9150612aba83612c48565b925082612aca57612ac9612dfb565b5b828204905092915050565b6000612ae082612c62565b9150612aeb83612c62565b925082612afb57612afa612dfb565b5b828204905092915050565b6000612b1182612c48565b9150612b1c83612c48565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612b5557612b54612dcc565b5b828202905092915050565b6000612b6b82612c62565b9150612b7683612c62565b92508167ffffffffffffffff0483118215151615612b9757612b96612dcc565b5b828202905092915050565b6000612bad82612c48565b9150612bb883612c48565b925082821015612bcb57612bca612dcc565b5b828203905092915050565b6000612be182612c62565b9150612bec83612c62565b925082821015612bff57612bfe612dcc565b5b828203905092915050565b6000819050919050565b6000819050612c22826130e2565b919050565b6000819050612c35826130f6565b919050565b600061ffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b6000612c8e82612c14565b9050919050565b6000612ca082612c27565b9050919050565b6000612cb336836119e6565b9050919050565b60005b83811015612cd8578082015181840152602081019050612cbd565b83811115612ce7576000848401525b50505050565b612cf682612f0e565b810181811067ffffffffffffffff82111715612d1557612d14612e88565b5b80604052505050565b6000612d2982612c48565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d5c57612d5b612dcc565b5b600182019050919050565b6000612d7282612c76565b915060ff821415612d8657612d85612dcc565b5b600182019050919050565b6000819050919050565b6000612da682612c48565b9150612db183612c48565b925082612dc157612dc0612dfb565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f494e56414c49445f4d454d4f52595f4f50434f44450000000000000000000000600082015250565b7f4241445f53544f52455f54595045000000000000000000000000000000000000600082015250565b7f4d656d6f7279206c6561663a0000000000000000000000000000000000000000600082015250565b7f4241445f524541445f42595445535f5349474e45440000000000000000000000600082015250565b7f494e56414c49445f4d454d4f52595f4c4f41445f4f50434f4445000000000000600082015250565b7f4241445f50554c4c5f4c4541465f425954455f49445800000000000000000000600082015250565b7f4241445f49333200000000000000000000000000000000000000000000000000600082015250565b7f4241445f5345545f4c4541465f425954455f4944580000000000000000000000600082015250565b7f57524f4e475f4d454d5f524f4f54000000000000000000000000000000000000600082015250565b7f4e4f545f49333200000000000000000000000000000000000000000000000000600082015250565b7f494e56414c49445f4d454d4f52595f53544f52455f4f50434f44450000000000600082015250565b600481106130f3576130f2612e2a565b5b50565b6008811061310757613106612e2a565b5b50565b61311381612c0a565b811461311e57600080fd5b50565b6004811061312e57600080fd5b50565b6008811061313e57600080fd5b50565b61314a81612c3a565b811461315557600080fd5b50565b61316181612c48565b811461316c57600080fd5b50565b61317881612c52565b811461318357600080fd5b50565b61318f81612c62565b811461319a57600080fd5b5056fea264697066735822122007eac38d6c6157857b89a13039c1d6922ba160890775e24ba5438f731f470e3164736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c4017b3814610030575b600080fd5b61004a60048036038101906100459190611f57565b610061565b6040516100589291906128a3565b60405180910390f35b610069611547565b6100716115dc565b8661007b90612ca7565b91508580360381019061008e9190612010565b905060008560000160208101906100a5919061203d565b9050611620602861ffff168261ffff16101580156100cc5750603561ffff168261ffff1611155b156100db5761019e9050610180565b603661ffff168261ffff16101580156100fd5750603e61ffff168261ffff1611155b1561010c576107f1905061017f565b603f61ffff168261ffff16141561012757610c43905061017e565b604061ffff168261ffff16141561014257610c7c905061017d565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017490612763565b60405180910390fd5b5b5b5b61019184848989898663ffffffff16565b5050965096945050505050565b6000806000602861ffff168660000160208101906101bc919061203d565b61ffff1614156101d7576000925060049150600090506104c3565b602961ffff168660000160208101906101f0919061203d565b61ffff16141561020b576001925060089150600090506104c2565b602a61ffff16866000016020810190610224919061203d565b61ffff16141561023f576002925060049150600090506104c1565b602b61ffff16866000016020810190610258919061203d565b61ffff161415610273576003925060089150600090506104c0565b602c61ffff1686600001602081019061028c919061203d565b61ffff1614156102a7576000925060019150600190506104bf565b602d61ffff168660000160208101906102c0919061203d565b61ffff1614156102db576000925060019150600090506104be565b602e61ffff168660000160208101906102f4919061203d565b61ffff16141561030f576000925060029150600190506104bd565b602f61ffff16866000016020810190610328919061203d565b61ffff161415610343576000925060029150600090506104bc565b603061ffff1686600001602081019061035c919061203d565b61ffff161415610377576001925060019150600190506104bb565b603161ffff16866000016020810190610390919061203d565b61ffff1614156103ab576001925060019150600090506104ba565b603261ffff168660000160208101906103c4919061203d565b61ffff1614156103df576001925060029150600190506104b9565b603361ffff168660000160208101906103f8919061203d565b61ffff161415610413576001925060029150600090506104b8565b603461ffff1686600001602081019061042c919061203d565b61ffff161415610447576001925060049150600190506104b7565b603561ffff16866000016020810190610460919061203d565b61ffff16141561047b576001925060049150600090506104b6565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ad906127c3565b60405180910390fd5b5b5b5b5b5b5b5b5b5b5b5b5b5b60006104d28960200151610d53565b6020015187602001356104e59190612a4e565b905087602001516000015167ffffffffffffffff1683826105069190612a4e565b11156105465760028960000190600381111561052557610524612e2a565b5b9081600381111561053957610538612e2a565b5b81525050505050506107ea565b6000808019905060008060005b878110156105fc57600081876105699190612a4e565b9050600060208261057a9190612aa4565b90508581146105a1576105948f60200151828f8f8b610d6f565b5080985081965050508095505b60006020836105b09190612d9b565b90506008846105bf9190612b06565b67ffffffffffffffff166105d38783610e04565b60ff1667ffffffffffffffff16901b8517945050505080806105f490612d1e565b915050610553565b5085156107a35760018714801561063757506000600781111561062257610621612e2a565b5b88600781111561063557610634612e2a565b5b145b1561064d578060000b63ffffffff1690506107a2565b60018714801561068157506001600781111561066c5761066b612e2a565b5b88600781111561067f5761067e612e2a565b5b145b15610691578060000b90506107a1565b6002871480156106c55750600060078111156106b0576106af612e2a565b5b8860078111156106c3576106c2612e2a565b5b145b156106db578060010b63ffffffff1690506107a0565b60028714801561070f5750600160078111156106fa576106f9612e2a565b5b88600781111561070d5761070c612e2a565b5b145b1561071f578060010b905061079f565b60048714801561075357506001600781111561073e5761073d612e2a565b5b88600781111561075157610750612e2a565b5b145b15610763578060030b905061079e565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610795906127a3565b60405180910390fd5b5b5b5b5b5b6107e18d6020015160405180604001604052808b60078111156107c9576107c8612e2a565b5b81526020018467ffffffffffffffff16815250610e82565b50505050505050505b5050505050565b6000806000603661ffff1686600001602081019061080f919061203d565b61ffff1614156108265760009050600492506109e9565b603761ffff1686600001602081019061083f919061203d565b61ffff1614156108565760019050600892506109e8565b603861ffff1686600001602081019061086f919061203d565b61ffff1614156108865760029050600492506109e7565b603961ffff1686600001602081019061089f919061203d565b61ffff1614156108b65760039050600892506109e6565b603a61ffff168660000160208101906108cf919061203d565b61ffff1614156108e65760009050600192506109e5565b603b61ffff168660000160208101906108ff919061203d565b61ffff1614156109165760009050600292506109e4565b603c61ffff1686600001602081019061092f919061203d565b61ffff1614156109465760019050600192506109e3565b603d61ffff1686600001602081019061095f919061203d565b61ffff1614156109765760019050600292506109e2565b603e61ffff1686600001602081019061098f919061203d565b61ffff1614156109a65760019050600492506109e1565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d890612883565b60405180910390fd5b5b5b5b5b5b5b5b5b60006109f88960200151610d53565b9050816007811115610a0d57610a0c612e2a565b5b81600001516007811115610a2457610a23612e2a565b5b14610a64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5b90612783565b60405180910390fd5b8060200151925060088467ffffffffffffffff161015610ab4576001600885610a8d9190612b60565b67ffffffffffffffff16600167ffffffffffffffff16901b610aaf9190612bd6565b831692505b50506000610ac58860200151610d53565b602001518660200135610ad89190612a4e565b905086602001516000015167ffffffffffffffff168367ffffffffffffffff1682610b039190612a4e565b1115610b4257600288600001906003811115610b2257610b21612e2a565b5b90816003811115610b3657610b35612e2a565b5b81525050505050610c3c565b60008080199050610b5161162a565b600080600090505b8767ffffffffffffffff16811015610c1b5760008187610b799190612a4e565b90506000602082610b8a9190612aa4565b9050858114610bd6576000198614610bb557610ba7858786610e94565b8e6020015160200181815250505b610bc68e60200151828e8e8b610d6f565b8097508199508296505050508095505b6000602083610be59190612d9b565b9050610bf285828c610f0b565b945060088a67ffffffffffffffff16901c99505050508080610c1390612d1e565b915050610b59565b50610c27828483610e94565b8b602001516020018181525050505050505050505b5050505050565b600062010000856020015160000151610c5c9190612ad5565b9050610c748660200151610c6f83610fa5565b610e82565b505050505050565b600062010000856020015160000151610c959190612ad5565b90506000610cae610ca98860200151610d53565b610fe2565b905060006201000067ffffffffffffffff168263ffffffff168463ffffffff16610cd89190612a4e565b610ce29190612b06565b9050640100000000811015610d30578087602001516000019067ffffffffffffffff16908167ffffffffffffffff1681525050610d2b8860200151610d2685610fa5565b610e82565b610d49565b610d488860200151610d43600019610fa5565b610e82565b5b5050505050505050565b610d5b61163d565b610d6882600001516110a7565b9050919050565b600080610d7a61162a565b839150610d888686846111b6565b8093508194505050610d9b8686846111e0565b80935081925050506000610db0828986610e94565b905088602001518114610df8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610def90612843565b60405180910390fd5b50955095509592505050565b600060208210610e49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e40906127e3565b60405180910390fd5b600060088360016020610e5c9190612ba2565b610e669190612ba2565b610e709190612b06565b9050808460001c901c91505092915050565b610e908260000151826112c3565b5050565b60008082604051602001610ea8919061273d565b604051602081830303815290604052805190602001209050610f018585836040518060400160405280601381526020017f4d656d6f7279206d65726b6c6520747265653a000000000000000000000000008152506113bf565b9150509392505050565b600060208310610f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4790612823565b60405180910390fd5b600060088460016020610f639190612ba2565b610f6d9190612ba2565b610f779190612b06565b905060008560001c90508160ff901b1981169050818460ff16901b811790508060001b925050509392505050565b610fad61163d565b604051806040016040528060006007811115610fcc57610fcb612e2a565b5b81526020018363ffffffff168152509050919050565b600080826020015190506000600781111561100057610fff612e2a565b5b8360000151600781111561101757611016612e2a565b5b14611057576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104e90612863565b60405180910390fd5b640100000000811061109e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109590612803565b60405180910390fd5b80915050919050565b6110af61163d565b816000015160018360000151516110c69190612ba2565b815181106110d7576110d6612e59565b5b60200260200101519050600060018360000151516110f59190612ba2565b67ffffffffffffffff81111561110e5761110d612e88565b5b60405190808252806020026020018201604052801561114757816020015b61113461163d565b81526020019060019003908161112c5790505b50905060005b81518110156111a6578360000151818151811061116d5761116c612e59565b5b602002602001015182828151811061118857611187612e59565b5b6020026020010181905250808061119e90612d1e565b91505061114d565b5080836000018190525050919050565b60008082905060006111c986868461149f565b80935081925050508060001b925050935093915050565b6111e861162a565b600082905060006111fa868684611509565b809350819250505060008160ff1667ffffffffffffffff81111561122157611220612e88565b5b60405190808252806020026020018201604052801561124f5781602001602082028036833780820191505090505b50905060005b8260ff168160ff1610156112a75761126e8888866111b6565b838360ff168151811061128457611283612e59565b5b60200260200101819650828152505050808061129f90612d67565b915050611255565b5060405180602001604052808281525093505050935093915050565b600060018360000151516112d79190612a4e565b67ffffffffffffffff8111156112f0576112ef612e88565b5b60405190808252806020026020018201604052801561132957816020015b61131661163d565b81526020019060019003908161130e5790505b50905060005b83600001515181101561138c578360000151818151811061135357611352612e59565b5b602002602001015182828151811061136e5761136d612e59565b5b6020026020010181905250808061138490612d1e565b91505061132f565b508181846000015151815181106113a6576113a5612e59565b5b6020026020010181905250808360000181905250505050565b600082905060005b856000015151811015611496576000600186161415611430578282876000015183815181106113f9576113f8612e59565b5b602002602001015160405160200161141393929190612704565b60405160208183030381529060405280519060200120915061147c565b828660000151828151811061144857611447612e59565b5b60200260200101518360405160200161146393929190612704565b6040516020818303038152906040528051906020012091505b600185901c9450808061148e90612d1e565b9150506113c7565b50949350505050565b60008082905060005b602081101561150057600883901b92508585838181106114cb576114ca612e59565b5b9050013560f81c60f81b60f81c60ff168317925081806114ea90612d1e565b92505080806114f890612d1e565b9150506114a8565b50935093915050565b60008082905084848281811061152257611521612e59565b5b9050013560f81c60f81b60f81c9150808061153c90612d1e565b915050935093915050565b6040518061014001604052806000600381111561156757611566612e2a565b5b8152602001611574611669565b8152602001611581611669565b815260200161158e61168c565b815260200161159b6116af565b815260200160008019168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600080191681525090565b6040518060a00160405280600080191681526020016115f96116cc565b81526020016000801916815260200160008019168152602001600063ffffffff1681525090565b611628612eb7565b565b6040518060200160405280606081525090565b60405180604001604052806000600781111561165c5761165b612e2a565b5b8152602001600081525090565b604051806040016040528061167c6116f3565b8152602001600080191681525090565b604051806040016040528061169f611706565b8152602001600080191681525090565b604051806040016040528060608152602001600080191681525090565b6040518060400160405280600067ffffffffffffffff168152602001600080191681525090565b6040518060200160405280606081525090565b6040518060200160405280606081525090565b600061172c611727846128f8565b6128d3565b905080838252602082019050828560a086028201111561174f5761174e612eff565b5b60005b8581101561177f57816117658882611d77565b845260208401935060a08301925050600181019050611752565b5050509392505050565b600061179c61179784612924565b6128d3565b905080838252602082019050828560408602820111156117bf576117be612eff565b5b60005b858110156117ef57816117d58882611eb3565b8452602084019350604083019250506001810190506117c2565b5050509392505050565b600061180c61180784612950565b6128d3565b9050808382526020820190508285602086028201111561182f5761182e612eff565b5b60005b8581101561185f57816118458882611f2d565b845260208401935060208301925050600181019050611832565b5050509392505050565b600082601f83011261187e5761187d612eeb565b5b813561188e848260208601611719565b91505092915050565b600082601f8301126118ac576118ab612eeb565b5b81356118bc848260208601611789565b91505092915050565b600082601f8301126118da576118d9612eeb565b5b81356118ea8482602086016117f9565b91505092915050565b6000813590506119028161310a565b92915050565b60008083601f84011261191e5761191d612eeb565b5b8235905067ffffffffffffffff81111561193b5761193a612ee6565b5b60208301915083600182028301111561195757611956612eff565b5b9250929050565b60008135905061196d81613121565b92915050565b60008135905061198281613131565b92915050565b60006020828403121561199e5761199d612ef0565b5b81905092915050565b6000604082840312156119bd576119bc612ef0565b5b81905092915050565b600061014082840312156119dd576119dc612ef0565b5b81905092915050565b600061014082840312156119fd576119fc612ef5565b5b611a086101406128d3565b90506000611a188482850161195e565b600083015250602082013567ffffffffffffffff811115611a3c57611a3b612efa565b5b611a4884828501611e47565b602083015250604082013567ffffffffffffffff811115611a6c57611a6b612efa565b5b611a7884828501611e47565b604083015250606082013567ffffffffffffffff811115611a9c57611a9b612efa565b5b611aa884828501611c9f565b606083015250608082013567ffffffffffffffff811115611acc57611acb612efa565b5b611ad884828501611d0b565b60808301525060a0611aec848285016118f3565b60a08301525060c0611b0084828501611f2d565b60c08301525060e0611b1484828501611f2d565b60e083015250610100611b2984828501611f2d565b61010083015250610120611b3f848285016118f3565b6101208301525092915050565b600060408284031215611b6257611b61612ef5565b5b611b6c60406128d3565b90506000611b7c84828501611f42565b6000830152506020611b90848285016118f3565b60208301525092915050565b600060c08284031215611bb257611bb1612ef0565b5b81905092915050565b600060c08284031215611bd157611bd0612ef5565b5b611bdb60a06128d3565b90506000611beb848285016118f3565b6000830152506020611bff84828501611b4c565b6020830152506060611c13848285016118f3565b6040830152506080611c27848285016118f3565b60608301525060a0611c3b84828501611f2d565b60808301525092915050565b600060208284031215611c5d57611c5c612ef5565b5b611c6760206128d3565b9050600082013567ffffffffffffffff811115611c8757611c86612efa565b5b611c93848285016118c5565b60008301525092915050565b600060408284031215611cb557611cb4612ef5565b5b611cbf60406128d3565b9050600082013567ffffffffffffffff811115611cdf57611cde612efa565b5b611ceb84828501611c47565b6000830152506020611cff848285016118f3565b60208301525092915050565b600060408284031215611d2157611d20612ef5565b5b611d2b60406128d3565b9050600082013567ffffffffffffffff811115611d4b57611d4a612efa565b5b611d5784828501611869565b6000830152506020611d6b848285016118f3565b60208301525092915050565b600060a08284031215611d8d57611d8c612ef5565b5b611d9760806128d3565b90506000611da784828501611eb3565b6000830152506040611dbb848285016118f3565b6020830152506060611dcf84828501611f2d565b6040830152506080611de384828501611f2d565b60608301525092915050565b600060208284031215611e0557611e04612ef5565b5b611e0f60206128d3565b9050600082013567ffffffffffffffff811115611e2f57611e2e612efa565b5b611e3b84828501611897565b60008301525092915050565b600060408284031215611e5d57611e5c612ef5565b5b611e6760406128d3565b9050600082013567ffffffffffffffff811115611e8757611e86612efa565b5b611e9384828501611def565b6000830152506020611ea7848285016118f3565b60208301525092915050565b600060408284031215611ec957611ec8612ef5565b5b611ed360406128d3565b90506000611ee384828501611973565b6000830152506020611ef784828501611f18565b60208301525092915050565b600081359050611f1281613141565b92915050565b600081359050611f2781613158565b92915050565b600081359050611f3c8161316f565b92915050565b600081359050611f5181613186565b92915050565b6000806000806000806101608789031215611f7557611f74612f09565b5b6000611f8389828a01611988565b965050602087013567ffffffffffffffff811115611fa457611fa3612f04565b5b611fb089828a016119c6565b9550506040611fc189828a01611b9c565b945050610100611fd389828a016119a7565b93505061014087013567ffffffffffffffff811115611ff557611ff4612f04565b5b61200189828a01611908565b92509250509295509295509295565b600060c0828403121561202657612025612f09565b5b600061203484828501611bbb565b91505092915050565b60006020828403121561205357612052612f09565b5b600061206184828501611f03565b91505092915050565b600061207683836125ec565b60a08301905092915050565b600061208e83836126a8565b60408301905092915050565b60006120a683836126e6565b60208301905092915050565b60006120bd826129ac565b6120c781856129ff565b93506120d28361297c565b8060005b838110156121035781516120ea888261206a565b97506120f5836129d8565b9250506001810190506120d6565b5085935050505092915050565b600061211b826129b7565b6121258185612a10565b93506121308361298c565b8060005b838110156121615781516121488882612082565b9750612153836129e5565b925050600181019050612134565b5085935050505092915050565b6000612179826129c2565b6121838185612a21565b935061218e8361299c565b8060005b838110156121bf5781516121a6888261209a565b97506121b1836129f2565b925050600181019050612192565b5085935050505092915050565b6121d581612c0a565b82525050565b6121ec6121e782612c0a565b612d91565b82525050565b6121fb81612c83565b82525050565b61220a81612c95565b82525050565b600061221b826129cd565b6122258185612a43565b9350612235818560208601612cba565b80840191505092915050565b600061224e601583612a32565b915061225982612f1f565b602082019050919050565b6000612271600e83612a32565b915061227c82612f48565b602082019050919050565b6000612294600c83612a43565b915061229f82612f71565b600c82019050919050565b60006122b7601583612a32565b91506122c282612f9a565b602082019050919050565b60006122da601a83612a32565b91506122e582612fc3565b602082019050919050565b60006122fd601683612a32565b915061230882612fec565b602082019050919050565b6000612320600783612a32565b915061232b82613015565b602082019050919050565b6000612343601583612a32565b915061234e8261303e565b602082019050919050565b6000612366600e83612a32565b915061237182613067565b602082019050919050565b6000612389600783612a32565b915061239482613090565b602082019050919050565b60006123ac601b83612a32565b91506123b7826130b9565b602082019050919050565b6000610140830160008301516123db60008601826121f2565b50602083015184820360208601526123f3828261266b565b9150506040830151848203604086015261240d828261266b565b915050606083015184820360608601526124278282612572565b9150506080830151848203608086015261244182826125af565b91505060a083015161245660a08601826121cc565b5060c083015161246960c08601826126e6565b5060e083015161247c60e08601826126e6565b506101008301516124916101008601826126e6565b506101208301516124a66101208601826121cc565b508091505092915050565b6040820160008201516124c760008501826126f5565b5060208201516124da60208501826121cc565b50505050565b60c0820160008201516124f660008501826121cc565b50602082015161250960208501826124b1565b50604082015161251c60608501826121cc565b50606082015161252f60808501826121cc565b50608082015161254260a08501826126e6565b50505050565b60006020830160008301518482036000860152612565828261216e565b9150508091505092915050565b6000604083016000830151848203600086015261258f8282612548565b91505060208301516125a460208601826121cc565b508091505092915050565b600060408301600083015184820360008601526125cc82826120b2565b91505060208301516125e160208601826121cc565b508091505092915050565b60a08201600082015161260260008501826126a8565b50602082015161261560408501826121cc565b50604082015161262860608501826126e6565b50606082015161263b60808501826126e6565b50505050565b6000602083016000830151848203600086015261265e8282612110565b9150508091505092915050565b600060408301600083015184820360008601526126888282612641565b915050602083015161269d60208601826121cc565b508091505092915050565b6040820160008201516126be6000850182612201565b5060208201516126d160208501826126d7565b50505050565b6126e081612c48565b82525050565b6126ef81612c52565b82525050565b6126fe81612c62565b82525050565b60006127108286612210565b915061271c82856121db565b60208201915061272c82846121db565b602082019150819050949350505050565b600061274882612287565b915061275482846121db565b60208201915081905092915050565b6000602082019050818103600083015261277c81612241565b9050919050565b6000602082019050818103600083015261279c81612264565b9050919050565b600060208201905081810360008301526127bc816122aa565b9050919050565b600060208201905081810360008301526127dc816122cd565b9050919050565b600060208201905081810360008301526127fc816122f0565b9050919050565b6000602082019050818103600083015261281c81612313565b9050919050565b6000602082019050818103600083015261283c81612336565b9050919050565b6000602082019050818103600083015261285c81612359565b9050919050565b6000602082019050818103600083015261287c8161237c565b9050919050565b6000602082019050818103600083015261289c8161239f565b9050919050565b600060e08201905081810360008301526128bd81856123c2565b90506128cc60208301846124e0565b9392505050565b60006128dd6128ee565b90506128e98282612ced565b919050565b6000604051905090565b600067ffffffffffffffff82111561291357612912612e88565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561293f5761293e612e88565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561296b5761296a612e88565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612a5982612c48565b9150612a6483612c48565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612a9957612a98612dcc565b5b828201905092915050565b6000612aaf82612c48565b9150612aba83612c48565b925082612aca57612ac9612dfb565b5b828204905092915050565b6000612ae082612c62565b9150612aeb83612c62565b925082612afb57612afa612dfb565b5b828204905092915050565b6000612b1182612c48565b9150612b1c83612c48565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612b5557612b54612dcc565b5b828202905092915050565b6000612b6b82612c62565b9150612b7683612c62565b92508167ffffffffffffffff0483118215151615612b9757612b96612dcc565b5b828202905092915050565b6000612bad82612c48565b9150612bb883612c48565b925082821015612bcb57612bca612dcc565b5b828203905092915050565b6000612be182612c62565b9150612bec83612c62565b925082821015612bff57612bfe612dcc565b5b828203905092915050565b6000819050919050565b6000819050612c22826130e2565b919050565b6000819050612c35826130f6565b919050565b600061ffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b6000612c8e82612c14565b9050919050565b6000612ca082612c27565b9050919050565b6000612cb336836119e6565b9050919050565b60005b83811015612cd8578082015181840152602081019050612cbd565b83811115612ce7576000848401525b50505050565b612cf682612f0e565b810181811067ffffffffffffffff82111715612d1557612d14612e88565b5b80604052505050565b6000612d2982612c48565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d5c57612d5b612dcc565b5b600182019050919050565b6000612d7282612c76565b915060ff821415612d8657612d85612dcc565b5b600182019050919050565b6000819050919050565b6000612da682612c48565b9150612db183612c48565b925082612dc157612dc0612dfb565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f494e56414c49445f4d454d4f52595f4f50434f44450000000000000000000000600082015250565b7f4241445f53544f52455f54595045000000000000000000000000000000000000600082015250565b7f4d656d6f7279206c6561663a0000000000000000000000000000000000000000600082015250565b7f4241445f524541445f42595445535f5349474e45440000000000000000000000600082015250565b7f494e56414c49445f4d454d4f52595f4c4f41445f4f50434f4445000000000000600082015250565b7f4241445f50554c4c5f4c4541465f425954455f49445800000000000000000000600082015250565b7f4241445f49333200000000000000000000000000000000000000000000000000600082015250565b7f4241445f5345545f4c4541465f425954455f4944580000000000000000000000600082015250565b7f57524f4e475f4d454d5f524f4f54000000000000000000000000000000000000600082015250565b7f4e4f545f49333200000000000000000000000000000000000000000000000000600082015250565b7f494e56414c49445f4d454d4f52595f53544f52455f4f50434f44450000000000600082015250565b600481106130f3576130f2612e2a565b5b50565b6008811061310757613106612e2a565b5b50565b61311381612c0a565b811461311e57600080fd5b50565b6004811061312e57600080fd5b50565b6008811061313e57600080fd5b50565b61314a81612c3a565b811461315557600080fd5b50565b61316181612c48565b811461316c57600080fd5b50565b61317881612c52565b811461318357600080fd5b50565b61318f81612c62565b811461319a57600080fd5b5056fea264697066735822122007eac38d6c6157857b89a13039c1d6922ba160890775e24ba5438f731f470e3164736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}