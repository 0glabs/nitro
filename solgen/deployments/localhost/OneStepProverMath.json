{
  "address": "0x0775d400e352F7d1776738BC39078f5EdEbece58",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxInboxMessagesRead",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExecutionContext",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum MachineStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value[]",
                      "name": "inner",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct ValueArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ValueStack",
              "name": "valueStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value[]",
                      "name": "inner",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct ValueArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ValueStack",
              "name": "internalStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint32[]",
                      "name": "inner",
                      "type": "uint32[]"
                    }
                  ],
                  "internalType": "struct PcArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PcStack",
              "name": "blockStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value",
                      "name": "returnPc",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "localsMerkleRoot",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "callerModule",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "callerModuleInternals",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct StackFrame[]",
                  "name": "proved",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct StackFrameWindow",
              "name": "frameStack",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "globalStateHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "moduleIdx",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "functionIdx",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "functionPc",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "modulesRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Machine",
          "name": "startMach",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "globalsMerkleRoot",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "size",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ModuleMemory",
              "name": "moduleMemory",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "tablesMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "functionsMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "internalsOffset",
              "type": "uint32"
            }
          ],
          "internalType": "struct Module",
          "name": "startMod",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "opcode",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "argumentData",
              "type": "uint256"
            }
          ],
          "internalType": "struct Instruction",
          "name": "inst",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        }
      ],
      "name": "executeOneStep",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum MachineStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value[]",
                      "name": "inner",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct ValueArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ValueStack",
              "name": "valueStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value[]",
                      "name": "inner",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct ValueArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ValueStack",
              "name": "internalStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint32[]",
                      "name": "inner",
                      "type": "uint32[]"
                    }
                  ],
                  "internalType": "struct PcArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PcStack",
              "name": "blockStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value",
                      "name": "returnPc",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "localsMerkleRoot",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "callerModule",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "callerModuleInternals",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct StackFrame[]",
                  "name": "proved",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct StackFrameWindow",
              "name": "frameStack",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "globalStateHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "moduleIdx",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "functionIdx",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "functionPc",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "modulesRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Machine",
          "name": "mach",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "globalsMerkleRoot",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "size",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ModuleMemory",
              "name": "moduleMemory",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "tablesMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "functionsMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "internalsOffset",
              "type": "uint32"
            }
          ],
          "internalType": "struct Module",
          "name": "mod",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xece019178c315bfd6fb5c7b39fe5f96fd4ad9656b01e6129f04bd67421b2be43",
  "receipt": {
    "to": null,
    "from": "0xFF21a5fD9E13241c95033Fcbc501EeaDC3572771",
    "contractAddress": "0x0775d400e352F7d1776738BC39078f5EdEbece58",
    "transactionIndex": 0,
    "gasUsed": "3072017",
    "logsBloom": "0x
    "blockHash": "0xc1bffcd8a97ec8d3f073e753ced36c627dd3d1dd7a034411b485a3700689a250",
    "transactionHash": "0xece019178c315bfd6fb5c7b39fe5f96fd4ad9656b01e6129f04bd67421b2be43",
    "logs": [],
    "blockNumber": 62,
    "cumulativeGasUsed": "3072017",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e7611196dd0ae85361a704f7442944b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxInboxMessagesRead\",\"type\":\"uint256\"}],\"internalType\":\"struct ExecutionContext\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum MachineStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value[]\",\"name\":\"inner\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ValueArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValueStack\",\"name\":\"valueStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value[]\",\"name\":\"inner\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ValueArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValueStack\",\"name\":\"internalStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"inner\",\"type\":\"uint32[]\"}],\"internalType\":\"struct PcArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct PcStack\",\"name\":\"blockStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value\",\"name\":\"returnPc\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"localsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callerModule\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"callerModuleInternals\",\"type\":\"uint32\"}],\"internalType\":\"struct StackFrame[]\",\"name\":\"proved\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct StackFrameWindow\",\"name\":\"frameStack\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"globalStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"moduleIdx\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionIdx\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionPc\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"modulesRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Machine\",\"name\":\"startMach\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"globalsMerkleRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"size\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct ModuleMemory\",\"name\":\"moduleMemory\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"tablesMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"functionsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"internalsOffset\",\"type\":\"uint32\"}],\"internalType\":\"struct Module\",\"name\":\"startMod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"opcode\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"argumentData\",\"type\":\"uint256\"}],\"internalType\":\"struct Instruction\",\"name\":\"inst\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"executeOneStep\",\"outputs\":[{\"components\":[{\"internalType\":\"enum MachineStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value[]\",\"name\":\"inner\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ValueArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValueStack\",\"name\":\"valueStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value[]\",\"name\":\"inner\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ValueArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValueStack\",\"name\":\"internalStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"inner\",\"type\":\"uint32[]\"}],\"internalType\":\"struct PcArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct PcStack\",\"name\":\"blockStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value\",\"name\":\"returnPc\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"localsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callerModule\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"callerModuleInternals\",\"type\":\"uint32\"}],\"internalType\":\"struct StackFrame[]\",\"name\":\"proved\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct StackFrameWindow\",\"name\":\"frameStack\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"globalStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"moduleIdx\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionIdx\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionPc\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"modulesRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Machine\",\"name\":\"mach\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"globalsMerkleRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"size\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct ModuleMemory\",\"name\":\"moduleMemory\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"tablesMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"functionsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"internalsOffset\",\"type\":\"uint32\"}],\"internalType\":\"struct Module\",\"name\":\"mod\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/osp/OneStepProverMath.sol\":\"OneStepProverMath\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/osp/IOneStepProver.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../state/Machines.sol\\\";\\nimport \\\"../state/Modules.sol\\\";\\nimport \\\"../state/Instructions.sol\\\";\\n\\nstruct ExecutionContext {\\n    uint256 maxInboxMessagesRead;\\n}\\n\\nabstract contract IOneStepProver {\\n    function executeOneStep(\\n        ExecutionContext memory execCtx,\\n        Machine calldata mach,\\n        Module calldata mod,\\n        Instruction calldata instruction,\\n        bytes calldata proof\\n    )\\n        external\\n        view\\n        virtual\\n        returns (Machine memory result, Module memory resultMod);\\n}\\n\",\"keccak256\":\"0xf2a87c00ce591229417b9f094d817d3ae116a448e544a93473f99f692d04dfb0\",\"license\":\"UNLICENSED\"},\"src/osp/OneStepProverMath.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../state/Values.sol\\\";\\nimport \\\"../state/Machines.sol\\\";\\nimport \\\"../state/Modules.sol\\\";\\nimport \\\"../state/Deserialize.sol\\\";\\nimport \\\"./IOneStepProver.sol\\\";\\n\\ncontract OneStepProverMath is IOneStepProver {\\n\\tfunction executeEqz(Machine memory mach, Module memory, Instruction calldata, bytes calldata) internal pure {\\n\\t\\tValue memory v = ValueStacks.pop(mach.valueStack);\\n\\n\\t\\tuint32 output;\\n\\t\\tif (v.contents == 0) {\\n\\t\\t\\toutput = 1;\\n\\t\\t} else {\\n\\t\\t\\toutput = 0;\\n\\t\\t}\\n\\n\\t\\tValueStacks.push(mach.valueStack, Values.newI32(output));\\n\\t}\\n\\n\\tfunction signExtend(uint32 a) internal pure returns (uint64) {\\n\\t\\tif (a & (1<<31) != 0) {\\n\\t\\t\\treturn uint64(a) | uint64(0xffffffff00000000);\\n\\t\\t}\\n\\t\\treturn uint64(a);\\n\\t}\\n\\n\\tfunction I64RelOp(uint64 a, uint64 b, uint16 relop) internal pure returns (bool) {\\n\\t\\tif (relop == Instructions.IRELOP_EQ) {\\n\\t\\t\\treturn (a == b);\\n\\t\\t} else if (relop == Instructions.IRELOP_NE) {\\n\\t\\t\\treturn (a != b);\\n\\t\\t} else if (relop == Instructions.IRELOP_LT_S) {\\n\\t\\t\\treturn (int64(a) < int64(b));\\n\\t\\t} else if (relop == Instructions.IRELOP_LT_U) {\\n\\t\\t\\treturn (a < b);\\n\\t\\t} else if (relop == Instructions.IRELOP_GT_S) {\\n\\t\\t\\treturn (int64(a) > int64(b));\\n\\t\\t} else if (relop == Instructions.IRELOP_GT_U) {\\n\\t\\t\\treturn (a > b);\\n\\t\\t} else if (relop == Instructions.IRELOP_LE_S) {\\n\\t\\t\\treturn (int64(a) <= int64(b));\\n\\t\\t} else if (relop == Instructions.IRELOP_LE_U) {\\n\\t\\t\\treturn (a <= b);\\n\\t\\t} else if (relop == Instructions.IRELOP_GE_S) {\\n\\t\\t\\treturn (int64(a) >= int64(b));\\n\\t\\t} else if (relop == Instructions.IRELOP_GE_U) {\\n\\t\\t\\treturn (a >= b);\\n\\t\\t} else {\\n\\t\\t\\trevert (\\\"BAD IRELOP\\\");\\n\\t\\t}\\n\\t}\\n\\n\\tfunction executeI32RelOp(Machine memory mach, Module memory, Instruction calldata inst, bytes calldata) internal pure {\\n\\t\\tuint32 b = Values.assumeI32(ValueStacks.pop(mach.valueStack));\\n\\t\\tuint32 a = Values.assumeI32(ValueStacks.pop(mach.valueStack));\\n\\n\\t\\tuint16 relop = inst.opcode - Instructions.I32_RELOP_BASE;\\n\\t\\tuint64 a64;\\n\\t\\tuint64 b64;\\n\\n\\t\\tif (relop == Instructions.IRELOP_LT_S || relop == Instructions.IRELOP_GT_S ||\\n\\t\\t\\trelop == Instructions.IRELOP_LE_S || relop == Instructions.IRELOP_GE_S) {\\n\\t\\t\\ta64 = signExtend(a);\\n\\t\\t\\tb64 = signExtend(b);\\n\\t\\t} else {\\n\\t\\t\\ta64 = uint64(a);\\n\\t\\t\\tb64 = uint64(b);\\n\\t\\t}\\n\\n\\t\\tbool res = I64RelOp(a64, b64, relop);\\n\\n\\t\\tValueStacks.push(mach.valueStack, Values.newBoolean(res));\\n\\t}\\n\\n\\tfunction executeI64RelOp(Machine memory mach, Module memory, Instruction calldata inst, bytes calldata) internal pure {\\n\\t\\tuint64 b = Values.assumeI64(ValueStacks.pop(mach.valueStack));\\n\\t\\tuint64 a = Values.assumeI64(ValueStacks.pop(mach.valueStack));\\n\\n\\t\\tuint16 relop = inst.opcode - Instructions.I64_RELOP_BASE;\\n\\n\\t\\tbool res = I64RelOp(a, b, relop);\\n\\n\\t\\tValueStacks.push(mach.valueStack, Values.newBoolean(res));\\n\\t}\\n\\n\\n\\tfunction genericIUnOp(uint64 a, uint16 unop, uint16 bits) internal pure returns (uint32) {\\n\\t\\trequire(bits == 32 || bits == 64, \\\"WRONG USE OF genericUnOp\\\");\\n\\t\\tif (unop == Instructions.IUNOP_CLZ) {\\n\\t\\t\\t/* curbits is one-based to keep with unsigned mathematics */\\n\\t\\t\\tuint32 curbit = bits;\\n\\t\\t\\twhile (curbit > 0 && (a & (1 << (curbit - 1)) == 0)) {\\n\\t\\t\\t\\tcurbit -= 1;\\n\\t\\t\\t}\\n\\t\\t\\treturn (bits - curbit);\\n\\t\\t} else if (unop == Instructions.IUNOP_CTZ) {\\n\\t\\t\\tuint32 curbit = 0;\\n\\t\\t\\twhile (curbit < bits && ((a & (1 << curbit)) == 0)) {\\n\\t\\t\\t\\tcurbit += 1;\\n\\t\\t\\t}\\n\\t\\t\\treturn curbit;\\n\\t\\t} else if (unop == Instructions.IUNOP_POPCNT) {\\n\\t\\t\\tuint32 curbit = 0;\\n\\t\\t\\tuint32 res = 0;\\n\\t\\t\\twhile (curbit < bits) {\\n\\t\\t\\t\\tif ((a & (1 << curbit)) != 0) {\\n\\t\\t\\t\\t\\tres += 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcurbit++;\\n\\t\\t\\t}\\n\\t\\t\\treturn res;\\n\\t\\t}\\n\\t\\trevert(\\\"BAD IUnOp\\\");\\n\\t}\\n\\n\\tfunction executeI32UnOp(Machine memory mach, Module memory, Instruction calldata inst, bytes calldata) internal pure {\\n\\t\\tuint32 a = Values.assumeI32(ValueStacks.pop(mach.valueStack));\\n\\n\\t\\tuint16 unop = inst.opcode - Instructions.I32_UNOP_BASE;\\n\\n\\t\\tuint32 res = genericIUnOp(a, unop, 32);\\n\\n\\t\\tValueStacks.push(mach.valueStack, Values.newI32(res));\\n\\t}\\n\\n\\tfunction executeI64UnOp(Machine memory mach, Module memory, Instruction calldata inst, bytes calldata) internal pure {\\n\\t\\tuint64 a = Values.assumeI64(ValueStacks.pop(mach.valueStack));\\n\\n\\t\\tuint16 unop = inst.opcode - Instructions.I64_UNOP_BASE;\\n\\n\\t\\tuint64 res = uint64(genericIUnOp(a, unop, 64));\\n\\n\\t\\tValueStacks.push(mach.valueStack, Values.newI64(res));\\n\\t}\\n\\n\\tfunction rotl32(uint32 a, uint32 b) internal pure returns (uint32) {\\n\\t\\tb %= 32;\\n\\t\\treturn (a << b) | (a >> (32 - b));\\n\\t}\\n\\n\\tfunction rotl64(uint64 a, uint64 b) internal pure returns (uint64) {\\n\\t\\tb %= 64;\\n\\t\\treturn (a << b) | (a >> (64 - b));\\n\\t}\\n\\n\\tfunction rotr32(uint32 a, uint32 b) internal pure returns (uint32) {\\n\\t\\tb %= 32;\\n\\t\\treturn (a >> b) | (a << (32 - b));\\n\\t}\\n\\n\\tfunction rotr64(uint64 a, uint64 b) internal pure returns (uint64) {\\n\\t\\tb %= 64;\\n\\t\\treturn (a >> b) | (a << (64 - b));\\n\\t}\\n\\n\\tfunction genericBinOp(uint64 a, uint64 b, uint16 opcodeOffset) internal pure returns (uint64) {\\n\\t\\tunchecked {\\n\\t\\t\\tif (opcodeOffset == 0) {\\n\\t\\t\\t\\t// add\\n\\t\\t\\t\\treturn a + b;\\n\\t\\t\\t} else if (opcodeOffset == 1) {\\n\\t\\t\\t\\t// sub\\n\\t\\t\\t\\treturn a - b;\\n\\t\\t\\t} else if (opcodeOffset == 2) {\\n\\t\\t\\t\\t// mul\\n\\t\\t\\t\\treturn a * b;\\n\\t\\t\\t} else if (opcodeOffset == 4) {\\n\\t\\t\\t\\t// div_u\\n\\t\\t\\t\\tif (b == 0) {\\n\\t\\t\\t\\t\\treturn 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn a / b;\\n\\t\\t\\t} else if (opcodeOffset == 6) {\\n\\t\\t\\t\\t// rem_u\\n\\t\\t\\t\\tif (b == 0) {\\n\\t\\t\\t\\t\\treturn 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn a % b;\\n\\t\\t\\t} else if (opcodeOffset == 7) {\\n\\t\\t\\t\\t// and\\n\\t\\t\\t\\treturn a & b;\\n\\t\\t\\t} else if (opcodeOffset == 8) {\\n\\t\\t\\t\\t// or\\n\\t\\t\\t\\treturn a | b;\\n\\t\\t\\t} else if (opcodeOffset == 9) {\\n\\t\\t\\t\\t// xor\\n\\t\\t\\t\\treturn a ^ b;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(\\\"INVALID_GENERIC_BIN_OP\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction executeI32BinOp(Machine memory mach, Module memory, Instruction calldata inst, bytes calldata) internal pure {\\n\\t\\tuint32 b = Values.assumeI32(ValueStacks.pop(mach.valueStack));\\n\\t\\tuint32 a = Values.assumeI32(ValueStacks.pop(mach.valueStack));\\n\\t\\tuint32 res;\\n\\n\\t\\tuint16 opcodeOffset = inst.opcode - Instructions.I32_ADD;\\n\\n\\t\\tunchecked {\\n\\t\\t\\tif (opcodeOffset == 3) {\\n\\t\\t\\t\\t// div_s\\n\\t\\t\\t\\tif (b == 0) {\\n\\t\\t\\t\\t\\tres = 0;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tres = uint32(int32(a) / int32(b));\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (opcodeOffset == 5) {\\n\\t\\t\\t\\t// rem_s\\n\\t\\t\\t\\tif (b == 0) {\\n\\t\\t\\t\\t\\tres = 0;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tres = uint32(int32(a) % int32(b));\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (opcodeOffset == 10) {\\n\\t\\t\\t\\t// shl\\n\\t\\t\\t\\tres = a << (b % 32);\\n\\t\\t\\t} else if (opcodeOffset == 12) {\\n\\t\\t\\t\\t// shr_u\\n\\t\\t\\t\\tres = a >> (b % 32);\\n\\t\\t\\t} else if (opcodeOffset == 11) {\\n\\t\\t\\t\\t// shr_s\\n\\t\\t\\t\\tres = uint32(int32(a) >> b);\\n\\t\\t\\t} else if (opcodeOffset == 13) {\\n\\t\\t\\t\\t// rotl\\n\\t\\t\\t\\tres = rotl32(a, b);\\n\\t\\t\\t} else if (opcodeOffset == 14) {\\n\\t\\t\\t\\t// rotr\\n\\t\\t\\t\\tres = rotr32(a, b);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tres = uint32(genericBinOp(a, b, opcodeOffset));\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tValueStacks.push(mach.valueStack, Values.newI32(res));\\n\\t}\\n\\n\\tfunction executeI64BinOp(Machine memory mach, Module memory, Instruction calldata inst, bytes calldata) internal pure {\\n\\t\\tuint64 b = Values.assumeI64(ValueStacks.pop(mach.valueStack));\\n\\t\\tuint64 a = Values.assumeI64(ValueStacks.pop(mach.valueStack));\\n\\t\\tuint64 res;\\n\\n\\t\\tuint16 opcodeOffset = inst.opcode - Instructions.I64_ADD;\\n\\n\\t\\tunchecked {\\n\\t\\t\\tif (opcodeOffset == 3) {\\n\\t\\t\\t\\t// div_s\\n\\t\\t\\t\\tif (b == 0) {\\n\\t\\t\\t\\t\\tres = 0;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tres = uint64(int64(a) / int64(b));\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (opcodeOffset == 5) {\\n\\t\\t\\t\\t// rem_s\\n\\t\\t\\t\\tif (b == 0) {\\n\\t\\t\\t\\t\\tres = 0;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tres = uint64(int64(a) % int64(b));\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (opcodeOffset == 10) {\\n\\t\\t\\t\\t// shl\\n\\t\\t\\t\\tres = a << (b % 64);\\n\\t\\t\\t} else if (opcodeOffset == 12) {\\n\\t\\t\\t\\t// shr_u\\n\\t\\t\\t\\tres = a >> (b % 64);\\n\\t\\t\\t} else if (opcodeOffset == 11) {\\n\\t\\t\\t\\t// shr_s\\n\\t\\t\\t\\tres = uint64(int64(a) >> b);\\n\\t\\t\\t} else if (opcodeOffset == 13) {\\n\\t\\t\\t\\t// rotl\\n\\t\\t\\t\\tres = rotl64(a, b);\\n\\t\\t\\t} else if (opcodeOffset == 14) {\\n\\t\\t\\t\\t// rotr\\n\\t\\t\\t\\tres = rotr64(a, b);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tres = genericBinOp(a, b, opcodeOffset);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tValueStacks.push(mach.valueStack, Values.newI64(res));\\n\\t}\\n\\n\\tfunction executeI32WrapI64(Machine memory mach, Module memory, Instruction calldata, bytes calldata) internal pure {\\n\\t\\tuint64 a = Values.assumeI64(ValueStacks.pop(mach.valueStack));\\n\\n\\t\\tuint32 a32 = uint32(a);\\n\\n\\t\\tValueStacks.push(mach.valueStack, Values.newI32(a32));\\n\\t}\\n\\n\\tfunction executeI64ExtendI32(Machine memory mach, Module memory, Instruction calldata inst, bytes calldata) internal pure {\\n\\t\\tuint32 a = Values.assumeI32(ValueStacks.pop(mach.valueStack));\\n\\n\\t\\tuint64 a64;\\n\\n\\t\\tif (inst.opcode == Instructions.I64_EXTEND_I32_S) {\\n\\t\\t\\ta64 = signExtend(a);\\n\\t\\t} else {\\n\\t\\t\\ta64 = uint64(a);\\n\\t\\t}\\n\\n\\t\\tValueStacks.push(mach.valueStack, Values.newI64(a64));\\n\\t}\\n\\n\\tfunction executeExtendSameType(Machine memory mach, Module memory, Instruction calldata inst, bytes calldata) internal pure {\\n\\t\\tValueType ty;\\n\\t\\tuint8 sourceBits;\\n\\t\\tif (inst.opcode == Instructions.I32_EXTEND_8S) {\\n\\t\\t\\tty = ValueType.I32;\\n\\t\\t\\tsourceBits = 8;\\n\\t\\t} else if (inst.opcode == Instructions.I32_EXTEND_16S) {\\n\\t\\t\\tty = ValueType.I32;\\n\\t\\t\\tsourceBits = 16;\\n\\t\\t} else if (inst.opcode == Instructions.I64_EXTEND_8S) {\\n\\t\\t\\tty = ValueType.I64;\\n\\t\\t\\tsourceBits = 8;\\n\\t\\t} else if (inst.opcode == Instructions.I64_EXTEND_16S) {\\n\\t\\t\\tty = ValueType.I64;\\n\\t\\t\\tsourceBits = 16;\\n\\t\\t} else if (inst.opcode == Instructions.I64_EXTEND_32S) {\\n\\t\\t\\tty = ValueType.I64;\\n\\t\\t\\tsourceBits = 32;\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"INVALID_EXTEND_SAME_TYPE\\\");\\n\\t\\t}\\n\\t\\tuint256 resultMask;\\n\\t\\tif (ty == ValueType.I32) {\\n\\t\\t\\tresultMask = (1 << 32) - 1;\\n\\t\\t} else {\\n\\t\\t\\tresultMask = (1 << 64) - 1;\\n\\t\\t}\\n\\t\\tValue memory val = ValueStacks.pop(mach.valueStack);\\n\\t\\trequire(val.valueType == ty, \\\"BAD_EXTEND_SAME_TYPE_TYPE\\\");\\n\\t\\tuint256 sourceMask = (1 << sourceBits) - 1;\\n\\t\\tval.contents &= sourceMask;\\n\\t\\tif (val.contents & (1 << (sourceBits - 1)) != 0) {\\n\\t\\t\\t// Extend sign flag\\n\\t\\t\\tval.contents |= resultMask & ~sourceMask;\\n\\t\\t}\\n\\t\\tValueStacks.push(mach.valueStack, val);\\n\\t}\\n\\n\\tfunction executeReinterpret(Machine memory mach, Module memory, Instruction calldata inst, bytes calldata) internal pure {\\n\\t\\tValueType destTy;\\n\\t\\tValueType sourceTy;\\n\\t\\tif (inst.opcode == Instructions.I32_REINTERPRET_F32) {\\n\\t\\t\\tdestTy = ValueType.I32;\\n\\t\\t\\tsourceTy = ValueType.F32;\\n\\t\\t} else if (inst.opcode == Instructions.I64_REINTERPRET_F64) {\\n\\t\\t\\tdestTy = ValueType.I64;\\n\\t\\t\\tsourceTy = ValueType.F64;\\n\\t\\t} else if (inst.opcode == Instructions.F32_REINTERPRET_I32) {\\n\\t\\t\\tdestTy = ValueType.F32;\\n\\t\\t\\tsourceTy = ValueType.I32;\\n\\t\\t} else if (inst.opcode == Instructions.F64_REINTERPRET_I64) {\\n\\t\\t\\tdestTy = ValueType.F64;\\n\\t\\t\\tsourceTy = ValueType.I64;\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"INVALID_REINTERPRET\\\");\\n\\t\\t}\\n\\t\\tValue memory val = ValueStacks.pop(mach.valueStack);\\n\\t\\trequire(val.valueType == sourceTy, \\\"INVALID_REINTERPRET_TYPE\\\");\\n\\t\\tval.valueType = destTy;\\n\\t\\tValueStacks.push(mach.valueStack, val);\\n\\t}\\n\\n\\tfunction executeOneStep(ExecutionContext calldata, Machine calldata startMach, Module calldata startMod, Instruction calldata inst, bytes calldata proof) override pure external returns (Machine memory mach, Module memory mod) {\\n\\t\\tmach = startMach;\\n\\t\\tmod = startMod;\\n\\n\\t\\tuint16 opcode = inst.opcode;\\n\\n\\t\\tfunction(Machine memory, Module memory, Instruction calldata, bytes calldata) internal pure impl;\\n\\t\\tif (opcode == Instructions.I32_EQZ || opcode == Instructions.I64_EQZ) {\\n\\t\\t\\timpl = executeEqz;\\n\\t\\t} else if (opcode >= Instructions.I32_RELOP_BASE && opcode <= Instructions.I32_RELOP_BASE + Instructions.IRELOP_LAST) {\\n\\t\\t\\timpl = executeI32RelOp;\\n\\t\\t} else if (opcode >= Instructions.I32_UNOP_BASE && opcode <= Instructions.I32_UNOP_BASE + Instructions.IUNOP_LAST) {\\n\\t\\t\\timpl = executeI32UnOp;\\n\\t\\t} else if (opcode >= Instructions.I32_ADD && opcode <= Instructions.I32_ROTR) {\\n\\t\\t\\timpl = executeI32BinOp;\\n\\t\\t} else if (opcode >= Instructions.I64_RELOP_BASE && opcode <= Instructions.I64_RELOP_BASE + Instructions.IRELOP_LAST) {\\n\\t\\t\\timpl = executeI64RelOp;\\n\\t\\t} else if (opcode >= Instructions.I64_UNOP_BASE && opcode <= Instructions.I64_UNOP_BASE + Instructions.IUNOP_LAST) {\\n\\t\\t\\timpl = executeI64UnOp;\\n\\t\\t} else if (opcode >= Instructions.I64_ADD && opcode <= Instructions.I64_ROTR) {\\n\\t\\t\\timpl = executeI64BinOp;\\n\\t\\t} else if (opcode == Instructions.I32_WRAP_I64) {\\n\\t\\t\\timpl = executeI32WrapI64;\\n\\t\\t} else if (opcode == Instructions.I64_EXTEND_I32_S || opcode == Instructions.I64_EXTEND_I32_U) {\\n\\t\\t\\timpl = executeI64ExtendI32;\\n\\t\\t} else if (opcode >= Instructions.I32_EXTEND_8S && opcode <= Instructions.I64_EXTEND_32S) {\\n\\t\\t\\timpl = executeExtendSameType;\\n\\t\\t} else if (opcode >= Instructions.I32_REINTERPRET_F32 && opcode <= Instructions.F64_REINTERPRET_I64) {\\n\\t\\t\\timpl = executeReinterpret;\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"INVALID_OPCODE\\\");\\n\\t\\t}\\n\\n\\t\\timpl(mach, mod, inst, proof);\\n\\t}\\n}\\n\\n\",\"keccak256\":\"0xba8d7e2d1427f38b990ecdb6c6d83b79a3fa77b8807331cc23a32ff8b3eb85b0\",\"license\":\"UNLICENSED\"},\"src/state/Deserialize.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\nimport \\\"./ValueStacks.sol\\\";\\nimport \\\"./PcStacks.sol\\\";\\nimport \\\"./Machines.sol\\\";\\nimport \\\"./Instructions.sol\\\";\\nimport \\\"./StackFrames.sol\\\";\\nimport \\\"./MerkleProofs.sol\\\";\\nimport \\\"./ModuleMemories.sol\\\";\\nimport \\\"./Modules.sol\\\";\\nimport \\\"./GlobalStates.sol\\\";\\n\\nlibrary Deserialize {\\n\\tfunction u8(bytes calldata proof, uint256 startOffset) internal pure returns (uint8 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tret = uint8(proof[offset]);\\n\\t\\toffset++;\\n\\t}\\n\\n\\tfunction u16(bytes calldata proof, uint256 startOffset) internal pure returns (uint16 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tfor (uint256 i = 0; i < 16/8; i++) {\\n\\t\\t\\tret <<= 8;\\n\\t\\t\\tret |= uint8(proof[offset]);\\n\\t\\t\\toffset++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction u32(bytes calldata proof, uint256 startOffset) internal pure returns (uint32 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tfor (uint256 i = 0; i < 32/8; i++) {\\n\\t\\t\\tret <<= 8;\\n\\t\\t\\tret |= uint8(proof[offset]);\\n\\t\\t\\toffset++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction u64(bytes calldata proof, uint256 startOffset) internal pure returns (uint64 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tfor (uint256 i = 0; i < 64/8; i++) {\\n\\t\\t\\tret <<= 8;\\n\\t\\t\\tret |= uint8(proof[offset]);\\n\\t\\t\\toffset++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction u256(bytes calldata proof, uint256 startOffset) internal pure returns (uint256 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tfor (uint256 i = 0; i < 256/8; i++) {\\n\\t\\t\\tret <<= 8;\\n\\t\\t\\tret |= uint8(proof[offset]);\\n\\t\\t\\toffset++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction b32(bytes calldata proof, uint256 startOffset) internal pure returns (bytes32 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tuint256 retInt;\\n\\t\\t(retInt, offset) = u256(proof, offset);\\n\\t\\tret = bytes32(retInt);\\n\\t}\\n\\n\\tfunction value(bytes calldata proof, uint256 startOffset) internal pure returns (Value memory val, uint256 offset)  {\\n\\t\\toffset = startOffset;\\n\\t\\tuint8 typeInt = uint8(proof[offset]);\\n\\t\\toffset++;\\n\\t\\trequire(typeInt <= uint8(Values.maxValueType()), \\\"BAD_VALUE_TYPE\\\");\\n\\t\\tuint256 contents;\\n\\t\\t(contents, offset) = u256(proof, offset);\\n\\t\\tval = Value({\\n\\t\\t\\tvalueType: ValueType(typeInt),\\n\\t\\t\\tcontents: contents\\n\\t\\t});\\n\\t}\\n\\n\\tfunction valueStack(bytes calldata proof, uint256 startOffset) internal pure returns (ValueStack memory stack, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tbytes32 remainingHash;\\n\\t\\t(remainingHash, offset) = b32(proof, offset);\\n\\t\\tuint256 provedLength;\\n\\t\\t(provedLength, offset) = u256(proof, offset);\\n\\t\\tValue[] memory proved = new Value[](provedLength);\\n\\t\\tfor (uint256 i = 0; i < proved.length; i++) {\\n\\t\\t\\t(proved[i], offset) = value(proof, offset);\\n\\t\\t}\\n\\t\\tstack = ValueStack({\\n\\t\\t\\tproved: ValueArray(proved),\\n\\t\\t\\tremainingHash: remainingHash\\n\\t\\t});\\n\\t}\\n\\n\\tfunction pcStack(bytes calldata proof, uint256 startOffset) internal pure returns (PcStack memory stack, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tbytes32 remainingHash;\\n\\t\\t(remainingHash, offset) = b32(proof, offset);\\n\\t\\tuint256 provedLength;\\n\\t\\t(provedLength, offset) = u256(proof, offset);\\n\\t\\tuint32[] memory proved = new uint32[](provedLength);\\n\\t\\tfor (uint256 i = 0; i < proved.length; i++) {\\n\\t\\t\\t(proved[i], offset) = u32(proof, offset);\\n\\t\\t}\\n\\t\\tstack = PcStack({\\n\\t\\t\\tproved: PcArray(proved),\\n\\t\\t\\tremainingHash: remainingHash\\n\\t\\t});\\n\\t}\\n\\n\\tfunction instruction(bytes calldata proof, uint256 startOffset) internal pure returns (Instruction memory inst, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tuint16 opcode;\\n\\t\\tuint256 data;\\n\\t\\t(opcode, offset) = u16(proof, offset);\\n\\t\\t(data, offset) = u256(proof, offset);\\n\\t\\tinst = Instruction({\\n\\t\\t\\topcode: opcode,\\n\\t\\t\\targumentData: data\\n\\t\\t});\\n\\t}\\n\\n\\tfunction stackFrame(bytes calldata proof, uint256 startOffset) internal pure returns (StackFrame memory window, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tValue memory returnPc;\\n\\t\\tbytes32 localsMerkleRoot;\\n\\t\\tuint32 callerModule;\\n\\t\\tuint32 callerModuleInternals;\\n\\t\\t(returnPc, offset) = value(proof, offset);\\n\\t\\t(localsMerkleRoot, offset) = b32(proof, offset);\\n\\t\\t(callerModule, offset) = u32(proof, offset);\\n\\t\\t(callerModuleInternals, offset) = u32(proof, offset);\\n\\t\\twindow = StackFrame({\\n\\t\\t\\treturnPc: returnPc,\\n\\t\\t\\tlocalsMerkleRoot: localsMerkleRoot,\\n\\t\\t\\tcallerModule: callerModule,\\n\\t\\t\\tcallerModuleInternals: callerModuleInternals\\n\\t\\t});\\n\\t}\\n\\n\\tfunction stackFrameWindow(bytes calldata proof, uint256 startOffset) internal pure returns (StackFrameWindow memory window, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tbytes32 remainingHash;\\n\\t\\t(remainingHash, offset) = b32(proof, offset);\\n\\t\\tStackFrame[] memory proved;\\n\\t\\tif (proof[offset] != 0) {\\n\\t\\t\\toffset++;\\n\\t\\t\\tproved = new StackFrame[](1);\\n\\t\\t\\t(proved[0], offset) = stackFrame(proof, offset);\\n\\t\\t} else {\\n\\t\\t\\toffset++;\\n\\t\\t\\tproved = new StackFrame[](0);\\n\\t\\t}\\n\\t\\twindow = StackFrameWindow({\\n\\t\\t\\tproved: proved,\\n\\t\\t\\tremainingHash: remainingHash\\n\\t\\t});\\n\\t}\\n\\n\\tfunction moduleMemory(bytes calldata proof, uint256 startOffset) internal pure returns (ModuleMemory memory mem, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tuint64 size;\\n\\t\\tbytes32 root;\\n\\t\\t(size, offset) = u64(proof, offset);\\n\\t\\t(root, offset) = b32(proof, offset);\\n\\t\\tmem = ModuleMemory({\\n\\t\\t\\tsize: size,\\n\\t\\t\\tmerkleRoot: root\\n\\t\\t});\\n\\t}\\n\\n\\tfunction module(bytes calldata proof, uint256 startOffset) internal pure returns (Module memory mod, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tbytes32 globalsMerkleRoot;\\n\\t\\tModuleMemory memory mem;\\n\\t\\tbytes32 tablesMerkleRoot;\\n\\t\\tbytes32 functionsMerkleRoot;\\n\\t\\tuint32 internalsOffset;\\n\\t\\t(globalsMerkleRoot, offset) = b32(proof, offset);\\n\\t\\t(mem, offset) = moduleMemory(proof, offset);\\n\\t\\t(tablesMerkleRoot, offset) = b32(proof, offset);\\n\\t\\t(functionsMerkleRoot, offset) = b32(proof, offset);\\n\\t\\t(internalsOffset, offset) = u32(proof, offset);\\n\\t\\tmod = Module({\\n\\t\\t\\tglobalsMerkleRoot: globalsMerkleRoot,\\n\\t\\t\\tmoduleMemory: mem,\\n\\t\\t\\ttablesMerkleRoot: tablesMerkleRoot,\\n\\t\\t\\tfunctionsMerkleRoot: functionsMerkleRoot,\\n\\t\\t\\tinternalsOffset: internalsOffset\\n\\t\\t});\\n\\t}\\n\\n\\tfunction globalState(bytes calldata proof, uint256 startOffset) internal pure returns (GlobalState memory state, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\n\\t\\t// using constant ints for array size requires newer solidity\\n\\t\\tbytes32[1] memory bytes32_vals;\\n\\t\\tuint64[2] memory u64_vals;\\n\\n\\t\\tfor (uint8 i = 0; i< GlobalStates.BYTES32_VALS_NUM; i++) {\\n\\t\\t\\t(bytes32_vals[i], offset) = b32(proof, offset);\\n\\t\\t}\\n\\t\\tfor (uint8 i = 0; i< GlobalStates.U64_VALS_NUM; i++) {\\n\\t\\t\\t(u64_vals[i], offset) = u64(proof, offset);\\n\\t\\t}\\n\\t\\tstate = GlobalState({\\n\\t\\t\\tbytes32_vals: bytes32_vals,\\n\\t\\t\\tu64_vals: u64_vals\\n\\t\\t});\\n\\t}\\n\\n\\tfunction machine(bytes calldata proof, uint256 startOffset) internal pure returns (Machine memory mach, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tMachineStatus status;\\n\\t\\t{\\n\\t\\t\\tuint8 status_u8;\\n\\t\\t\\t(status_u8, offset) = u8(proof, offset);\\n\\t\\t\\tif (status_u8 == 0) {\\n\\t\\t\\t\\tstatus = MachineStatus.RUNNING;\\n\\t\\t\\t} else if (status_u8 == 1) {\\n\\t\\t\\t\\tstatus = MachineStatus.FINISHED;\\n\\t\\t\\t} else if (status_u8 == 2) {\\n\\t\\t\\t\\tstatus = MachineStatus.ERRORED;\\n\\t\\t\\t} else if (status_u8 == 3) {\\n\\t\\t\\t\\tstatus = MachineStatus.TOO_FAR;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(\\\"UNKNOWN_MACH_STATUS\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tValueStack memory values;\\n\\t\\tValueStack memory internalStack;\\n\\t\\tPcStack memory blocks;\\n\\t\\tbytes32 globalStateHash;\\n\\t\\tuint32 moduleIdx;\\n\\t\\tuint32 functionIdx;\\n\\t\\tuint32 functionPc;\\n\\t\\tStackFrameWindow memory frameStack;\\n\\t\\tbytes32 modulesRoot;\\n\\t\\t(values, offset) = valueStack(proof, offset);\\n\\t\\t(internalStack, offset) = valueStack(proof, offset);\\n\\t\\t(blocks, offset) = pcStack(proof, offset);\\n\\t\\t(frameStack, offset) = stackFrameWindow(proof, offset);\\n\\t\\t(globalStateHash, offset) = b32(proof, offset);\\n\\t\\t(moduleIdx, offset) = u32(proof, offset);\\n\\t\\t(functionIdx, offset) = u32(proof, offset);\\n\\t\\t(functionPc, offset) = u32(proof, offset);\\n\\t\\t(modulesRoot, offset) = b32(proof, offset);\\n\\t\\tmach = Machine({\\n\\t\\t\\tstatus: status,\\n\\t\\t\\tvalueStack: values,\\n\\t\\t\\tinternalStack: internalStack,\\n\\t\\t\\tblockStack: blocks,\\n\\t\\t\\tframeStack: frameStack,\\n\\t\\t\\tglobalStateHash: globalStateHash,\\n\\t\\t\\tmoduleIdx: moduleIdx,\\n\\t\\t\\tfunctionIdx: functionIdx,\\n\\t\\t\\tfunctionPc: functionPc,\\n\\t\\t\\tmodulesRoot: modulesRoot\\n\\t\\t});\\n\\t}\\n\\n\\tfunction merkleProof(bytes calldata proof, uint256 startOffset) internal pure returns (MerkleProof memory merkle, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tuint8 length;\\n\\t\\t(length, offset) = u8(proof, offset);\\n\\t\\tbytes32[] memory counterparts = new bytes32[](length);\\n\\t\\tfor (uint8 i = 0; i < length; i++) {\\n\\t\\t\\t(counterparts[i], offset) = b32(proof, offset);\\n\\t\\t}\\n\\t\\tmerkle = MerkleProof(counterparts);\\n\\t}\\n}\\n\",\"keccak256\":\"0x32a434c4f0cdabfeaac3589962cf2baae436569e8a9da409cfc418e5ead4cb1d\",\"license\":\"UNLICENSED\"},\"src/state/GlobalStates.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nstruct GlobalState {\\n\\tbytes32[1] bytes32_vals;\\n\\tuint64[2] u64_vals;\\n}\\n\\n\\nlibrary GlobalStates {\\n\\tuint16 constant BYTES32_VALS_NUM = 1;\\n\\tuint16 constant U64_VALS_NUM = 2;\\n\\tfunction hash(GlobalState memory state) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\n\\t\\t\\t\\\"Global state:\\\",\\n\\t\\t\\tstate.bytes32_vals[0],\\n\\t\\t\\tstate.u64_vals[0],\\n\\t\\t\\tstate.u64_vals[1]\\n\\t\\t));\\n\\t}\\n}\\n\",\"keccak256\":\"0x417592ac9b86d72227941cc836354eae4a32c6bf1730c798efaf5c8772043631\",\"license\":\"UNLICENSED\"},\"src/state/Instructions.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nstruct Instruction {\\n    uint16 opcode;\\n    uint256 argumentData;\\n}\\n\\nlibrary Instructions {\\n    uint16 constant UNREACHABLE = 0x00;\\n    uint16 constant NOP = 0x01;\\n    uint16 constant BLOCK = 0x02;\\n    uint16 constant BRANCH = 0x0C;\\n    uint16 constant BRANCH_IF = 0x0D;\\n    uint16 constant RETURN = 0x0F;\\n    uint16 constant CALL = 0x10;\\n    uint16 constant CALL_INDIRECT = 0x11;\\n    uint16 constant LOCAL_GET = 0x20;\\n    uint16 constant LOCAL_SET = 0x21;\\n    uint16 constant GLOBAL_GET = 0x23;\\n    uint16 constant GLOBAL_SET = 0x24;\\n\\n    uint16 constant I32_LOAD = 0x28;\\n    uint16 constant I64_LOAD = 0x29;\\n    uint16 constant F32_LOAD = 0x2A;\\n    uint16 constant F64_LOAD = 0x2B;\\n    uint16 constant I32_LOAD8_S = 0x2C;\\n    uint16 constant I32_LOAD8_U = 0x2D;\\n    uint16 constant I32_LOAD16_S = 0x2E;\\n    uint16 constant I32_LOAD16_U = 0x2F;\\n    uint16 constant I64_LOAD8_S = 0x30;\\n    uint16 constant I64_LOAD8_U = 0x31;\\n    uint16 constant I64_LOAD16_S = 0x32;\\n    uint16 constant I64_LOAD16_U = 0x33;\\n    uint16 constant I64_LOAD32_S = 0x34;\\n    uint16 constant I64_LOAD32_U = 0x35;\\n\\n    uint16 constant I32_STORE = 0x36;\\n    uint16 constant I64_STORE = 0x37;\\n    uint16 constant F32_STORE = 0x38;\\n    uint16 constant F64_STORE = 0x39;\\n    uint16 constant I32_STORE8 = 0x3A;\\n    uint16 constant I32_STORE16 = 0x3B;\\n    uint16 constant I64_STORE8 = 0x3C;\\n    uint16 constant I64_STORE16 = 0x3D;\\n    uint16 constant I64_STORE32 = 0x3E;\\n\\n    uint16 constant MEMORY_SIZE = 0x3F;\\n    uint16 constant MEMORY_GROW = 0x40;\\n\\n    uint16 constant DROP = 0x1A;\\n    uint16 constant SELECT = 0x1B;\\n    uint16 constant I32_CONST = 0x41;\\n    uint16 constant I64_CONST = 0x42;\\n    uint16 constant F32_CONST = 0x43;\\n    uint16 constant F64_CONST = 0x44;\\n    uint16 constant I32_EQZ = 0x45;\\n    uint16 constant I32_RELOP_BASE = 0x46;\\n    uint16 constant IRELOP_EQ = 0;\\n    uint16 constant IRELOP_NE = 1;\\n    uint16 constant IRELOP_LT_S = 2;\\n    uint16 constant IRELOP_LT_U = 3;\\n    uint16 constant IRELOP_GT_S = 4;\\n    uint16 constant IRELOP_GT_U = 5;\\n    uint16 constant IRELOP_LE_S = 6;\\n    uint16 constant IRELOP_LE_U = 7;\\n    uint16 constant IRELOP_GE_S = 8;\\n    uint16 constant IRELOP_GE_U = 9;\\n    uint16 constant IRELOP_LAST = IRELOP_GE_U;\\n\\n    uint16 constant I64_EQZ = 0x50;\\n    uint16 constant I64_RELOP_BASE = 0x51;\\n\\n    uint16 constant I32_UNOP_BASE = 0x67;\\n    uint16 constant IUNOP_CLZ = 0;\\n    uint16 constant IUNOP_CTZ = 1;\\n    uint16 constant IUNOP_POPCNT = 2;\\n    uint16 constant IUNOP_LAST = IUNOP_POPCNT;\\n\\n    uint16 constant I32_ADD = 0x6A;\\n    uint16 constant I32_SUB = 0x6B;\\n    uint16 constant I32_MUL = 0x6C;\\n    uint16 constant I32_DIV_S = 0x6D;\\n    uint16 constant I32_DIV_U = 0x6E;\\n    uint16 constant I32_REM_S = 0x6F;\\n    uint16 constant I32_REM_U = 0x70;\\n    uint16 constant I32_AND = 0x71;\\n    uint16 constant I32_OR = 0x72;\\n    uint16 constant I32_XOR = 0x73;\\n    uint16 constant I32_SHL = 0x74;\\n    uint16 constant I32_SHR_S = 0x75;\\n    uint16 constant I32_SHR_U = 0x76;\\n    uint16 constant I32_ROTL = 0x77;\\n    uint16 constant I32_ROTR = 0x78;\\n\\n    uint16 constant I64_UNOP_BASE = 0x79;\\n\\n    uint16 constant I64_ADD = 0x7C;\\n    uint16 constant I64_SUB = 0x7D;\\n    uint16 constant I64_MUL = 0x7E;\\n    uint16 constant I64_DIV_S = 0x7F;\\n    uint16 constant I64_DIV_U = 0x80;\\n    uint16 constant I64_REM_S = 0x81;\\n    uint16 constant I64_REM_U = 0x82;\\n    uint16 constant I64_AND = 0x83;\\n    uint16 constant I64_OR = 0x84;\\n    uint16 constant I64_XOR = 0x85;\\n    uint16 constant I64_SHL = 0x86;\\n    uint16 constant I64_SHR_S = 0x87;\\n    uint16 constant I64_SHR_U = 0x88;\\n    uint16 constant I64_ROTL = 0x89;\\n    uint16 constant I64_ROTR = 0x8A;\\n\\n    uint16 constant I32_WRAP_I64 = 0xA7;\\n    uint16 constant I64_EXTEND_I32_S = 0xAC;\\n    uint16 constant I64_EXTEND_I32_U = 0xAD;\\n\\n    uint16 constant I32_REINTERPRET_F32 = 0xBC;\\n    uint16 constant I64_REINTERPRET_F64 = 0xBD;\\n    uint16 constant F32_REINTERPRET_I32 = 0xBE;\\n    uint16 constant F64_REINTERPRET_I64 = 0xBF;\\n\\n    uint16 constant I32_EXTEND_8S = 0xC0;\\n    uint16 constant I32_EXTEND_16S = 0xC1;\\n    uint16 constant I64_EXTEND_8S = 0xC2;\\n    uint16 constant I64_EXTEND_16S = 0xC3;\\n    uint16 constant I64_EXTEND_32S = 0xC4;\\n\\n    uint16 constant END_BLOCK = 0x8000;\\n    uint16 constant END_BLOCK_IF = 0x8001;\\n    uint16 constant INIT_FRAME = 0x8002;\\n    uint16 constant ARBITRARY_JUMP_IF = 0x8003;\\n    uint16 constant PUSH_STACK_BOUNDARY = 0x8004;\\n    uint16 constant MOVE_FROM_STACK_TO_INTERNAL = 0x8005;\\n    uint16 constant MOVE_FROM_INTERNAL_TO_STACK = 0x8006;\\n    uint16 constant IS_STACK_BOUNDARY = 0x8007;\\n    uint16 constant DUP = 0x8008;\\n    uint16 constant CROSS_MODULE_CALL = 0x8009;\\n    uint16 constant CALLER_MODULE_INTERNAL_CALL = 0x800A;\\n\\n    uint16 constant GET_GLOBAL_STATE_BYTES32 = 0x8010;\\n    uint16 constant SET_GLOBAL_STATE_BYTES32 = 0x8011;\\n    uint16 constant GET_GLOBAL_STATE_U64 = 0x8012;\\n    uint16 constant SET_GLOBAL_STATE_U64 = 0x8013;\\n\\n    uint16 constant READ_PRE_IMAGE = 0x8020;\\n    uint16 constant READ_INBOX_MESSAGE = 0x8021;\\n    uint16 constant HALT_AND_SET_FINISHED = 0x8022;\\n\\n    uint256 constant INBOX_INDEX_SEQUENCER = 0;\\n    uint256 constant INBOX_INDEX_DELAYED = 1;\\n\\n    function hash(Instruction memory inst) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"Instruction:\\\", inst.opcode, inst.argumentData)\\n            );\\n    }\\n\\n    function newNop() internal pure returns (Instruction memory) {\\n        return Instruction({opcode: NOP, argumentData: 0});\\n    }\\n}\\n\",\"keccak256\":\"0xf273ee49bad2f0df9949848a86d77ede70547664094d5a5b988f1a50781cbcb5\",\"license\":\"UNLICENSED\"},\"src/state/Machines.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ValueStacks.sol\\\";\\nimport \\\"./PcStacks.sol\\\";\\nimport \\\"./Instructions.sol\\\";\\nimport \\\"./StackFrames.sol\\\";\\n\\nenum MachineStatus {\\n\\tRUNNING,\\n\\tFINISHED,\\n\\tERRORED,\\n\\tTOO_FAR\\n}\\n\\nstruct Machine {\\n\\tMachineStatus status;\\n\\tValueStack valueStack;\\n\\tValueStack internalStack;\\n\\tPcStack blockStack;\\n\\tStackFrameWindow frameStack;\\n\\tbytes32 globalStateHash;\\n\\tuint32 moduleIdx;\\n\\tuint32 functionIdx;\\n\\tuint32 functionPc;\\n\\tbytes32 modulesRoot;\\n}\\n\\nlibrary Machines {\\n\\tfunction hash(Machine memory mach) internal pure returns (bytes32) {\\n\\t\\t// Warning: the non-running hashes are replicated in BlockChallenge\\n\\t\\tif (mach.status == MachineStatus.RUNNING) {\\n\\t\\t\\treturn keccak256(abi.encodePacked(\\n\\t\\t\\t\\t\\\"Machine running:\\\",\\n\\t\\t\\t\\tValueStacks.hash(mach.valueStack),\\n\\t\\t\\t\\tValueStacks.hash(mach.internalStack),\\n\\t\\t\\t\\tPcStacks.hash(mach.blockStack),\\n\\t\\t\\t\\tStackFrames.hash(mach.frameStack),\\n\\t\\t\\t\\tmach.globalStateHash,\\n\\t\\t\\t\\tmach.moduleIdx,\\n\\t\\t\\t\\tmach.functionIdx,\\n\\t\\t\\t\\tmach.functionPc,\\n\\t\\t\\t\\tmach.modulesRoot\\n\\t\\t\\t));\\n\\t\\t} else if (mach.status == MachineStatus.FINISHED) {\\n\\t\\t\\treturn keccak256(abi.encodePacked(\\n\\t\\t\\t\\t\\\"Machine finished:\\\",\\n\\t\\t\\t\\tmach.globalStateHash\\n\\t\\t\\t));\\n\\t\\t} else if (mach.status == MachineStatus.ERRORED) {\\n\\t\\t\\treturn keccak256(abi.encodePacked(\\\"Machine errored:\\\"));\\n\\t\\t} else if (mach.status == MachineStatus.TOO_FAR) {\\n\\t\\t\\treturn keccak256(abi.encodePacked(\\\"Machine too far:\\\"));\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"BAD_MACH_STATUS\\\");\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xc7501a5fabd0fe8a0aac6a4f5ae560789a0932287718fbe4eda68aa8ed37b273\",\"license\":\"UNLICENSED\"},\"src/state/MerkleProofs.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\nimport \\\"./Instructions.sol\\\";\\nimport \\\"./Modules.sol\\\";\\n\\nstruct MerkleProof {\\n\\tbytes32[] counterparts;\\n}\\n\\nlibrary MerkleProofs {\\n\\tfunction computeRootFromValue(MerkleProof memory proof, uint256 index, Value memory leaf) internal pure returns (bytes32) {\\n\\t\\treturn computeRootUnsafe(proof, index, Values.hash(leaf), \\\"Value merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromInstruction(MerkleProof memory proof, uint256 index, Instruction memory inst) internal pure returns (bytes32) {\\n\\t\\treturn computeRootUnsafe(proof, index, Instructions.hash(inst), \\\"Instruction merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromFunction(MerkleProof memory proof, uint256 index, bytes32 codeRoot) internal pure returns (bytes32) {\\n\\t\\tbytes32 h = keccak256(abi.encodePacked(\\\"Function:\\\", codeRoot));\\n\\t\\treturn computeRootUnsafe(proof, index, h, \\\"Function merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromMemory(MerkleProof memory proof, uint256 index, bytes32 contents) internal pure returns (bytes32) {\\n\\t\\tbytes32 h = keccak256(abi.encodePacked(\\\"Memory leaf:\\\", contents));\\n\\t\\treturn computeRootUnsafe(proof, index, h, \\\"Memory merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromElement(MerkleProof memory proof, uint256 index, bytes32 funcTypeHash, Value memory val) internal pure returns (bytes32) {\\n\\t\\tbytes32 h = keccak256(abi.encodePacked(\\\"Table element:\\\", funcTypeHash, Values.hash(val)));\\n\\t\\treturn computeRootUnsafe(proof, index, h, \\\"Table element merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromTable(MerkleProof memory proof, uint256 index, uint8 tableType, uint64 tableSize, bytes32 elementsRoot) internal pure returns (bytes32) {\\n\\t\\tbytes32 h = keccak256(abi.encodePacked(\\\"Table:\\\", tableType, tableSize, elementsRoot));\\n\\t\\treturn computeRootUnsafe(proof, index, h, \\\"Table merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromModule(MerkleProof memory proof, uint256 index, Module memory mod) internal pure returns (bytes32) {\\n\\t\\treturn computeRootUnsafe(proof, index, Modules.hash(mod), \\\"Module merkle tree:\\\");\\n\\t}\\n\\n\\t// WARNING: leafHash must be computed in such a way that it cannot be a non-leaf hash.\\n\\tfunction computeRootUnsafe(MerkleProof memory proof, uint256 index, bytes32 leafHash, string memory prefix) internal pure returns (bytes32 h) {\\n\\t\\th = leafHash;\\n\\t\\tfor (uint256 layer = 0; layer < proof.counterparts.length; layer++) {\\n\\t\\t\\tif (index & 1 == 0) {\\n\\t\\t\\t\\th = keccak256(abi.encodePacked(prefix, h, proof.counterparts[layer]));\\n\\t\\t\\t} else {\\n\\t\\t\\t\\th = keccak256(abi.encodePacked(prefix, proof.counterparts[layer], h));\\n\\t\\t\\t}\\n\\t\\t\\tindex >>= 1;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x3696497409a3c3cdf6e0af1cc0048dbaa9fcb9ead23b409a717367e5dc08ed07\",\"license\":\"UNLICENSED\"},\"src/state/ModuleMemories.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./MerkleProofs.sol\\\";\\nimport \\\"./Deserialize.sol\\\";\\n\\nstruct ModuleMemory {\\n\\tuint64 size;\\n\\tbytes32 merkleRoot;\\n}\\n\\nlibrary ModuleMemories {\\n\\tfunction hash(ModuleMemory memory mem) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\\"Memory:\\\", mem.size, mem.merkleRoot));\\n\\t}\\n\\n\\tfunction proveLeaf(ModuleMemory memory mem, uint256 leafIdx, bytes calldata proof, uint256 startOffset) internal pure returns (bytes32 contents, uint256 offset, MerkleProof memory merkle) {\\n\\t\\toffset = startOffset;\\n\\t\\t(contents, offset) = Deserialize.b32(proof, offset);\\n\\t\\t(merkle, offset) = Deserialize.merkleProof(proof, offset);\\n\\t\\tbytes32 recomputedRoot = MerkleProofs.computeRootFromMemory(merkle, leafIdx, contents);\\n\\t\\trequire(recomputedRoot == mem.merkleRoot, \\\"WRONG_MEM_ROOT\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0x5f836a5d36dff4e34cd02ef20f16eccbe6869fe9011eba8e8ff6ba0430910fe0\",\"license\":\"UNLICENSED\"},\"src/state/Modules.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ModuleMemories.sol\\\";\\n\\nstruct Module {\\n    bytes32 globalsMerkleRoot;\\n    ModuleMemory moduleMemory;\\n    bytes32 tablesMerkleRoot;\\n    bytes32 functionsMerkleRoot;\\n    uint32 internalsOffset;\\n}\\n\\nlibrary Modules {\\n    function hash(Module memory mod) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"Module:\\\",\\n                    mod.globalsMerkleRoot,\\n                    ModuleMemories.hash(mod.moduleMemory),\\n                    mod.tablesMerkleRoot,\\n                    mod.functionsMerkleRoot,\\n                    mod.internalsOffset\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x40ac3cca47c15c6f601467e1a3a35bb058d65fd5ac74c628edcdec0fa4aad0f4\",\"license\":\"UNLICENSED\"},\"src/state/PcArrays.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nstruct PcArray {\\n\\tuint32[] inner;\\n}\\n\\nlibrary PcArrays {\\n\\tfunction get(PcArray memory arr, uint256 index) internal pure returns (uint32) {\\n\\t\\treturn arr.inner[index];\\n\\t}\\n\\n\\tfunction set(PcArray memory arr, uint256 index, uint32 val) internal pure {\\n\\t\\tarr.inner[index] = val;\\n\\t}\\n\\n\\tfunction length(PcArray memory arr) internal pure returns (uint256) {\\n\\t\\treturn arr.inner.length;\\n\\t}\\n\\n\\tfunction push(PcArray memory arr, uint32 val) internal pure {\\n\\t\\tuint32[] memory newInner = new uint32[](arr.inner.length + 1);\\n\\t\\tfor (uint256 i = 0; i < arr.inner.length; i++) {\\n\\t\\t\\tnewInner[i] = arr.inner[i];\\n\\t\\t}\\n\\t\\tnewInner[arr.inner.length] = val;\\n\\t\\tarr.inner = newInner;\\n\\t}\\n\\n\\tfunction pop(PcArray memory arr) internal pure returns (uint32 popped) {\\n\\t\\tpopped = arr.inner[arr.inner.length - 1];\\n\\t\\tuint32[] memory newInner = new uint32[](arr.inner.length - 1);\\n\\t\\tfor (uint256 i = 0; i < newInner.length; i++) {\\n\\t\\t\\tnewInner[i] = arr.inner[i];\\n\\t\\t}\\n\\t\\tarr.inner = newInner;\\n\\t}\\n}\\n\",\"keccak256\":\"0x1a2fa6e3929c5e6afd56643896b8074ee830207866ed65c2e85dd7908482c39b\",\"license\":\"UNLICENSED\"},\"src/state/PcStacks.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PcArrays.sol\\\";\\n\\nstruct PcStack {\\n\\tPcArray proved;\\n\\tbytes32 remainingHash;\\n}\\n\\nlibrary PcStacks {\\n\\tfunction hash(PcStack memory stack) internal pure returns (bytes32 h) {\\n\\t\\th = stack.remainingHash;\\n\\t\\tuint256 len = PcArrays.length(stack.proved);\\n\\t\\tfor (uint256 i = 0; i < len; i++) {\\n\\t\\t\\th = keccak256(abi.encodePacked(\\\"Program counter stack:\\\", PcArrays.get(stack.proved, i), h));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction pop(PcStack memory stack) internal pure returns (uint32) {\\n\\t\\treturn PcArrays.pop(stack.proved);\\n\\t}\\n\\n\\tfunction push(PcStack memory stack, uint32 val) internal pure {\\n\\t\\treturn PcArrays.push(stack.proved, val);\\n\\t}\\n\\n\\tfunction isEmpty(PcStack memory stack) internal pure returns (bool) {\\n\\t\\treturn PcArrays.length(stack.proved) == 0 && stack.remainingHash == bytes32(0);\\n\\t}\\n\\n\\tfunction hasProvenDepthLessThan(PcStack memory stack, uint256 bound) internal pure returns (bool) {\\n\\t\\treturn PcArrays.length(stack.proved) < bound && stack.remainingHash == bytes32(0);\\n\\t}\\n}\\n\",\"keccak256\":\"0x90258f73cc0d9af360f8ded68504aa1a2841ff46c20041dc40fc9df16a62b281\",\"license\":\"UNLICENSED\"},\"src/state/StackFrames.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\n\\nstruct StackFrame {\\n    Value returnPc;\\n    bytes32 localsMerkleRoot;\\n    uint32 callerModule;\\n    uint32 callerModuleInternals;\\n}\\n\\nstruct StackFrameWindow {\\n    StackFrame[] proved;\\n    bytes32 remainingHash;\\n}\\n\\nlibrary StackFrames {\\n    function hash(StackFrame memory frame) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"Stack frame:\\\",\\n                    Values.hash(frame.returnPc),\\n                    frame.localsMerkleRoot,\\n                    frame.callerModule,\\n                    frame.callerModuleInternals\\n                )\\n            );\\n    }\\n\\n    function hash(StackFrameWindow memory window)\\n        internal\\n        pure\\n        returns (bytes32 h)\\n    {\\n        h = window.remainingHash;\\n        for (uint256 i = 0; i < window.proved.length; i++) {\\n            h = keccak256(\\n                abi.encodePacked(\\n                    \\\"Stack frame stack:\\\",\\n                    hash(window.proved[i]),\\n                    h\\n                )\\n            );\\n        }\\n    }\\n\\n    function peek(StackFrameWindow memory window)\\n        internal\\n        pure\\n        returns (StackFrame memory)\\n    {\\n        require(window.proved.length == 1, \\\"BAD_WINDOW_LENGTH\\\");\\n        return window.proved[0];\\n    }\\n\\n    function pop(StackFrameWindow memory window)\\n        internal\\n        pure\\n        returns (StackFrame memory frame)\\n    {\\n        require(window.proved.length == 1, \\\"BAD_WINDOW_LENGTH\\\");\\n        frame = window.proved[0];\\n        window.proved = new StackFrame[](0);\\n    }\\n\\n    function push(StackFrameWindow memory window, StackFrame memory frame)\\n        internal\\n        pure\\n    {\\n        StackFrame[] memory newProved = new StackFrame[](\\n            window.proved.length + 1\\n        );\\n        for (uint256 i = 0; i < window.proved.length; i++) {\\n            newProved[i] = window.proved[i];\\n        }\\n        newProved[window.proved.length] = frame;\\n        window.proved = newProved;\\n    }\\n}\\n\",\"keccak256\":\"0x33d0cd90f98e6036b274316c9ef622cdba8751a393656f838eb9795423073ee1\",\"license\":\"UNLICENSED\"},\"src/state/ValueArrays.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\n\\nstruct ValueArray {\\n\\tValue[] inner;\\n}\\n\\nlibrary ValueArrays {\\n\\tfunction get(ValueArray memory arr, uint256 index) internal pure returns (Value memory) {\\n\\t\\treturn arr.inner[index];\\n\\t}\\n\\n\\tfunction set(ValueArray memory arr, uint256 index, Value memory val) internal pure {\\n\\t\\tarr.inner[index] = val;\\n\\t}\\n\\n\\tfunction length(ValueArray memory arr) internal pure returns (uint256) {\\n\\t\\treturn arr.inner.length;\\n\\t}\\n\\n\\tfunction push(ValueArray memory arr, Value memory val) internal pure {\\n\\t\\tValue[] memory newInner = new Value[](arr.inner.length + 1);\\n\\t\\tfor (uint256 i = 0; i < arr.inner.length; i++) {\\n\\t\\t\\tnewInner[i] = arr.inner[i];\\n\\t\\t}\\n\\t\\tnewInner[arr.inner.length] = val;\\n\\t\\tarr.inner = newInner;\\n\\t}\\n\\n\\tfunction pop(ValueArray memory arr) internal pure returns (Value memory popped) {\\n\\t\\tpopped = arr.inner[arr.inner.length - 1];\\n\\t\\tValue[] memory newInner = new Value[](arr.inner.length - 1);\\n\\t\\tfor (uint256 i = 0; i < newInner.length; i++) {\\n\\t\\t\\tnewInner[i] = arr.inner[i];\\n\\t\\t}\\n\\t\\tarr.inner = newInner;\\n\\t}\\n}\\n\",\"keccak256\":\"0xee609e88227972d896e3c4dd3eb9d5fbedbcc043c1c593735923509557c5f125\",\"license\":\"UNLICENSED\"},\"src/state/ValueStacks.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\nimport \\\"./ValueArrays.sol\\\";\\n\\nstruct ValueStack {\\n\\tValueArray proved;\\n\\tbytes32 remainingHash;\\n}\\n\\nlibrary ValueStacks {\\n\\tfunction hash(ValueStack memory stack) internal pure returns (bytes32 h) {\\n\\t\\th = stack.remainingHash;\\n\\t\\tuint256 len = ValueArrays.length(stack.proved);\\n\\t\\tfor (uint256 i = 0; i < len; i++) {\\n\\t\\t\\th = keccak256(abi.encodePacked(\\\"Value stack:\\\", Values.hash(ValueArrays.get(stack.proved, i)), h));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction peek(ValueStack memory stack) internal pure returns (Value memory) {\\n\\t\\tuint256 len = ValueArrays.length(stack.proved);\\n\\t\\treturn ValueArrays.get(stack.proved, len - 1);\\n\\t}\\n\\n\\tfunction pop(ValueStack memory stack) internal pure returns (Value memory) {\\n\\t\\treturn ValueArrays.pop(stack.proved);\\n\\t}\\n\\n\\tfunction push(ValueStack memory stack, Value memory val) internal pure {\\n\\t\\treturn ValueArrays.push(stack.proved, val);\\n\\t}\\n\\n\\tfunction isEmpty(ValueStack memory stack) internal pure returns (bool) {\\n\\t\\treturn ValueArrays.length(stack.proved) == 0 && stack.remainingHash == bytes32(0);\\n\\t}\\n\\n\\tfunction hasProvenDepthLessThan(ValueStack memory stack, uint256 bound) internal pure returns (bool) {\\n\\t\\treturn ValueArrays.length(stack.proved) < bound && stack.remainingHash == bytes32(0);\\n\\t}\\n}\\n\",\"keccak256\":\"0x5c0cf0db204e28fff836c7b53c622e6d7fcf5d91d3f17a275e2d99710b3dbcb5\",\"license\":\"UNLICENSED\"},\"src/state/Values.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nenum ValueType {\\n\\tI32,\\n\\tI64,\\n\\tF32,\\n\\tF64,\\n\\tREF_NULL,\\n\\tFUNC_REF,\\n\\tINTERNAL_REF,\\n\\tSTACK_BOUNDARY\\n}\\n\\nstruct Value {\\n\\tValueType valueType;\\n\\tuint256 contents;\\n}\\n\\nlibrary Values {\\n\\tfunction hash(Value memory val) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\\"Value:\\\", val.valueType, val.contents));\\n\\t}\\n\\n\\tfunction maxValueType() internal pure returns (ValueType) {\\n\\t\\treturn ValueType.STACK_BOUNDARY;\\n\\t}\\n\\n\\tfunction isNumeric(ValueType val) internal pure returns (bool) {\\n\\t\\treturn val == ValueType.I32 || val == ValueType.I64 || val == ValueType.F32 || val == ValueType.F64;\\n\\t}\\n\\n\\tfunction isNumeric(Value memory val) internal pure returns (bool) {\\n\\t\\treturn isNumeric(val.valueType);\\n\\t}\\n\\n\\tfunction assumeI32(Value memory val) internal pure returns(uint32) {\\n\\t\\tuint uintval = uint(val.contents);\\n\\t\\trequire(val.valueType == ValueType.I32, \\\"NOT_I32\\\");\\n\\t\\trequire(uintval < (1<<32), \\\"BAD_I32\\\");\\n\\t\\treturn uint32(uintval);\\n\\t}\\n\\n\\tfunction assumeI64(Value memory val) internal pure returns(uint64) {\\n\\t\\tuint uintval = uint(val.contents);\\n\\t\\trequire(val.valueType == ValueType.I64, \\\"NOT_I64\\\");\\n\\t\\trequire(uintval < (1<<64), \\\"BAD_I64\\\");\\n\\t\\treturn uint64(uintval);\\n\\t}\\n\\n\\tfunction newRefNull() internal pure returns (Value memory) {\\n\\t\\treturn Value({\\n\\t\\t\\tvalueType: ValueType.REF_NULL,\\n\\t\\t\\tcontents: 0\\n\\t\\t});\\n\\t}\\n\\n\\tfunction newI32(uint32 x) internal pure returns (Value memory) {\\n\\t\\treturn Value({\\n\\t\\t\\tvalueType: ValueType.I32,\\n\\t\\t\\tcontents: uint256(x)\\n\\t\\t});\\n\\t}\\n\\n\\tfunction newI64(uint64 x) internal pure returns (Value memory) {\\n\\t\\treturn Value({\\n\\t\\t\\tvalueType: ValueType.I64,\\n\\t\\t\\tcontents: uint256(x)\\n\\t\\t});\\n\\t}\\n\\n\\tfunction newBoolean(bool x) internal pure returns (Value memory) {\\n\\t\\tif (x) {\\n\\t\\t\\treturn newI32(uint32(1));\\n\\t\\t} else {\\n\\t\\t\\treturn newI32(uint32(0));\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x2c30c3b373b6442aaef6407afe370abc25a2eb41bb4368294dd120c99c1b594f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506136c8806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c4017b3814610030575b600080fd5b61004a6004803603810190610045919061240a565b610061565b604051610058929190612d55565b60405180910390f35b610069611a0d565b610071611aa2565b8661007b90613153565b91508580360381019061008e91906124c3565b905060008560000160208101906100a591906124f0565b9050611ae6604561ffff168261ffff1614806100c95750605061ffff168261ffff16145b156100d85761033c905061031e565b604661ffff168261ffff16101580156101065750600960466100fa9190612eea565b61ffff168261ffff1611155b1561011557610388905061031d565b606761ffff168261ffff16101580156101435750600260676101379190612eea565b61ffff168261ffff1611155b156101525761048a905061031c565b606a61ffff168261ffff16101580156101745750607861ffff168261ffff1611155b15610183576104fc905061031b565b605161ffff168261ffff16101580156101b15750600960516101a59190612eea565b61ffff168261ffff1611155b156101c0576106ee905061031a565b607961ffff168261ffff16101580156101ee5750600260796101e29190612eea565b61ffff168261ffff1611155b156101fd576107739050610319565b607c61ffff168261ffff161015801561021f5750608a61ffff168261ffff1611155b1561022e576107e59050610318565b60a761ffff168261ffff161415610249576109ef9050610317565b60ac61ffff168261ffff161480610268575060ad61ffff168261ffff16145b1561027757610a2c9050610316565b60c061ffff168261ffff1610158015610299575060c461ffff168261ffff1611155b156102a857610aa39050610315565b60bc61ffff168261ffff16101580156102ca575060bf61ffff168261ffff1611155b156102d957610d0d9050610314565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030b90612c15565b60405180910390fd5b5b5b5b5b5b5b5b5b5b5b61032f84848989898663ffffffff16565b5050965096945050505050565b600061034b8660200151610ed1565b9050600080826020015114156103645760019050610369565b600090505b61037f876020015161037a83610eed565b610f2a565b50505050505050565b600061039f61039a8760200151610ed1565b610f3c565b905060006103b86103b38860200151610ed1565b610f3c565b9050600060468660000160208101906103d191906124f0565b6103db9190612fb2565b9050600080600261ffff168361ffff1614806103ff5750600461ffff168361ffff16145b806104125750600661ffff168361ffff16145b806104255750600861ffff168361ffff16145b156104455761043384611001565b915061043e85611001565b9050610458565b8363ffffffff1691508463ffffffff1690505b600061046583838661103d565b905061047d8b6020015161047883611223565b610f2a565b5050505050505050505050565b60006104a161049c8760200151610ed1565b610f3c565b9050600060678560000160208101906104ba91906124f0565b6104c49190612fb2565b905060006104da8363ffffffff16836020611254565b90506104f288602001516104ed83610eed565b610f2a565b5050505050505050565b600061051361050e8760200151610ed1565b610f3c565b9050600061052c6105278860200151610ed1565b610f3c565b9050600080606a87600001602081019061054691906124f0565b6105509190612fb2565b905060038161ffff1614156105965760008463ffffffff1614156105775760009150610591565b8360030b8360030b8161058d5761058c61329e565b5b0591505b6106cd565b60058161ffff1614156105da5760008463ffffffff1614156105bb57600091506105d5565b8360030b8360030b816105d1576105d061329e565b5b0791505b6106cc565b600a8161ffff1614156106155760208463ffffffff16816105fe576105fd61329e565b5b0663ffffffff168363ffffffff16901b91506106cb565b600c8161ffff1614156106505760208463ffffffff16816106395761063861329e565b5b0663ffffffff168363ffffffff16901c91506106ca565b600b8161ffff161415610671578363ffffffff168360030b901d91506106c9565b600d8161ffff16141561068f576106888385611449565b91506106c8565b600e8161ffff1614156106ad576106a6838561148f565b91506106c7565b6106c48363ffffffff168563ffffffff16836114d5565b91505b5b5b5b5b5b5b6106e389602001516106de84610eed565b610f2a565b505050505050505050565b60006107056107008760200151610ed1565b61164c565b9050600061071e6107198860200151610ed1565b61164c565b90506000605186600001602081019061073791906124f0565b6107419190612fb2565b9050600061075083858461103d565b9050610768896020015161076383611223565b610f2a565b505050505050505050565b600061078a6107858760200151610ed1565b61164c565b9050600060798560000160208101906107a391906124f0565b6107ad9190612fb2565b905060006107bd83836040611254565b63ffffffff1690506107db88602001516107d683611715565b610f2a565b5050505050505050565b60006107fc6107f78760200151610ed1565b61164c565b905060006108156108108860200151610ed1565b61164c565b9050600080607c87600001602081019061082f91906124f0565b6108399190612fb2565b905060038161ffff1614156108835760008467ffffffffffffffff161415610864576000915061087e565b8360070b8360070b8161087a5761087961329e565b5b0591505b6109ce565b60058161ffff1614156108cb5760008467ffffffffffffffff1614156108ac57600091506108c6565b8360070b8360070b816108c2576108c161329e565b5b0791505b6109cd565b600a8161ffff1614156109125760408467ffffffffffffffff16816108f3576108f261329e565b5b0667ffffffffffffffff168367ffffffffffffffff16901b91506109cc565b600c8161ffff1614156109595760408467ffffffffffffffff168161093a5761093961329e565b5b0667ffffffffffffffff168367ffffffffffffffff16901c91506109cb565b600b8161ffff16141561097e578367ffffffffffffffff168360070b901d91506109ca565b600d8161ffff16141561099c576109958385611756565b91506109c9565b600e8161ffff1614156109ba576109b383856117ac565b91506109c8565b6109c58385836114d5565b91505b5b5b5b5b5b5b6109e489602001516109df84611715565b610f2a565b505050505050505050565b6000610a06610a018760200151610ed1565b61164c565b90506000819050610a238760200151610a1e83610eed565b610f2a565b50505050505050565b6000610a43610a3e8760200151610ed1565b610f3c565b9050600060ac61ffff16856000016020810190610a6091906124f0565b61ffff161415610a7a57610a7382611001565b9050610a84565b8163ffffffff1690505b610a9a8760200151610a9583611715565b610f2a565b50505050505050565b60008060c061ffff16856000016020810190610abf91906124f0565b61ffff161415610ad6576000915060089050610bd5565b60c161ffff16856000016020810190610aef91906124f0565b61ffff161415610b06576000915060109050610bd4565b60c261ffff16856000016020810190610b1f91906124f0565b61ffff161415610b36576001915060089050610bd3565b60c361ffff16856000016020810190610b4f91906124f0565b61ffff161415610b66576001915060109050610bd2565b60c461ffff16856000016020810190610b7f91906124f0565b61ffff161415610b96576001915060209050610bd1565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc890612bb5565b60405180910390fd5b5b5b5b5b6000806007811115610bea57610be96132cd565b5b836007811115610bfd57610bfc6132cd565b5b1415610c0f5763ffffffff9050610c1b565b67ffffffffffffffff90505b6000610c2a8960200151610ed1565b9050836007811115610c3f57610c3e6132cd565b5b81600001516007811115610c5657610c556132cd565b5b14610c96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8d90612c35565b60405180910390fd5b600060018460ff166001901b610cac9190612fe6565b9050808260200181815116915081815250506000600185610ccd9190613082565b60ff166001901b83602001511614610cf357801983168260200181815117915081815250505b610d018a6020015183610f2a565b50505050505050505050565b60008060bc61ffff16856000016020810190610d2991906124f0565b61ffff161415610d40576000915060029050610e0e565b60bd61ffff16856000016020810190610d5991906124f0565b61ffff161415610d70576001915060039050610e0d565b60be61ffff16856000016020810190610d8991906124f0565b61ffff161415610da0576002915060009050610e0c565b60bf61ffff16856000016020810190610db991906124f0565b61ffff161415610dd0576003915060019050610e0b565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0290612c75565b60405180910390fd5b5b5b5b6000610e1d8860200151610ed1565b9050816007811115610e3257610e316132cd565b5b81600001516007811115610e4957610e486132cd565b5b14610e89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8090612c95565b60405180910390fd5b8281600001906007811115610ea157610ea06132cd565b5b90816007811115610eb557610eb46132cd565b5b81525050610ec7886020015182610f2a565b5050505050505050565b610ed9611af0565b610ee68260000151611802565b9050919050565b610ef5611af0565b604051806040016040528060006007811115610f1457610f136132cd565b5b81526020018363ffffffff168152509050919050565b610f38826000015182611911565b5050565b6000808260200151905060006007811115610f5a57610f596132cd565b5b83600001516007811115610f7157610f706132cd565b5b14610fb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa890612d35565b60405180910390fd5b6401000000008110610ff8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fef90612d15565b60405180910390fd5b80915050919050565b6000806380000000831663ffffffff161461102e5767ffffffff000000008263ffffffff16179050611038565b8163ffffffff1690505b919050565b60008061ffff168261ffff16141561106d578267ffffffffffffffff168467ffffffffffffffff1614905061121c565b600161ffff168261ffff16141561109d578267ffffffffffffffff168467ffffffffffffffff161415905061121c565b600261ffff168261ffff1614156110be578260070b8460070b12905061121c565b600361ffff168261ffff1614156110ed578267ffffffffffffffff168467ffffffffffffffff1610905061121c565b600461ffff168261ffff16141561110e578260070b8460070b13905061121c565b600561ffff168261ffff16141561113d578267ffffffffffffffff168467ffffffffffffffff1611905061121c565b600661ffff168261ffff16141561115f578260070b8460070b1315905061121c565b600761ffff168261ffff16141561118f578267ffffffffffffffff168467ffffffffffffffff161115905061121c565b600861ffff168261ffff1614156111b1578260070b8460070b1215905061121c565b600961ffff168261ffff1614156111e1578267ffffffffffffffff168467ffffffffffffffff161015905061121c565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121390612bf5565b60405180910390fd5b9392505050565b61122b611af0565b81156112425761123b6001610eed565b905061124f565b61124c6000610eed565b90505b919050565b600060208261ffff16148061126d575060408261ffff16145b6112ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a390612c55565b60405180910390fd5b600061ffff168361ffff1614156113305760008261ffff1690505b60008163ffffffff161180156112ff575060006001826112e7919061301a565b63ffffffff166001901b8667ffffffffffffffff1616145b1561131857600181611311919061301a565b90506112c7565b808361ffff16611328919061301a565b915050611442565b600161ffff168361ffff1614156113955760005b8261ffff168163ffffffff16108015611373575060008163ffffffff166001901b8667ffffffffffffffff1616145b1561138c576001816113859190612f78565b9050611344565b80915050611442565b600261ffff168361ffff161415611407576000805b8361ffff168263ffffffff1610156113fd5760008263ffffffff166001901b8767ffffffffffffffff1616146113ea576001816113e79190612f78565b90505b81806113f5906131e0565b9250506113aa565b8092505050611442565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143990612cf5565b60405180910390fd5b9392505050565b6000602082611458919061320d565b9150816020611467919061301a565b63ffffffff168363ffffffff16901c8263ffffffff168463ffffffff16901b17905092915050565b600060208261149e919061320d565b91508160206114ad919061301a565b63ffffffff168363ffffffff16901b8263ffffffff168463ffffffff16901c17905092915050565b6000808261ffff1614156114ed578284019050611645565b60018261ffff161415611504578284039050611645565b60028261ffff16141561151b578284029050611645565b60048261ffff1614156115705760008367ffffffffffffffff1614156115445760009050611645565b8267ffffffffffffffff168467ffffffffffffffff16816115685761156761329e565b5b049050611645565b60068261ffff1614156115c55760008367ffffffffffffffff1614156115995760009050611645565b8267ffffffffffffffff168467ffffffffffffffff16816115bd576115bc61329e565b5b069050611645565b60078261ffff1614156115dc578284169050611645565b60088261ffff1614156115f3578284179050611645565b60098261ffff16141561160a578284189050611645565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163c90612cd5565b60405180910390fd5b9392505050565b600080826020015190506001600781111561166a576116696132cd565b5b83600001516007811115611681576116806132cd565b5b146116c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b890612bd5565b60405180910390fd5b68010000000000000000811061170c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170390612cb5565b60405180910390fd5b80915050919050565b61171d611af0565b60405180604001604052806001600781111561173c5761173b6132cd565b5b81526020018367ffffffffffffffff168152509050919050565b6000604082611765919061323e565b9150816040611774919061304e565b67ffffffffffffffff168367ffffffffffffffff16901c8267ffffffffffffffff168467ffffffffffffffff16901b17905092915050565b60006040826117bb919061323e565b91508160406117ca919061304e565b67ffffffffffffffff168367ffffffffffffffff16901b8267ffffffffffffffff168467ffffffffffffffff16901c17905092915050565b61180a611af0565b816000015160018360000151516118219190612fe6565b81518110611832576118316132fc565b5b60200260200101519050600060018360000151516118509190612fe6565b67ffffffffffffffff8111156118695761186861332b565b5b6040519080825280602002602001820160405280156118a257816020015b61188f611af0565b8152602001906001900390816118875790505b50905060005b815181101561190157836000015181815181106118c8576118c76132fc565b5b60200260200101518282815181106118e3576118e26132fc565b5b602002602001018190525080806118f990613197565b9150506118a8565b5080836000018190525050919050565b600060018360000151516119259190612f22565b67ffffffffffffffff81111561193e5761193d61332b565b5b60405190808252806020026020018201604052801561197757816020015b611964611af0565b81526020019060019003908161195c5790505b50905060005b8360000151518110156119da57836000015181815181106119a1576119a06132fc565b5b60200260200101518282815181106119bc576119bb6132fc565b5b602002602001018190525080806119d290613197565b91505061197d565b508181846000015151815181106119f4576119f36132fc565b5b6020026020010181905250808360000181905250505050565b60405180610140016040528060006003811115611a2d57611a2c6132cd565b5b8152602001611a3a611b1c565b8152602001611a47611b1c565b8152602001611a54611b3f565b8152602001611a61611b62565b815260200160008019168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600080191681525090565b6040518060a0016040528060008019168152602001611abf611b7f565b81526020016000801916815260200160008019168152602001600063ffffffff1681525090565b611aee61335a565b565b604051806040016040528060006007811115611b0f57611b0e6132cd565b5b8152602001600081525090565b6040518060400160405280611b2f611ba6565b8152602001600080191681525090565b6040518060400160405280611b52611bb9565b8152602001600080191681525090565b604051806040016040528060608152602001600080191681525090565b6040518060400160405280600067ffffffffffffffff168152602001600080191681525090565b6040518060200160405280606081525090565b6040518060200160405280606081525090565b6000611bdf611bda84612daa565b612d85565b905080838252602082019050828560a0860282011115611c0257611c016133a2565b5b60005b85811015611c325781611c18888261222a565b845260208401935060a08301925050600181019050611c05565b5050509392505050565b6000611c4f611c4a84612dd6565b612d85565b90508083825260208201905082856040860282011115611c7257611c716133a2565b5b60005b85811015611ca25781611c888882612366565b845260208401935060408301925050600181019050611c75565b5050509392505050565b6000611cbf611cba84612e02565b612d85565b90508083825260208201905082856020860282011115611ce257611ce16133a2565b5b60005b85811015611d125781611cf888826123e0565b845260208401935060208301925050600181019050611ce5565b5050509392505050565b600082601f830112611d3157611d3061338e565b5b8135611d41848260208601611bcc565b91505092915050565b600082601f830112611d5f57611d5e61338e565b5b8135611d6f848260208601611c3c565b91505092915050565b600082601f830112611d8d57611d8c61338e565b5b8135611d9d848260208601611cac565b91505092915050565b600081359050611db5816135ff565b92915050565b60008083601f840112611dd157611dd061338e565b5b8235905067ffffffffffffffff811115611dee57611ded613389565b5b602083019150836001820283011115611e0a57611e096133a2565b5b9250929050565b600081359050611e2081613616565b92915050565b600081359050611e3581613626565b92915050565b600060208284031215611e5157611e50613393565b5b81905092915050565b600060408284031215611e7057611e6f613393565b5b81905092915050565b60006101408284031215611e9057611e8f613393565b5b81905092915050565b60006101408284031215611eb057611eaf613398565b5b611ebb610140612d85565b90506000611ecb84828501611e11565b600083015250602082013567ffffffffffffffff811115611eef57611eee61339d565b5b611efb848285016122fa565b602083015250604082013567ffffffffffffffff811115611f1f57611f1e61339d565b5b611f2b848285016122fa565b604083015250606082013567ffffffffffffffff811115611f4f57611f4e61339d565b5b611f5b84828501612152565b606083015250608082013567ffffffffffffffff811115611f7f57611f7e61339d565b5b611f8b848285016121be565b60808301525060a0611f9f84828501611da6565b60a08301525060c0611fb3848285016123e0565b60c08301525060e0611fc7848285016123e0565b60e083015250610100611fdc848285016123e0565b61010083015250610120611ff284828501611da6565b6101208301525092915050565b60006040828403121561201557612014613398565b5b61201f6040612d85565b9050600061202f848285016123f5565b600083015250602061204384828501611da6565b60208301525092915050565b600060c0828403121561206557612064613393565b5b81905092915050565b600060c0828403121561208457612083613398565b5b61208e60a0612d85565b9050600061209e84828501611da6565b60008301525060206120b284828501611fff565b60208301525060606120c684828501611da6565b60408301525060806120da84828501611da6565b60608301525060a06120ee848285016123e0565b60808301525092915050565b6000602082840312156121105761210f613398565b5b61211a6020612d85565b9050600082013567ffffffffffffffff81111561213a5761213961339d565b5b61214684828501611d78565b60008301525092915050565b60006040828403121561216857612167613398565b5b6121726040612d85565b9050600082013567ffffffffffffffff8111156121925761219161339d565b5b61219e848285016120fa565b60008301525060206121b284828501611da6565b60208301525092915050565b6000604082840312156121d4576121d3613398565b5b6121de6040612d85565b9050600082013567ffffffffffffffff8111156121fe576121fd61339d565b5b61220a84828501611d1c565b600083015250602061221e84828501611da6565b60208301525092915050565b600060a082840312156122405761223f613398565b5b61224a6080612d85565b9050600061225a84828501612366565b600083015250604061226e84828501611da6565b6020830152506060612282848285016123e0565b6040830152506080612296848285016123e0565b60608301525092915050565b6000602082840312156122b8576122b7613398565b5b6122c26020612d85565b9050600082013567ffffffffffffffff8111156122e2576122e161339d565b5b6122ee84828501611d4a565b60008301525092915050565b6000604082840312156123105761230f613398565b5b61231a6040612d85565b9050600082013567ffffffffffffffff81111561233a5761233961339d565b5b612346848285016122a2565b600083015250602061235a84828501611da6565b60208301525092915050565b60006040828403121561237c5761237b613398565b5b6123866040612d85565b9050600061239684828501611e26565b60008301525060206123aa848285016123cb565b60208301525092915050565b6000813590506123c581613636565b92915050565b6000813590506123da8161364d565b92915050565b6000813590506123ef81613664565b92915050565b6000813590506124048161367b565b92915050565b6000806000806000806101608789031215612428576124276133ac565b5b600061243689828a01611e3b565b965050602087013567ffffffffffffffff811115612457576124566133a7565b5b61246389828a01611e79565b955050604061247489828a0161204f565b94505061010061248689828a01611e5a565b93505061014087013567ffffffffffffffff8111156124a8576124a76133a7565b5b6124b489828a01611dbb565b92509250509295509295509295565b600060c082840312156124d9576124d86133ac565b5b60006124e78482850161206e565b91505092915050565b600060208284031215612506576125056133ac565b5b6000612514848285016123b6565b91505092915050565b60006125298383612a9d565b60a08301905092915050565b60006125418383612b59565b60408301905092915050565b60006125598383612b97565b60208301905092915050565b600061257082612e5e565b61257a8185612ea6565b935061258583612e2e565b8060005b838110156125b657815161259d888261251d565b97506125a883612e7f565b925050600181019050612589565b5085935050505092915050565b60006125ce82612e69565b6125d88185612eb7565b93506125e383612e3e565b8060005b838110156126145781516125fb8882612535565b975061260683612e8c565b9250506001810190506125e7565b5085935050505092915050565b600061262c82612e74565b6126368185612ec8565b935061264183612e4e565b8060005b83811015612672578151612659888261254d565b975061266483612e99565b925050600181019050612645565b5085935050505092915050565b612688816130b6565b82525050565b6126978161312f565b82525050565b6126a681613141565b82525050565b60006126b9601883612ed9565b91506126c4826133c2565b602082019050919050565b60006126dc600783612ed9565b91506126e7826133eb565b602082019050919050565b60006126ff600a83612ed9565b915061270a82613414565b602082019050919050565b6000612722600e83612ed9565b915061272d8261343d565b602082019050919050565b6000612745601983612ed9565b915061275082613466565b602082019050919050565b6000612768601883612ed9565b91506127738261348f565b602082019050919050565b600061278b601383612ed9565b9150612796826134b8565b602082019050919050565b60006127ae601883612ed9565b91506127b9826134e1565b602082019050919050565b60006127d1600783612ed9565b91506127dc8261350a565b602082019050919050565b60006127f4601683612ed9565b91506127ff82613533565b602082019050919050565b6000612817600983612ed9565b91506128228261355c565b602082019050919050565b600061283a600783612ed9565b915061284582613585565b602082019050919050565b600061285d600783612ed9565b9150612868826135ae565b602082019050919050565b60006101408301600083015161288c600086018261268e565b50602083015184820360208601526128a48282612b1c565b915050604083015184820360408601526128be8282612b1c565b915050606083015184820360608601526128d88282612a23565b915050608083015184820360808601526128f28282612a60565b91505060a083015161290760a086018261267f565b5060c083015161291a60c0860182612b97565b5060e083015161292d60e0860182612b97565b50610100830151612942610100860182612b97565b5061012083015161295761012086018261267f565b508091505092915050565b6040820160008201516129786000850182612ba6565b50602082015161298b602085018261267f565b50505050565b60c0820160008201516129a7600085018261267f565b5060208201516129ba6020850182612962565b5060408201516129cd606085018261267f565b5060608201516129e0608085018261267f565b5060808201516129f360a0850182612b97565b50505050565b60006020830160008301518482036000860152612a168282612621565b9150508091505092915050565b60006040830160008301518482036000860152612a4082826129f9565b9150506020830151612a55602086018261267f565b508091505092915050565b60006040830160008301518482036000860152612a7d8282612565565b9150506020830151612a92602086018261267f565b508091505092915050565b60a082016000820151612ab36000850182612b59565b506020820151612ac6604085018261267f565b506040820151612ad96060850182612b97565b506060820151612aec6080850182612b97565b50505050565b60006020830160008301518482036000860152612b0f82826125c3565b9150508091505092915050565b60006040830160008301518482036000860152612b398282612af2565b9150506020830151612b4e602086018261267f565b508091505092915050565b604082016000820151612b6f600085018261269d565b506020820151612b826020850182612b88565b50505050565b612b91816130f4565b82525050565b612ba0816130fe565b82525050565b612baf8161310e565b82525050565b60006020820190508181036000830152612bce816126ac565b9050919050565b60006020820190508181036000830152612bee816126cf565b9050919050565b60006020820190508181036000830152612c0e816126f2565b9050919050565b60006020820190508181036000830152612c2e81612715565b9050919050565b60006020820190508181036000830152612c4e81612738565b9050919050565b60006020820190508181036000830152612c6e8161275b565b9050919050565b60006020820190508181036000830152612c8e8161277e565b9050919050565b60006020820190508181036000830152612cae816127a1565b9050919050565b60006020820190508181036000830152612cce816127c4565b9050919050565b60006020820190508181036000830152612cee816127e7565b9050919050565b60006020820190508181036000830152612d0e8161280a565b9050919050565b60006020820190508181036000830152612d2e8161282d565b9050919050565b60006020820190508181036000830152612d4e81612850565b9050919050565b600060e0820190508181036000830152612d6f8185612873565b9050612d7e6020830184612991565b9392505050565b6000612d8f612da0565b9050612d9b8282613166565b919050565b6000604051905090565b600067ffffffffffffffff821115612dc557612dc461332b565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612df157612df061332b565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612e1d57612e1c61332b565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612ef5826130e6565b9150612f00836130e6565b92508261ffff03821115612f1757612f1661326f565b5b828201905092915050565b6000612f2d826130f4565b9150612f38836130f4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612f6d57612f6c61326f565b5b828201905092915050565b6000612f83826130fe565b9150612f8e836130fe565b92508263ffffffff03821115612fa757612fa661326f565b5b828201905092915050565b6000612fbd826130e6565b9150612fc8836130e6565b925082821015612fdb57612fda61326f565b5b828203905092915050565b6000612ff1826130f4565b9150612ffc836130f4565b92508282101561300f5761300e61326f565b5b828203905092915050565b6000613025826130fe565b9150613030836130fe565b9250828210156130435761304261326f565b5b828203905092915050565b60006130598261310e565b91506130648361310e565b9250828210156130775761307661326f565b5b828203905092915050565b600061308d82613122565b915061309883613122565b9250828210156130ab576130aa61326f565b5b828203905092915050565b6000819050919050565b60008190506130ce826135d7565b919050565b60008190506130e1826135eb565b919050565b600061ffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b600061313a826130c0565b9050919050565b600061314c826130d3565b9050919050565b600061315f3683611e99565b9050919050565b61316f826133b1565b810181811067ffffffffffffffff8211171561318e5761318d61332b565b5b80604052505050565b60006131a2826130f4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156131d5576131d461326f565b5b600182019050919050565b60006131eb826130fe565b915063ffffffff8214156132025761320161326f565b5b600182019050919050565b6000613218826130fe565b9150613223836130fe565b9250826132335761323261329e565b5b828206905092915050565b60006132498261310e565b91506132548361310e565b9250826132645761326361329e565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f494e56414c49445f455854454e445f53414d455f545950450000000000000000600082015250565b7f4e4f545f49363400000000000000000000000000000000000000000000000000600082015250565b7f424144204952454c4f5000000000000000000000000000000000000000000000600082015250565b7f494e56414c49445f4f50434f4445000000000000000000000000000000000000600082015250565b7f4241445f455854454e445f53414d455f545950455f5459504500000000000000600082015250565b7f57524f4e4720555345204f462067656e65726963556e4f700000000000000000600082015250565b7f494e56414c49445f5245494e5445525052455400000000000000000000000000600082015250565b7f494e56414c49445f5245494e544552505245545f545950450000000000000000600082015250565b7f4241445f49363400000000000000000000000000000000000000000000000000600082015250565b7f494e56414c49445f47454e455249435f42494e5f4f5000000000000000000000600082015250565b7f4241442049556e4f700000000000000000000000000000000000000000000000600082015250565b7f4241445f49333200000000000000000000000000000000000000000000000000600082015250565b7f4e4f545f49333200000000000000000000000000000000000000000000000000600082015250565b600481106135e8576135e76132cd565b5b50565b600881106135fc576135fb6132cd565b5b50565b613608816130b6565b811461361357600080fd5b50565b6004811061362357600080fd5b50565b6008811061363357600080fd5b50565b61363f816130e6565b811461364a57600080fd5b50565b613656816130f4565b811461366157600080fd5b50565b61366d816130fe565b811461367857600080fd5b50565b6136848161310e565b811461368f57600080fd5b5056fea2646970667358221220be882d78e7ca639121d256a0ce77158650d123dcfa45ceca889ddbcde52b6ebf64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c4017b3814610030575b600080fd5b61004a6004803603810190610045919061240a565b610061565b604051610058929190612d55565b60405180910390f35b610069611a0d565b610071611aa2565b8661007b90613153565b91508580360381019061008e91906124c3565b905060008560000160208101906100a591906124f0565b9050611ae6604561ffff168261ffff1614806100c95750605061ffff168261ffff16145b156100d85761033c905061031e565b604661ffff168261ffff16101580156101065750600960466100fa9190612eea565b61ffff168261ffff1611155b1561011557610388905061031d565b606761ffff168261ffff16101580156101435750600260676101379190612eea565b61ffff168261ffff1611155b156101525761048a905061031c565b606a61ffff168261ffff16101580156101745750607861ffff168261ffff1611155b15610183576104fc905061031b565b605161ffff168261ffff16101580156101b15750600960516101a59190612eea565b61ffff168261ffff1611155b156101c0576106ee905061031a565b607961ffff168261ffff16101580156101ee5750600260796101e29190612eea565b61ffff168261ffff1611155b156101fd576107739050610319565b607c61ffff168261ffff161015801561021f5750608a61ffff168261ffff1611155b1561022e576107e59050610318565b60a761ffff168261ffff161415610249576109ef9050610317565b60ac61ffff168261ffff161480610268575060ad61ffff168261ffff16145b1561027757610a2c9050610316565b60c061ffff168261ffff1610158015610299575060c461ffff168261ffff1611155b156102a857610aa39050610315565b60bc61ffff168261ffff16101580156102ca575060bf61ffff168261ffff1611155b156102d957610d0d9050610314565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030b90612c15565b60405180910390fd5b5b5b5b5b5b5b5b5b5b5b61032f84848989898663ffffffff16565b5050965096945050505050565b600061034b8660200151610ed1565b9050600080826020015114156103645760019050610369565b600090505b61037f876020015161037a83610eed565b610f2a565b50505050505050565b600061039f61039a8760200151610ed1565b610f3c565b905060006103b86103b38860200151610ed1565b610f3c565b9050600060468660000160208101906103d191906124f0565b6103db9190612fb2565b9050600080600261ffff168361ffff1614806103ff5750600461ffff168361ffff16145b806104125750600661ffff168361ffff16145b806104255750600861ffff168361ffff16145b156104455761043384611001565b915061043e85611001565b9050610458565b8363ffffffff1691508463ffffffff1690505b600061046583838661103d565b905061047d8b6020015161047883611223565b610f2a565b5050505050505050505050565b60006104a161049c8760200151610ed1565b610f3c565b9050600060678560000160208101906104ba91906124f0565b6104c49190612fb2565b905060006104da8363ffffffff16836020611254565b90506104f288602001516104ed83610eed565b610f2a565b5050505050505050565b600061051361050e8760200151610ed1565b610f3c565b9050600061052c6105278860200151610ed1565b610f3c565b9050600080606a87600001602081019061054691906124f0565b6105509190612fb2565b905060038161ffff1614156105965760008463ffffffff1614156105775760009150610591565b8360030b8360030b8161058d5761058c61329e565b5b0591505b6106cd565b60058161ffff1614156105da5760008463ffffffff1614156105bb57600091506105d5565b8360030b8360030b816105d1576105d061329e565b5b0791505b6106cc565b600a8161ffff1614156106155760208463ffffffff16816105fe576105fd61329e565b5b0663ffffffff168363ffffffff16901b91506106cb565b600c8161ffff1614156106505760208463ffffffff16816106395761063861329e565b5b0663ffffffff168363ffffffff16901c91506106ca565b600b8161ffff161415610671578363ffffffff168360030b901d91506106c9565b600d8161ffff16141561068f576106888385611449565b91506106c8565b600e8161ffff1614156106ad576106a6838561148f565b91506106c7565b6106c48363ffffffff168563ffffffff16836114d5565b91505b5b5b5b5b5b5b6106e389602001516106de84610eed565b610f2a565b505050505050505050565b60006107056107008760200151610ed1565b61164c565b9050600061071e6107198860200151610ed1565b61164c565b90506000605186600001602081019061073791906124f0565b6107419190612fb2565b9050600061075083858461103d565b9050610768896020015161076383611223565b610f2a565b505050505050505050565b600061078a6107858760200151610ed1565b61164c565b9050600060798560000160208101906107a391906124f0565b6107ad9190612fb2565b905060006107bd83836040611254565b63ffffffff1690506107db88602001516107d683611715565b610f2a565b5050505050505050565b60006107fc6107f78760200151610ed1565b61164c565b905060006108156108108860200151610ed1565b61164c565b9050600080607c87600001602081019061082f91906124f0565b6108399190612fb2565b905060038161ffff1614156108835760008467ffffffffffffffff161415610864576000915061087e565b8360070b8360070b8161087a5761087961329e565b5b0591505b6109ce565b60058161ffff1614156108cb5760008467ffffffffffffffff1614156108ac57600091506108c6565b8360070b8360070b816108c2576108c161329e565b5b0791505b6109cd565b600a8161ffff1614156109125760408467ffffffffffffffff16816108f3576108f261329e565b5b0667ffffffffffffffff168367ffffffffffffffff16901b91506109cc565b600c8161ffff1614156109595760408467ffffffffffffffff168161093a5761093961329e565b5b0667ffffffffffffffff168367ffffffffffffffff16901c91506109cb565b600b8161ffff16141561097e578367ffffffffffffffff168360070b901d91506109ca565b600d8161ffff16141561099c576109958385611756565b91506109c9565b600e8161ffff1614156109ba576109b383856117ac565b91506109c8565b6109c58385836114d5565b91505b5b5b5b5b5b5b6109e489602001516109df84611715565b610f2a565b505050505050505050565b6000610a06610a018760200151610ed1565b61164c565b90506000819050610a238760200151610a1e83610eed565b610f2a565b50505050505050565b6000610a43610a3e8760200151610ed1565b610f3c565b9050600060ac61ffff16856000016020810190610a6091906124f0565b61ffff161415610a7a57610a7382611001565b9050610a84565b8163ffffffff1690505b610a9a8760200151610a9583611715565b610f2a565b50505050505050565b60008060c061ffff16856000016020810190610abf91906124f0565b61ffff161415610ad6576000915060089050610bd5565b60c161ffff16856000016020810190610aef91906124f0565b61ffff161415610b06576000915060109050610bd4565b60c261ffff16856000016020810190610b1f91906124f0565b61ffff161415610b36576001915060089050610bd3565b60c361ffff16856000016020810190610b4f91906124f0565b61ffff161415610b66576001915060109050610bd2565b60c461ffff16856000016020810190610b7f91906124f0565b61ffff161415610b96576001915060209050610bd1565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc890612bb5565b60405180910390fd5b5b5b5b5b6000806007811115610bea57610be96132cd565b5b836007811115610bfd57610bfc6132cd565b5b1415610c0f5763ffffffff9050610c1b565b67ffffffffffffffff90505b6000610c2a8960200151610ed1565b9050836007811115610c3f57610c3e6132cd565b5b81600001516007811115610c5657610c556132cd565b5b14610c96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8d90612c35565b60405180910390fd5b600060018460ff166001901b610cac9190612fe6565b9050808260200181815116915081815250506000600185610ccd9190613082565b60ff166001901b83602001511614610cf357801983168260200181815117915081815250505b610d018a6020015183610f2a565b50505050505050505050565b60008060bc61ffff16856000016020810190610d2991906124f0565b61ffff161415610d40576000915060029050610e0e565b60bd61ffff16856000016020810190610d5991906124f0565b61ffff161415610d70576001915060039050610e0d565b60be61ffff16856000016020810190610d8991906124f0565b61ffff161415610da0576002915060009050610e0c565b60bf61ffff16856000016020810190610db991906124f0565b61ffff161415610dd0576003915060019050610e0b565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0290612c75565b60405180910390fd5b5b5b5b6000610e1d8860200151610ed1565b9050816007811115610e3257610e316132cd565b5b81600001516007811115610e4957610e486132cd565b5b14610e89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8090612c95565b60405180910390fd5b8281600001906007811115610ea157610ea06132cd565b5b90816007811115610eb557610eb46132cd565b5b81525050610ec7886020015182610f2a565b5050505050505050565b610ed9611af0565b610ee68260000151611802565b9050919050565b610ef5611af0565b604051806040016040528060006007811115610f1457610f136132cd565b5b81526020018363ffffffff168152509050919050565b610f38826000015182611911565b5050565b6000808260200151905060006007811115610f5a57610f596132cd565b5b83600001516007811115610f7157610f706132cd565b5b14610fb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa890612d35565b60405180910390fd5b6401000000008110610ff8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fef90612d15565b60405180910390fd5b80915050919050565b6000806380000000831663ffffffff161461102e5767ffffffff000000008263ffffffff16179050611038565b8163ffffffff1690505b919050565b60008061ffff168261ffff16141561106d578267ffffffffffffffff168467ffffffffffffffff1614905061121c565b600161ffff168261ffff16141561109d578267ffffffffffffffff168467ffffffffffffffff161415905061121c565b600261ffff168261ffff1614156110be578260070b8460070b12905061121c565b600361ffff168261ffff1614156110ed578267ffffffffffffffff168467ffffffffffffffff1610905061121c565b600461ffff168261ffff16141561110e578260070b8460070b13905061121c565b600561ffff168261ffff16141561113d578267ffffffffffffffff168467ffffffffffffffff1611905061121c565b600661ffff168261ffff16141561115f578260070b8460070b1315905061121c565b600761ffff168261ffff16141561118f578267ffffffffffffffff168467ffffffffffffffff161115905061121c565b600861ffff168261ffff1614156111b1578260070b8460070b1215905061121c565b600961ffff168261ffff1614156111e1578267ffffffffffffffff168467ffffffffffffffff161015905061121c565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121390612bf5565b60405180910390fd5b9392505050565b61122b611af0565b81156112425761123b6001610eed565b905061124f565b61124c6000610eed565b90505b919050565b600060208261ffff16148061126d575060408261ffff16145b6112ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a390612c55565b60405180910390fd5b600061ffff168361ffff1614156113305760008261ffff1690505b60008163ffffffff161180156112ff575060006001826112e7919061301a565b63ffffffff166001901b8667ffffffffffffffff1616145b1561131857600181611311919061301a565b90506112c7565b808361ffff16611328919061301a565b915050611442565b600161ffff168361ffff1614156113955760005b8261ffff168163ffffffff16108015611373575060008163ffffffff166001901b8667ffffffffffffffff1616145b1561138c576001816113859190612f78565b9050611344565b80915050611442565b600261ffff168361ffff161415611407576000805b8361ffff168263ffffffff1610156113fd5760008263ffffffff166001901b8767ffffffffffffffff1616146113ea576001816113e79190612f78565b90505b81806113f5906131e0565b9250506113aa565b8092505050611442565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143990612cf5565b60405180910390fd5b9392505050565b6000602082611458919061320d565b9150816020611467919061301a565b63ffffffff168363ffffffff16901c8263ffffffff168463ffffffff16901b17905092915050565b600060208261149e919061320d565b91508160206114ad919061301a565b63ffffffff168363ffffffff16901b8263ffffffff168463ffffffff16901c17905092915050565b6000808261ffff1614156114ed578284019050611645565b60018261ffff161415611504578284039050611645565b60028261ffff16141561151b578284029050611645565b60048261ffff1614156115705760008367ffffffffffffffff1614156115445760009050611645565b8267ffffffffffffffff168467ffffffffffffffff16816115685761156761329e565b5b049050611645565b60068261ffff1614156115c55760008367ffffffffffffffff1614156115995760009050611645565b8267ffffffffffffffff168467ffffffffffffffff16816115bd576115bc61329e565b5b069050611645565b60078261ffff1614156115dc578284169050611645565b60088261ffff1614156115f3578284179050611645565b60098261ffff16141561160a578284189050611645565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163c90612cd5565b60405180910390fd5b9392505050565b600080826020015190506001600781111561166a576116696132cd565b5b83600001516007811115611681576116806132cd565b5b146116c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b890612bd5565b60405180910390fd5b68010000000000000000811061170c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170390612cb5565b60405180910390fd5b80915050919050565b61171d611af0565b60405180604001604052806001600781111561173c5761173b6132cd565b5b81526020018367ffffffffffffffff168152509050919050565b6000604082611765919061323e565b9150816040611774919061304e565b67ffffffffffffffff168367ffffffffffffffff16901c8267ffffffffffffffff168467ffffffffffffffff16901b17905092915050565b60006040826117bb919061323e565b91508160406117ca919061304e565b67ffffffffffffffff168367ffffffffffffffff16901b8267ffffffffffffffff168467ffffffffffffffff16901c17905092915050565b61180a611af0565b816000015160018360000151516118219190612fe6565b81518110611832576118316132fc565b5b60200260200101519050600060018360000151516118509190612fe6565b67ffffffffffffffff8111156118695761186861332b565b5b6040519080825280602002602001820160405280156118a257816020015b61188f611af0565b8152602001906001900390816118875790505b50905060005b815181101561190157836000015181815181106118c8576118c76132fc565b5b60200260200101518282815181106118e3576118e26132fc565b5b602002602001018190525080806118f990613197565b9150506118a8565b5080836000018190525050919050565b600060018360000151516119259190612f22565b67ffffffffffffffff81111561193e5761193d61332b565b5b60405190808252806020026020018201604052801561197757816020015b611964611af0565b81526020019060019003908161195c5790505b50905060005b8360000151518110156119da57836000015181815181106119a1576119a06132fc565b5b60200260200101518282815181106119bc576119bb6132fc565b5b602002602001018190525080806119d290613197565b91505061197d565b508181846000015151815181106119f4576119f36132fc565b5b6020026020010181905250808360000181905250505050565b60405180610140016040528060006003811115611a2d57611a2c6132cd565b5b8152602001611a3a611b1c565b8152602001611a47611b1c565b8152602001611a54611b3f565b8152602001611a61611b62565b815260200160008019168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600080191681525090565b6040518060a0016040528060008019168152602001611abf611b7f565b81526020016000801916815260200160008019168152602001600063ffffffff1681525090565b611aee61335a565b565b604051806040016040528060006007811115611b0f57611b0e6132cd565b5b8152602001600081525090565b6040518060400160405280611b2f611ba6565b8152602001600080191681525090565b6040518060400160405280611b52611bb9565b8152602001600080191681525090565b604051806040016040528060608152602001600080191681525090565b6040518060400160405280600067ffffffffffffffff168152602001600080191681525090565b6040518060200160405280606081525090565b6040518060200160405280606081525090565b6000611bdf611bda84612daa565b612d85565b905080838252602082019050828560a0860282011115611c0257611c016133a2565b5b60005b85811015611c325781611c18888261222a565b845260208401935060a08301925050600181019050611c05565b5050509392505050565b6000611c4f611c4a84612dd6565b612d85565b90508083825260208201905082856040860282011115611c7257611c716133a2565b5b60005b85811015611ca25781611c888882612366565b845260208401935060408301925050600181019050611c75565b5050509392505050565b6000611cbf611cba84612e02565b612d85565b90508083825260208201905082856020860282011115611ce257611ce16133a2565b5b60005b85811015611d125781611cf888826123e0565b845260208401935060208301925050600181019050611ce5565b5050509392505050565b600082601f830112611d3157611d3061338e565b5b8135611d41848260208601611bcc565b91505092915050565b600082601f830112611d5f57611d5e61338e565b5b8135611d6f848260208601611c3c565b91505092915050565b600082601f830112611d8d57611d8c61338e565b5b8135611d9d848260208601611cac565b91505092915050565b600081359050611db5816135ff565b92915050565b60008083601f840112611dd157611dd061338e565b5b8235905067ffffffffffffffff811115611dee57611ded613389565b5b602083019150836001820283011115611e0a57611e096133a2565b5b9250929050565b600081359050611e2081613616565b92915050565b600081359050611e3581613626565b92915050565b600060208284031215611e5157611e50613393565b5b81905092915050565b600060408284031215611e7057611e6f613393565b5b81905092915050565b60006101408284031215611e9057611e8f613393565b5b81905092915050565b60006101408284031215611eb057611eaf613398565b5b611ebb610140612d85565b90506000611ecb84828501611e11565b600083015250602082013567ffffffffffffffff811115611eef57611eee61339d565b5b611efb848285016122fa565b602083015250604082013567ffffffffffffffff811115611f1f57611f1e61339d565b5b611f2b848285016122fa565b604083015250606082013567ffffffffffffffff811115611f4f57611f4e61339d565b5b611f5b84828501612152565b606083015250608082013567ffffffffffffffff811115611f7f57611f7e61339d565b5b611f8b848285016121be565b60808301525060a0611f9f84828501611da6565b60a08301525060c0611fb3848285016123e0565b60c08301525060e0611fc7848285016123e0565b60e083015250610100611fdc848285016123e0565b61010083015250610120611ff284828501611da6565b6101208301525092915050565b60006040828403121561201557612014613398565b5b61201f6040612d85565b9050600061202f848285016123f5565b600083015250602061204384828501611da6565b60208301525092915050565b600060c0828403121561206557612064613393565b5b81905092915050565b600060c0828403121561208457612083613398565b5b61208e60a0612d85565b9050600061209e84828501611da6565b60008301525060206120b284828501611fff565b60208301525060606120c684828501611da6565b60408301525060806120da84828501611da6565b60608301525060a06120ee848285016123e0565b60808301525092915050565b6000602082840312156121105761210f613398565b5b61211a6020612d85565b9050600082013567ffffffffffffffff81111561213a5761213961339d565b5b61214684828501611d78565b60008301525092915050565b60006040828403121561216857612167613398565b5b6121726040612d85565b9050600082013567ffffffffffffffff8111156121925761219161339d565b5b61219e848285016120fa565b60008301525060206121b284828501611da6565b60208301525092915050565b6000604082840312156121d4576121d3613398565b5b6121de6040612d85565b9050600082013567ffffffffffffffff8111156121fe576121fd61339d565b5b61220a84828501611d1c565b600083015250602061221e84828501611da6565b60208301525092915050565b600060a082840312156122405761223f613398565b5b61224a6080612d85565b9050600061225a84828501612366565b600083015250604061226e84828501611da6565b6020830152506060612282848285016123e0565b6040830152506080612296848285016123e0565b60608301525092915050565b6000602082840312156122b8576122b7613398565b5b6122c26020612d85565b9050600082013567ffffffffffffffff8111156122e2576122e161339d565b5b6122ee84828501611d4a565b60008301525092915050565b6000604082840312156123105761230f613398565b5b61231a6040612d85565b9050600082013567ffffffffffffffff81111561233a5761233961339d565b5b612346848285016122a2565b600083015250602061235a84828501611da6565b60208301525092915050565b60006040828403121561237c5761237b613398565b5b6123866040612d85565b9050600061239684828501611e26565b60008301525060206123aa848285016123cb565b60208301525092915050565b6000813590506123c581613636565b92915050565b6000813590506123da8161364d565b92915050565b6000813590506123ef81613664565b92915050565b6000813590506124048161367b565b92915050565b6000806000806000806101608789031215612428576124276133ac565b5b600061243689828a01611e3b565b965050602087013567ffffffffffffffff811115612457576124566133a7565b5b61246389828a01611e79565b955050604061247489828a0161204f565b94505061010061248689828a01611e5a565b93505061014087013567ffffffffffffffff8111156124a8576124a76133a7565b5b6124b489828a01611dbb565b92509250509295509295509295565b600060c082840312156124d9576124d86133ac565b5b60006124e78482850161206e565b91505092915050565b600060208284031215612506576125056133ac565b5b6000612514848285016123b6565b91505092915050565b60006125298383612a9d565b60a08301905092915050565b60006125418383612b59565b60408301905092915050565b60006125598383612b97565b60208301905092915050565b600061257082612e5e565b61257a8185612ea6565b935061258583612e2e565b8060005b838110156125b657815161259d888261251d565b97506125a883612e7f565b925050600181019050612589565b5085935050505092915050565b60006125ce82612e69565b6125d88185612eb7565b93506125e383612e3e565b8060005b838110156126145781516125fb8882612535565b975061260683612e8c565b9250506001810190506125e7565b5085935050505092915050565b600061262c82612e74565b6126368185612ec8565b935061264183612e4e565b8060005b83811015612672578151612659888261254d565b975061266483612e99565b925050600181019050612645565b5085935050505092915050565b612688816130b6565b82525050565b6126978161312f565b82525050565b6126a681613141565b82525050565b60006126b9601883612ed9565b91506126c4826133c2565b602082019050919050565b60006126dc600783612ed9565b91506126e7826133eb565b602082019050919050565b60006126ff600a83612ed9565b915061270a82613414565b602082019050919050565b6000612722600e83612ed9565b915061272d8261343d565b602082019050919050565b6000612745601983612ed9565b915061275082613466565b602082019050919050565b6000612768601883612ed9565b91506127738261348f565b602082019050919050565b600061278b601383612ed9565b9150612796826134b8565b602082019050919050565b60006127ae601883612ed9565b91506127b9826134e1565b602082019050919050565b60006127d1600783612ed9565b91506127dc8261350a565b602082019050919050565b60006127f4601683612ed9565b91506127ff82613533565b602082019050919050565b6000612817600983612ed9565b91506128228261355c565b602082019050919050565b600061283a600783612ed9565b915061284582613585565b602082019050919050565b600061285d600783612ed9565b9150612868826135ae565b602082019050919050565b60006101408301600083015161288c600086018261268e565b50602083015184820360208601526128a48282612b1c565b915050604083015184820360408601526128be8282612b1c565b915050606083015184820360608601526128d88282612a23565b915050608083015184820360808601526128f28282612a60565b91505060a083015161290760a086018261267f565b5060c083015161291a60c0860182612b97565b5060e083015161292d60e0860182612b97565b50610100830151612942610100860182612b97565b5061012083015161295761012086018261267f565b508091505092915050565b6040820160008201516129786000850182612ba6565b50602082015161298b602085018261267f565b50505050565b60c0820160008201516129a7600085018261267f565b5060208201516129ba6020850182612962565b5060408201516129cd606085018261267f565b5060608201516129e0608085018261267f565b5060808201516129f360a0850182612b97565b50505050565b60006020830160008301518482036000860152612a168282612621565b9150508091505092915050565b60006040830160008301518482036000860152612a4082826129f9565b9150506020830151612a55602086018261267f565b508091505092915050565b60006040830160008301518482036000860152612a7d8282612565565b9150506020830151612a92602086018261267f565b508091505092915050565b60a082016000820151612ab36000850182612b59565b506020820151612ac6604085018261267f565b506040820151612ad96060850182612b97565b506060820151612aec6080850182612b97565b50505050565b60006020830160008301518482036000860152612b0f82826125c3565b9150508091505092915050565b60006040830160008301518482036000860152612b398282612af2565b9150506020830151612b4e602086018261267f565b508091505092915050565b604082016000820151612b6f600085018261269d565b506020820151612b826020850182612b88565b50505050565b612b91816130f4565b82525050565b612ba0816130fe565b82525050565b612baf8161310e565b82525050565b60006020820190508181036000830152612bce816126ac565b9050919050565b60006020820190508181036000830152612bee816126cf565b9050919050565b60006020820190508181036000830152612c0e816126f2565b9050919050565b60006020820190508181036000830152612c2e81612715565b9050919050565b60006020820190508181036000830152612c4e81612738565b9050919050565b60006020820190508181036000830152612c6e8161275b565b9050919050565b60006020820190508181036000830152612c8e8161277e565b9050919050565b60006020820190508181036000830152612cae816127a1565b9050919050565b60006020820190508181036000830152612cce816127c4565b9050919050565b60006020820190508181036000830152612cee816127e7565b9050919050565b60006020820190508181036000830152612d0e8161280a565b9050919050565b60006020820190508181036000830152612d2e8161282d565b9050919050565b60006020820190508181036000830152612d4e81612850565b9050919050565b600060e0820190508181036000830152612d6f8185612873565b9050612d7e6020830184612991565b9392505050565b6000612d8f612da0565b9050612d9b8282613166565b919050565b6000604051905090565b600067ffffffffffffffff821115612dc557612dc461332b565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612df157612df061332b565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612e1d57612e1c61332b565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612ef5826130e6565b9150612f00836130e6565b92508261ffff03821115612f1757612f1661326f565b5b828201905092915050565b6000612f2d826130f4565b9150612f38836130f4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612f6d57612f6c61326f565b5b828201905092915050565b6000612f83826130fe565b9150612f8e836130fe565b92508263ffffffff03821115612fa757612fa661326f565b5b828201905092915050565b6000612fbd826130e6565b9150612fc8836130e6565b925082821015612fdb57612fda61326f565b5b828203905092915050565b6000612ff1826130f4565b9150612ffc836130f4565b92508282101561300f5761300e61326f565b5b828203905092915050565b6000613025826130fe565b9150613030836130fe565b9250828210156130435761304261326f565b5b828203905092915050565b60006130598261310e565b91506130648361310e565b9250828210156130775761307661326f565b5b828203905092915050565b600061308d82613122565b915061309883613122565b9250828210156130ab576130aa61326f565b5b828203905092915050565b6000819050919050565b60008190506130ce826135d7565b919050565b60008190506130e1826135eb565b919050565b600061ffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b600061313a826130c0565b9050919050565b600061314c826130d3565b9050919050565b600061315f3683611e99565b9050919050565b61316f826133b1565b810181811067ffffffffffffffff8211171561318e5761318d61332b565b5b80604052505050565b60006131a2826130f4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156131d5576131d461326f565b5b600182019050919050565b60006131eb826130fe565b915063ffffffff8214156132025761320161326f565b5b600182019050919050565b6000613218826130fe565b9150613223836130fe565b9250826132335761323261329e565b5b828206905092915050565b60006132498261310e565b91506132548361310e565b9250826132645761326361329e565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f494e56414c49445f455854454e445f53414d455f545950450000000000000000600082015250565b7f4e4f545f49363400000000000000000000000000000000000000000000000000600082015250565b7f424144204952454c4f5000000000000000000000000000000000000000000000600082015250565b7f494e56414c49445f4f50434f4445000000000000000000000000000000000000600082015250565b7f4241445f455854454e445f53414d455f545950455f5459504500000000000000600082015250565b7f57524f4e4720555345204f462067656e65726963556e4f700000000000000000600082015250565b7f494e56414c49445f5245494e5445525052455400000000000000000000000000600082015250565b7f494e56414c49445f5245494e544552505245545f545950450000000000000000600082015250565b7f4241445f49363400000000000000000000000000000000000000000000000000600082015250565b7f494e56414c49445f47454e455249435f42494e5f4f5000000000000000000000600082015250565b7f4241442049556e4f700000000000000000000000000000000000000000000000600082015250565b7f4241445f49333200000000000000000000000000000000000000000000000000600082015250565b7f4e4f545f49333200000000000000000000000000000000000000000000000000600082015250565b600481106135e8576135e76132cd565b5b50565b600881106135fc576135fb6132cd565b5b50565b613608816130b6565b811461361357600080fd5b50565b6004811061362357600080fd5b50565b6008811061363357600080fd5b50565b61363f816130e6565b811461364a57600080fd5b50565b613656816130f4565b811461366157600080fd5b50565b61366d816130fe565b811461367857600080fd5b50565b6136848161310e565b811461368f57600080fd5b5056fea2646970667358221220be882d78e7ca639121d256a0ce77158650d123dcfa45ceca889ddbcde52b6ebf64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}