{
  "address": "0x73140A464a78C93BA9EB5792EC183B71994BEf3A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISequencerInbox",
          "name": "_seqInbox",
          "type": "address"
        },
        {
          "internalType": "contract IBridge",
          "name": "_delayedInbox",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxInboxMessagesRead",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExecutionContext",
          "name": "execCtx",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum MachineStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value[]",
                      "name": "inner",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct ValueArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ValueStack",
              "name": "valueStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value[]",
                      "name": "inner",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct ValueArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ValueStack",
              "name": "internalStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint32[]",
                      "name": "inner",
                      "type": "uint32[]"
                    }
                  ],
                  "internalType": "struct PcArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PcStack",
              "name": "blockStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value",
                      "name": "returnPc",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "localsMerkleRoot",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "callerModule",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "callerModuleInternals",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct StackFrame[]",
                  "name": "proved",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct StackFrameWindow",
              "name": "frameStack",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "globalStateHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "moduleIdx",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "functionIdx",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "functionPc",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "modulesRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Machine",
          "name": "startMach",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "globalsMerkleRoot",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "size",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ModuleMemory",
              "name": "moduleMemory",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "tablesMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "functionsMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "internalsOffset",
              "type": "uint32"
            }
          ],
          "internalType": "struct Module",
          "name": "startMod",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "opcode",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "argumentData",
              "type": "uint256"
            }
          ],
          "internalType": "struct Instruction",
          "name": "inst",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        }
      ],
      "name": "executeOneStep",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum MachineStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value[]",
                      "name": "inner",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct ValueArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ValueStack",
              "name": "valueStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value[]",
                      "name": "inner",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct ValueArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ValueStack",
              "name": "internalStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint32[]",
                      "name": "inner",
                      "type": "uint32[]"
                    }
                  ],
                  "internalType": "struct PcArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PcStack",
              "name": "blockStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value",
                      "name": "returnPc",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "localsMerkleRoot",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "callerModule",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "callerModuleInternals",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct StackFrame[]",
                  "name": "proved",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct StackFrameWindow",
              "name": "frameStack",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "globalStateHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "moduleIdx",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "functionIdx",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "functionPc",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "modulesRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Machine",
          "name": "mach",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "globalsMerkleRoot",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "size",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ModuleMemory",
              "name": "moduleMemory",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "tablesMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "functionsMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "internalsOffset",
              "type": "uint32"
            }
          ],
          "internalType": "struct Module",
          "name": "mod",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6590ed9dde99a726180e0b574dd42bf445380f5111bfd606e1bd5b214594c7ad",
  "receipt": {
    "to": null,
    "from": "0xFF21a5fD9E13241c95033Fcbc501EeaDC3572771",
    "contractAddress": "0x73140A464a78C93BA9EB5792EC183B71994BEf3A",
    "transactionIndex": 0,
    "gasUsed": "3696500",
    "logsBloom": "0x
    "blockHash": "0xf43b48a96ba77d7a43778bc1f7fff6c6bb41675232930f474c49f8ed6ec95516",
    "transactionHash": "0x6590ed9dde99a726180e0b574dd42bf445380f5111bfd606e1bd5b214594c7ad",
    "logs": [],
    "blockNumber": 61,
    "cumulativeGasUsed": "3696500",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6973751B2EfcBB733Bd8Ed545090BAfCf667C6F7",
    "0xB0Ef627059b78749B094873F80c158Aa91200158"
  ],
  "solcInputHash": "e7611196dd0ae85361a704f7442944b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISequencerInbox\",\"name\":\"_seqInbox\",\"type\":\"address\"},{\"internalType\":\"contract IBridge\",\"name\":\"_delayedInbox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxInboxMessagesRead\",\"type\":\"uint256\"}],\"internalType\":\"struct ExecutionContext\",\"name\":\"execCtx\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum MachineStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value[]\",\"name\":\"inner\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ValueArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValueStack\",\"name\":\"valueStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value[]\",\"name\":\"inner\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ValueArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValueStack\",\"name\":\"internalStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"inner\",\"type\":\"uint32[]\"}],\"internalType\":\"struct PcArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct PcStack\",\"name\":\"blockStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value\",\"name\":\"returnPc\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"localsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callerModule\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"callerModuleInternals\",\"type\":\"uint32\"}],\"internalType\":\"struct StackFrame[]\",\"name\":\"proved\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct StackFrameWindow\",\"name\":\"frameStack\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"globalStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"moduleIdx\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionIdx\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionPc\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"modulesRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Machine\",\"name\":\"startMach\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"globalsMerkleRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"size\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct ModuleMemory\",\"name\":\"moduleMemory\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"tablesMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"functionsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"internalsOffset\",\"type\":\"uint32\"}],\"internalType\":\"struct Module\",\"name\":\"startMod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"opcode\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"argumentData\",\"type\":\"uint256\"}],\"internalType\":\"struct Instruction\",\"name\":\"inst\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"executeOneStep\",\"outputs\":[{\"components\":[{\"internalType\":\"enum MachineStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value[]\",\"name\":\"inner\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ValueArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValueStack\",\"name\":\"valueStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value[]\",\"name\":\"inner\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ValueArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValueStack\",\"name\":\"internalStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"inner\",\"type\":\"uint32[]\"}],\"internalType\":\"struct PcArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct PcStack\",\"name\":\"blockStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value\",\"name\":\"returnPc\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"localsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callerModule\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"callerModuleInternals\",\"type\":\"uint32\"}],\"internalType\":\"struct StackFrame[]\",\"name\":\"proved\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct StackFrameWindow\",\"name\":\"frameStack\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"globalStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"moduleIdx\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionIdx\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionPc\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"modulesRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Machine\",\"name\":\"mach\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"globalsMerkleRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"size\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct ModuleMemory\",\"name\":\"moduleMemory\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"tablesMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"functionsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"internalsOffset\",\"type\":\"uint32\"}],\"internalType\":\"struct Module\",\"name\":\"mod\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/osp/OneStepProverHostIo.sol\":\"OneStepProverHostIo\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/bridge/IBridge.sol\":{\"content\":\"//\\n// Copyright 2021, Offchain Labs, Inc. All rights reserved.\\n// SPDX-License-Identifier: UNLICENSED\\n//\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBridge {\\n    event MessageDelivered(\\n        uint256 indexed messageIndex,\\n        bytes32 indexed beforeInboxAcc,\\n        address inbox,\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash,\\n        uint256 gasPrice,\\n        uint256 timestamp\\n    );\\n\\n    event BridgeCallTriggered(\\n        address indexed outbox,\\n        address indexed destAddr,\\n        uint256 amount,\\n        bytes data\\n    );\\n\\n    event InboxToggle(address indexed inbox, bool enabled);\\n\\n    event OutboxToggle(address indexed outbox, bool enabled);\\n\\n    function deliverMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable returns (uint256);\\n\\n    function executeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    // These are only callable by the admin\\n    function setInbox(address inbox, bool enabled) external;\\n\\n    function setOutbox(address inbox, bool enabled) external;\\n\\n    // View functions\\n\\n    function activeOutbox() external view returns (address);\\n\\n    function allowedInboxes(address inbox) external view returns (bool);\\n\\n    function allowedOutboxes(address outbox) external view returns (bool);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function messageCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xae4ba4d11408a77db1d861568938cd19d776955a7ddee37d0d2fcecbf92b403c\",\"license\":\"UNLICENSED\"},\"src/bridge/ISequencerInbox.sol\":{\"content\":\"//\\n// Copyright 2021, Offchain Labs, Inc. All rights reserved.\\n// SPDX-License-Identifier: UNLICENSED\\n//\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISequencerInbox {\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n    function batchCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe5d7a5320b41e5b978c9a52dc82d5d612517ca455125024ff0de336705e7136e\",\"license\":\"UNLICENSED\"},\"src/bridge/Messages.sol\":{\"content\":\"//\\n// Copyright 2021, Offchain Labs, Inc. All rights reserved.\\n// SPDX-License-Identifier: UNLICENSED\\n//\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Messages {\\n    function messageHash(\\n        uint8 kind,\\n        address sender,\\n        uint256 blockNumber,\\n        uint256 timestamp,\\n        uint256 inboxSeqNum,\\n        uint256 gasPriceL1,\\n        bytes32 messageDataHash\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    kind,\\n                    sender,\\n                    blockNumber,\\n                    timestamp,\\n                    inboxSeqNum,\\n                    gasPriceL1,\\n                    messageDataHash\\n                )\\n            );\\n    }\\n\\n    function addMessageToInbox(bytes32 inbox, bytes32 message) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(inbox, message));\\n    }\\n}\\n\",\"keccak256\":\"0xf98b507847f2b15d3923f38a164b12bdedc03f951bc981fec26607c3ed0c97b0\",\"license\":\"UNLICENSED\"},\"src/osp/IOneStepProver.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../state/Machines.sol\\\";\\nimport \\\"../state/Modules.sol\\\";\\nimport \\\"../state/Instructions.sol\\\";\\n\\nstruct ExecutionContext {\\n    uint256 maxInboxMessagesRead;\\n}\\n\\nabstract contract IOneStepProver {\\n    function executeOneStep(\\n        ExecutionContext memory execCtx,\\n        Machine calldata mach,\\n        Module calldata mod,\\n        Instruction calldata instruction,\\n        bytes calldata proof\\n    )\\n        external\\n        view\\n        virtual\\n        returns (Machine memory result, Module memory resultMod);\\n}\\n\",\"keccak256\":\"0xf2a87c00ce591229417b9f094d817d3ae116a448e544a93473f99f692d04dfb0\",\"license\":\"UNLICENSED\"},\"src/osp/OneStepProverHostIo.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../state/Values.sol\\\";\\nimport \\\"../state/Machines.sol\\\";\\nimport \\\"../state/Deserialize.sol\\\";\\nimport \\\"./IOneStepProver.sol\\\";\\nimport \\\"../bridge/Messages.sol\\\";\\nimport \\\"../bridge/IBridge.sol\\\";\\nimport \\\"../bridge/ISequencerInbox.sol\\\";\\n\\ncontract OneStepProverHostIo is IOneStepProver {\\n    uint256 constant LEAF_SIZE = 32;\\n    uint256 constant INBOX_NUM = 2;\\n\\n    ISequencerInbox seqInbox;\\n    IBridge delayedInbox;\\n\\n    constructor(ISequencerInbox _seqInbox, IBridge _delayedInbox) {\\n        seqInbox = _seqInbox;\\n        delayedInbox = _delayedInbox;\\n    }\\n\\n    function setLeafByte(\\n        bytes32 oldLeaf,\\n        uint256 idx,\\n        uint8 val\\n    ) internal pure returns (bytes32) {\\n        require(idx < LEAF_SIZE, \\\"BAD_SET_LEAF_BYTE_IDX\\\");\\n        // Take into account that we are casting the leaf to a big-endian integer\\n        uint256 leafShift = (LEAF_SIZE - 1 - idx) * 8;\\n        uint256 newLeaf = uint256(oldLeaf);\\n        newLeaf &= ~(0xFF << leafShift);\\n        newLeaf |= uint256(val) << leafShift;\\n        return bytes32(newLeaf);\\n    }\\n\\n    function executeGetOrSetBytes32(\\n        Machine memory mach,\\n        Module memory mod,\\n        GlobalState memory state,\\n        Instruction calldata inst,\\n        bytes calldata proof\\n    ) internal pure {\\n        uint256 ptr = ValueStacks.pop(mach.valueStack).contents;\\n        uint32 idx = Values.assumeI32(ValueStacks.pop(mach.valueStack));\\n\\n        if (idx >= GlobalStates.BYTES32_VALS_NUM) {\\n            mach.status = MachineStatus.ERRORED;\\n            return;\\n        }\\n        if (ptr + 32 > mod.moduleMemory.size || ptr % LEAF_SIZE != 0) {\\n            mach.status = MachineStatus.ERRORED;\\n            return;\\n        }\\n\\n        uint256 leafIdx = ptr / LEAF_SIZE;\\n        uint256 proofOffset = 0;\\n        bytes32 startLeafContents;\\n        MerkleProof memory merkleProof;\\n        (startLeafContents, proofOffset, merkleProof) = ModuleMemories\\n            .proveLeaf(mod.moduleMemory, leafIdx, proof, proofOffset);\\n\\n        if (inst.opcode == Instructions.GET_GLOBAL_STATE_BYTES32) {\\n            mod.moduleMemory.merkleRoot = MerkleProofs.computeRootFromMemory(\\n                merkleProof,\\n                leafIdx,\\n                state.bytes32_vals[idx]\\n            );\\n        } else if (inst.opcode == Instructions.SET_GLOBAL_STATE_BYTES32) {\\n            state.bytes32_vals[idx] = startLeafContents;\\n        } else {\\n            revert(\\\"BAD_GLOBAL_STATE_OPCODE\\\");\\n        }\\n    }\\n\\n    function executeGetU64(Machine memory mach, GlobalState memory state)\\n        internal\\n        pure\\n    {\\n        uint32 idx = Values.assumeI32(ValueStacks.pop(mach.valueStack));\\n\\n        if (idx >= GlobalStates.U64_VALS_NUM) {\\n            mach.status = MachineStatus.ERRORED;\\n            return;\\n        }\\n\\n        ValueStacks.push(mach.valueStack, Values.newI64(state.u64_vals[idx]));\\n    }\\n\\n    function executeSetU64(Machine memory mach, GlobalState memory state)\\n        internal\\n        pure\\n    {\\n        uint64 val = Values.assumeI64(ValueStacks.pop(mach.valueStack));\\n        uint32 idx = Values.assumeI32(ValueStacks.pop(mach.valueStack));\\n\\n        if (idx >= GlobalStates.U64_VALS_NUM) {\\n            mach.status = MachineStatus.ERRORED;\\n            return;\\n        }\\n        state.u64_vals[idx] = val;\\n    }\\n\\n    function executeReadPreImage(\\n        ExecutionContext calldata,\\n        Machine memory mach,\\n        Module memory mod,\\n        Instruction calldata,\\n        bytes calldata proof\\n    ) internal pure {\\n        uint256 preimageOffset = ValueStacks.pop(mach.valueStack).contents;\\n        uint256 ptr = ValueStacks.pop(mach.valueStack).contents;\\n        if (ptr + 32 > mod.moduleMemory.size || ptr % LEAF_SIZE != 0) {\\n            mach.status = MachineStatus.ERRORED;\\n            return;\\n        }\\n\\n        uint256 leafIdx = ptr / LEAF_SIZE;\\n        uint256 proofOffset = 0;\\n        bytes32 leafContents;\\n        MerkleProof memory merkleProof;\\n        (leafContents, proofOffset, merkleProof) = ModuleMemories.proveLeaf(\\n            mod.moduleMemory,\\n            leafIdx,\\n            proof,\\n            proofOffset\\n        );\\n\\n        bytes memory preimage = proof[proofOffset:];\\n        require(keccak256(preimage) == leafContents, \\\"BAD_PREIMAGE\\\");\\n\\n        uint32 i = 0;\\n        for (; i < 32 && preimageOffset + i < preimage.length; i++) {\\n            leafContents = setLeafByte(\\n                leafContents,\\n                i,\\n                uint8(preimage[preimageOffset + i])\\n            );\\n        }\\n\\n        mod.moduleMemory.merkleRoot = MerkleProofs.computeRootFromMemory(\\n            merkleProof,\\n            leafIdx,\\n            leafContents\\n        );\\n\\n        ValueStacks.push(mach.valueStack, Values.newI32(i));\\n    }\\n\\n    function validateSequencerInbox(uint64 msgIndex, bytes calldata message)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(message.length >= 40, \\\"BAD_SEQINBOX_PROOF\\\");\\n\\n        uint64 afterDelayedMsg;\\n        (afterDelayedMsg, ) = Deserialize.u64(message, 32);\\n        bytes32 messageHash = keccak256(message);\\n        bytes32 beforeAcc;\\n        bytes32 delayedAcc;\\n\\n        if (msgIndex > seqInbox.batchCount()) {\\n            return false;\\n        }\\n        if (msgIndex > 0) {\\n            beforeAcc = seqInbox.inboxAccs(msgIndex - 1);\\n        }\\n        if (afterDelayedMsg > 0) {\\n            delayedAcc = delayedInbox.inboxAccs(afterDelayedMsg - 1);\\n        }\\n        bytes32 acc = keccak256(\\n            abi.encodePacked(beforeAcc, messageHash, delayedAcc)\\n        );\\n        require(acc == seqInbox.inboxAccs(msgIndex), \\\"BAD_SEQINBOX_MESSAGE\\\");\\n        return true;\\n    }\\n\\n    function validateDelayedInbox(uint64 msgIndex, bytes calldata message)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (msgIndex > delayedInbox.messageCount()) {\\n            return false;\\n        }\\n        require(message.length >= 161, \\\"BAD_DELAYED_PROOF\\\");\\n\\n        bytes32 beforeAcc;\\n\\n        if (msgIndex > 0) {\\n            beforeAcc = delayedInbox.inboxAccs(msgIndex - 1);\\n        }\\n\\n        bytes32 messageDataHash = keccak256(message[161:]);\\n        bytes1 kind = message[0];\\n        uint256 sender;\\n        (sender, ) = Deserialize.u256(message, 1);\\n\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\n                kind,\\n                uint160(sender),\\n                message[33:161],\\n                messageDataHash\\n            )\\n        );\\n        bytes32 acc = Messages.addMessageToInbox(beforeAcc, messageHash);\\n\\n        require(acc == delayedInbox.inboxAccs(msgIndex), \\\"BAD_DELAYED_MESSAGE\\\");\\n        return true;\\n    }\\n\\n    function executeReadInboxMessage(\\n        ExecutionContext calldata execCtx,\\n        Machine memory mach,\\n        Module memory mod,\\n        Instruction calldata inst,\\n        bytes calldata proof\\n    ) internal view {\\n        uint256 messageOffset = ValueStacks.pop(mach.valueStack).contents;\\n        uint256 ptr = ValueStacks.pop(mach.valueStack).contents;\\n        uint256 msgIndex = ValueStacks.pop(mach.valueStack).contents;\\n        if (inst.argumentData == Instructions.INBOX_INDEX_SEQUENCER && msgIndex >= execCtx.maxInboxMessagesRead) {\\n            mach.status = MachineStatus.TOO_FAR;\\n            return;\\n        }\\n\\n        if (ptr + 32 > mod.moduleMemory.size || ptr % LEAF_SIZE != 0) {\\n            mach.status = MachineStatus.ERRORED;\\n            return;\\n        }\\n\\n        uint256 leafIdx = ptr / LEAF_SIZE;\\n        uint256 proofOffset = 0;\\n        bytes32 leafContents;\\n        MerkleProof memory merkleProof;\\n        (leafContents, proofOffset, merkleProof) = ModuleMemories.proveLeaf(\\n            mod.moduleMemory,\\n            leafIdx,\\n            proof,\\n            proofOffset\\n        );\\n\\n        {\\n            function(uint64, bytes calldata)\\n                internal\\n                view\\n                returns (bool) inboxValidate;\\n\\n            bool success;\\n            if (inst.argumentData == Instructions.INBOX_INDEX_SEQUENCER) {\\n                inboxValidate = validateSequencerInbox;\\n            } else if (inst.argumentData == Instructions.INBOX_INDEX_DELAYED) {\\n                inboxValidate = validateDelayedInbox;\\n            } else {\\n                mach.status = MachineStatus.ERRORED;\\n                return;\\n            }\\n            success = inboxValidate(uint64(msgIndex), proof[proofOffset:]);\\n            if (!success) {\\n                mach.status = MachineStatus.ERRORED;\\n                return;\\n            }\\n        }\\n\\n        require(proof.length >= proofOffset, \\\"BAD_MESSAGE_PROOF\\\");\\n        uint256 messageLength = proof.length - proofOffset;\\n\\n        uint32 i = 0;\\n        for (; i < 32 && messageOffset + i < messageLength; i++) {\\n            leafContents = setLeafByte(\\n                leafContents,\\n                i,\\n                uint8(proof[proofOffset + messageOffset + i])\\n            );\\n        }\\n\\n        mod.moduleMemory.merkleRoot = MerkleProofs.computeRootFromMemory(\\n            merkleProof,\\n            leafIdx,\\n            leafContents\\n        );\\n        ValueStacks.push(mach.valueStack, Values.newI32(i));\\n    }\\n\\n    function executeHaltAndSetFinished(\\n        ExecutionContext calldata,\\n        Machine memory mach,\\n        Module memory,\\n        Instruction calldata,\\n        bytes calldata\\n    ) internal pure {\\n        mach.status = MachineStatus.FINISHED;\\n    }\\n\\n    function executeGlobalStateAccess(\\n        ExecutionContext calldata,\\n        Machine memory mach,\\n        Module memory mod,\\n        Instruction calldata inst,\\n        bytes calldata proof\\n    ) internal pure {\\n        uint16 opcode = inst.opcode;\\n\\n        GlobalState memory state;\\n        uint256 proofOffset = 0;\\n        (state, proofOffset) = Deserialize.globalState(proof, proofOffset);\\n        require(\\n            GlobalStates.hash(state) == mach.globalStateHash,\\n            \\\"BAD_GLOBAL_STATE\\\"\\n        );\\n\\n        if (\\n            opcode == Instructions.GET_GLOBAL_STATE_BYTES32 ||\\n            opcode == Instructions.SET_GLOBAL_STATE_BYTES32\\n        ) {\\n            executeGetOrSetBytes32(mach, mod, state, inst, proof[proofOffset:]);\\n        } else if (opcode == Instructions.GET_GLOBAL_STATE_U64) {\\n            executeGetU64(mach, state);\\n        } else if (opcode == Instructions.SET_GLOBAL_STATE_U64) {\\n            executeSetU64(mach, state);\\n        } else {\\n            revert(\\\"INVALID_GLOBALSTATE_OPCODE\\\");\\n        }\\n\\n        mach.globalStateHash = GlobalStates.hash(state);\\n    }\\n\\n    function executeOneStep(\\n        ExecutionContext calldata execCtx,\\n        Machine calldata startMach,\\n        Module calldata startMod,\\n        Instruction calldata inst,\\n        bytes calldata proof\\n    ) external view override returns (Machine memory mach, Module memory mod) {\\n        mach = startMach;\\n        mod = startMod;\\n\\n        uint16 opcode = inst.opcode;\\n\\n        function(\\n            ExecutionContext calldata,\\n            Machine memory,\\n            Module memory,\\n            Instruction calldata,\\n            bytes calldata\\n        ) internal view impl;\\n\\n        if (\\n            opcode >= Instructions.GET_GLOBAL_STATE_BYTES32 &&\\n            opcode <= Instructions.SET_GLOBAL_STATE_U64\\n        ) {\\n            impl = executeGlobalStateAccess;\\n        } else if (opcode == Instructions.READ_PRE_IMAGE) {\\n            impl = executeReadPreImage;\\n        } else if (opcode == Instructions.READ_INBOX_MESSAGE) {\\n            impl = executeReadInboxMessage;\\n        } else if (opcode == Instructions.HALT_AND_SET_FINISHED) {\\n            impl = executeHaltAndSetFinished;\\n        } else {\\n            revert(\\\"INVALID_MEMORY_OPCODE\\\");\\n        }\\n\\n        impl(execCtx, mach, mod, inst, proof);\\n    }\\n}\\n\",\"keccak256\":\"0x0775004ba4a5924e4fe5cb7adae717b78007ce12370dfb42894aaf7cfe54ef98\",\"license\":\"UNLICENSED\"},\"src/state/Deserialize.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\nimport \\\"./ValueStacks.sol\\\";\\nimport \\\"./PcStacks.sol\\\";\\nimport \\\"./Machines.sol\\\";\\nimport \\\"./Instructions.sol\\\";\\nimport \\\"./StackFrames.sol\\\";\\nimport \\\"./MerkleProofs.sol\\\";\\nimport \\\"./ModuleMemories.sol\\\";\\nimport \\\"./Modules.sol\\\";\\nimport \\\"./GlobalStates.sol\\\";\\n\\nlibrary Deserialize {\\n\\tfunction u8(bytes calldata proof, uint256 startOffset) internal pure returns (uint8 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tret = uint8(proof[offset]);\\n\\t\\toffset++;\\n\\t}\\n\\n\\tfunction u16(bytes calldata proof, uint256 startOffset) internal pure returns (uint16 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tfor (uint256 i = 0; i < 16/8; i++) {\\n\\t\\t\\tret <<= 8;\\n\\t\\t\\tret |= uint8(proof[offset]);\\n\\t\\t\\toffset++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction u32(bytes calldata proof, uint256 startOffset) internal pure returns (uint32 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tfor (uint256 i = 0; i < 32/8; i++) {\\n\\t\\t\\tret <<= 8;\\n\\t\\t\\tret |= uint8(proof[offset]);\\n\\t\\t\\toffset++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction u64(bytes calldata proof, uint256 startOffset) internal pure returns (uint64 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tfor (uint256 i = 0; i < 64/8; i++) {\\n\\t\\t\\tret <<= 8;\\n\\t\\t\\tret |= uint8(proof[offset]);\\n\\t\\t\\toffset++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction u256(bytes calldata proof, uint256 startOffset) internal pure returns (uint256 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tfor (uint256 i = 0; i < 256/8; i++) {\\n\\t\\t\\tret <<= 8;\\n\\t\\t\\tret |= uint8(proof[offset]);\\n\\t\\t\\toffset++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction b32(bytes calldata proof, uint256 startOffset) internal pure returns (bytes32 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tuint256 retInt;\\n\\t\\t(retInt, offset) = u256(proof, offset);\\n\\t\\tret = bytes32(retInt);\\n\\t}\\n\\n\\tfunction value(bytes calldata proof, uint256 startOffset) internal pure returns (Value memory val, uint256 offset)  {\\n\\t\\toffset = startOffset;\\n\\t\\tuint8 typeInt = uint8(proof[offset]);\\n\\t\\toffset++;\\n\\t\\trequire(typeInt <= uint8(Values.maxValueType()), \\\"BAD_VALUE_TYPE\\\");\\n\\t\\tuint256 contents;\\n\\t\\t(contents, offset) = u256(proof, offset);\\n\\t\\tval = Value({\\n\\t\\t\\tvalueType: ValueType(typeInt),\\n\\t\\t\\tcontents: contents\\n\\t\\t});\\n\\t}\\n\\n\\tfunction valueStack(bytes calldata proof, uint256 startOffset) internal pure returns (ValueStack memory stack, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tbytes32 remainingHash;\\n\\t\\t(remainingHash, offset) = b32(proof, offset);\\n\\t\\tuint256 provedLength;\\n\\t\\t(provedLength, offset) = u256(proof, offset);\\n\\t\\tValue[] memory proved = new Value[](provedLength);\\n\\t\\tfor (uint256 i = 0; i < proved.length; i++) {\\n\\t\\t\\t(proved[i], offset) = value(proof, offset);\\n\\t\\t}\\n\\t\\tstack = ValueStack({\\n\\t\\t\\tproved: ValueArray(proved),\\n\\t\\t\\tremainingHash: remainingHash\\n\\t\\t});\\n\\t}\\n\\n\\tfunction pcStack(bytes calldata proof, uint256 startOffset) internal pure returns (PcStack memory stack, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tbytes32 remainingHash;\\n\\t\\t(remainingHash, offset) = b32(proof, offset);\\n\\t\\tuint256 provedLength;\\n\\t\\t(provedLength, offset) = u256(proof, offset);\\n\\t\\tuint32[] memory proved = new uint32[](provedLength);\\n\\t\\tfor (uint256 i = 0; i < proved.length; i++) {\\n\\t\\t\\t(proved[i], offset) = u32(proof, offset);\\n\\t\\t}\\n\\t\\tstack = PcStack({\\n\\t\\t\\tproved: PcArray(proved),\\n\\t\\t\\tremainingHash: remainingHash\\n\\t\\t});\\n\\t}\\n\\n\\tfunction instruction(bytes calldata proof, uint256 startOffset) internal pure returns (Instruction memory inst, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tuint16 opcode;\\n\\t\\tuint256 data;\\n\\t\\t(opcode, offset) = u16(proof, offset);\\n\\t\\t(data, offset) = u256(proof, offset);\\n\\t\\tinst = Instruction({\\n\\t\\t\\topcode: opcode,\\n\\t\\t\\targumentData: data\\n\\t\\t});\\n\\t}\\n\\n\\tfunction stackFrame(bytes calldata proof, uint256 startOffset) internal pure returns (StackFrame memory window, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tValue memory returnPc;\\n\\t\\tbytes32 localsMerkleRoot;\\n\\t\\tuint32 callerModule;\\n\\t\\tuint32 callerModuleInternals;\\n\\t\\t(returnPc, offset) = value(proof, offset);\\n\\t\\t(localsMerkleRoot, offset) = b32(proof, offset);\\n\\t\\t(callerModule, offset) = u32(proof, offset);\\n\\t\\t(callerModuleInternals, offset) = u32(proof, offset);\\n\\t\\twindow = StackFrame({\\n\\t\\t\\treturnPc: returnPc,\\n\\t\\t\\tlocalsMerkleRoot: localsMerkleRoot,\\n\\t\\t\\tcallerModule: callerModule,\\n\\t\\t\\tcallerModuleInternals: callerModuleInternals\\n\\t\\t});\\n\\t}\\n\\n\\tfunction stackFrameWindow(bytes calldata proof, uint256 startOffset) internal pure returns (StackFrameWindow memory window, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tbytes32 remainingHash;\\n\\t\\t(remainingHash, offset) = b32(proof, offset);\\n\\t\\tStackFrame[] memory proved;\\n\\t\\tif (proof[offset] != 0) {\\n\\t\\t\\toffset++;\\n\\t\\t\\tproved = new StackFrame[](1);\\n\\t\\t\\t(proved[0], offset) = stackFrame(proof, offset);\\n\\t\\t} else {\\n\\t\\t\\toffset++;\\n\\t\\t\\tproved = new StackFrame[](0);\\n\\t\\t}\\n\\t\\twindow = StackFrameWindow({\\n\\t\\t\\tproved: proved,\\n\\t\\t\\tremainingHash: remainingHash\\n\\t\\t});\\n\\t}\\n\\n\\tfunction moduleMemory(bytes calldata proof, uint256 startOffset) internal pure returns (ModuleMemory memory mem, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tuint64 size;\\n\\t\\tbytes32 root;\\n\\t\\t(size, offset) = u64(proof, offset);\\n\\t\\t(root, offset) = b32(proof, offset);\\n\\t\\tmem = ModuleMemory({\\n\\t\\t\\tsize: size,\\n\\t\\t\\tmerkleRoot: root\\n\\t\\t});\\n\\t}\\n\\n\\tfunction module(bytes calldata proof, uint256 startOffset) internal pure returns (Module memory mod, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tbytes32 globalsMerkleRoot;\\n\\t\\tModuleMemory memory mem;\\n\\t\\tbytes32 tablesMerkleRoot;\\n\\t\\tbytes32 functionsMerkleRoot;\\n\\t\\tuint32 internalsOffset;\\n\\t\\t(globalsMerkleRoot, offset) = b32(proof, offset);\\n\\t\\t(mem, offset) = moduleMemory(proof, offset);\\n\\t\\t(tablesMerkleRoot, offset) = b32(proof, offset);\\n\\t\\t(functionsMerkleRoot, offset) = b32(proof, offset);\\n\\t\\t(internalsOffset, offset) = u32(proof, offset);\\n\\t\\tmod = Module({\\n\\t\\t\\tglobalsMerkleRoot: globalsMerkleRoot,\\n\\t\\t\\tmoduleMemory: mem,\\n\\t\\t\\ttablesMerkleRoot: tablesMerkleRoot,\\n\\t\\t\\tfunctionsMerkleRoot: functionsMerkleRoot,\\n\\t\\t\\tinternalsOffset: internalsOffset\\n\\t\\t});\\n\\t}\\n\\n\\tfunction globalState(bytes calldata proof, uint256 startOffset) internal pure returns (GlobalState memory state, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\n\\t\\t// using constant ints for array size requires newer solidity\\n\\t\\tbytes32[1] memory bytes32_vals;\\n\\t\\tuint64[2] memory u64_vals;\\n\\n\\t\\tfor (uint8 i = 0; i< GlobalStates.BYTES32_VALS_NUM; i++) {\\n\\t\\t\\t(bytes32_vals[i], offset) = b32(proof, offset);\\n\\t\\t}\\n\\t\\tfor (uint8 i = 0; i< GlobalStates.U64_VALS_NUM; i++) {\\n\\t\\t\\t(u64_vals[i], offset) = u64(proof, offset);\\n\\t\\t}\\n\\t\\tstate = GlobalState({\\n\\t\\t\\tbytes32_vals: bytes32_vals,\\n\\t\\t\\tu64_vals: u64_vals\\n\\t\\t});\\n\\t}\\n\\n\\tfunction machine(bytes calldata proof, uint256 startOffset) internal pure returns (Machine memory mach, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tMachineStatus status;\\n\\t\\t{\\n\\t\\t\\tuint8 status_u8;\\n\\t\\t\\t(status_u8, offset) = u8(proof, offset);\\n\\t\\t\\tif (status_u8 == 0) {\\n\\t\\t\\t\\tstatus = MachineStatus.RUNNING;\\n\\t\\t\\t} else if (status_u8 == 1) {\\n\\t\\t\\t\\tstatus = MachineStatus.FINISHED;\\n\\t\\t\\t} else if (status_u8 == 2) {\\n\\t\\t\\t\\tstatus = MachineStatus.ERRORED;\\n\\t\\t\\t} else if (status_u8 == 3) {\\n\\t\\t\\t\\tstatus = MachineStatus.TOO_FAR;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(\\\"UNKNOWN_MACH_STATUS\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tValueStack memory values;\\n\\t\\tValueStack memory internalStack;\\n\\t\\tPcStack memory blocks;\\n\\t\\tbytes32 globalStateHash;\\n\\t\\tuint32 moduleIdx;\\n\\t\\tuint32 functionIdx;\\n\\t\\tuint32 functionPc;\\n\\t\\tStackFrameWindow memory frameStack;\\n\\t\\tbytes32 modulesRoot;\\n\\t\\t(values, offset) = valueStack(proof, offset);\\n\\t\\t(internalStack, offset) = valueStack(proof, offset);\\n\\t\\t(blocks, offset) = pcStack(proof, offset);\\n\\t\\t(frameStack, offset) = stackFrameWindow(proof, offset);\\n\\t\\t(globalStateHash, offset) = b32(proof, offset);\\n\\t\\t(moduleIdx, offset) = u32(proof, offset);\\n\\t\\t(functionIdx, offset) = u32(proof, offset);\\n\\t\\t(functionPc, offset) = u32(proof, offset);\\n\\t\\t(modulesRoot, offset) = b32(proof, offset);\\n\\t\\tmach = Machine({\\n\\t\\t\\tstatus: status,\\n\\t\\t\\tvalueStack: values,\\n\\t\\t\\tinternalStack: internalStack,\\n\\t\\t\\tblockStack: blocks,\\n\\t\\t\\tframeStack: frameStack,\\n\\t\\t\\tglobalStateHash: globalStateHash,\\n\\t\\t\\tmoduleIdx: moduleIdx,\\n\\t\\t\\tfunctionIdx: functionIdx,\\n\\t\\t\\tfunctionPc: functionPc,\\n\\t\\t\\tmodulesRoot: modulesRoot\\n\\t\\t});\\n\\t}\\n\\n\\tfunction merkleProof(bytes calldata proof, uint256 startOffset) internal pure returns (MerkleProof memory merkle, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tuint8 length;\\n\\t\\t(length, offset) = u8(proof, offset);\\n\\t\\tbytes32[] memory counterparts = new bytes32[](length);\\n\\t\\tfor (uint8 i = 0; i < length; i++) {\\n\\t\\t\\t(counterparts[i], offset) = b32(proof, offset);\\n\\t\\t}\\n\\t\\tmerkle = MerkleProof(counterparts);\\n\\t}\\n}\\n\",\"keccak256\":\"0x32a434c4f0cdabfeaac3589962cf2baae436569e8a9da409cfc418e5ead4cb1d\",\"license\":\"UNLICENSED\"},\"src/state/GlobalStates.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nstruct GlobalState {\\n\\tbytes32[1] bytes32_vals;\\n\\tuint64[2] u64_vals;\\n}\\n\\n\\nlibrary GlobalStates {\\n\\tuint16 constant BYTES32_VALS_NUM = 1;\\n\\tuint16 constant U64_VALS_NUM = 2;\\n\\tfunction hash(GlobalState memory state) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\n\\t\\t\\t\\\"Global state:\\\",\\n\\t\\t\\tstate.bytes32_vals[0],\\n\\t\\t\\tstate.u64_vals[0],\\n\\t\\t\\tstate.u64_vals[1]\\n\\t\\t));\\n\\t}\\n}\\n\",\"keccak256\":\"0x417592ac9b86d72227941cc836354eae4a32c6bf1730c798efaf5c8772043631\",\"license\":\"UNLICENSED\"},\"src/state/Instructions.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nstruct Instruction {\\n    uint16 opcode;\\n    uint256 argumentData;\\n}\\n\\nlibrary Instructions {\\n    uint16 constant UNREACHABLE = 0x00;\\n    uint16 constant NOP = 0x01;\\n    uint16 constant BLOCK = 0x02;\\n    uint16 constant BRANCH = 0x0C;\\n    uint16 constant BRANCH_IF = 0x0D;\\n    uint16 constant RETURN = 0x0F;\\n    uint16 constant CALL = 0x10;\\n    uint16 constant CALL_INDIRECT = 0x11;\\n    uint16 constant LOCAL_GET = 0x20;\\n    uint16 constant LOCAL_SET = 0x21;\\n    uint16 constant GLOBAL_GET = 0x23;\\n    uint16 constant GLOBAL_SET = 0x24;\\n\\n    uint16 constant I32_LOAD = 0x28;\\n    uint16 constant I64_LOAD = 0x29;\\n    uint16 constant F32_LOAD = 0x2A;\\n    uint16 constant F64_LOAD = 0x2B;\\n    uint16 constant I32_LOAD8_S = 0x2C;\\n    uint16 constant I32_LOAD8_U = 0x2D;\\n    uint16 constant I32_LOAD16_S = 0x2E;\\n    uint16 constant I32_LOAD16_U = 0x2F;\\n    uint16 constant I64_LOAD8_S = 0x30;\\n    uint16 constant I64_LOAD8_U = 0x31;\\n    uint16 constant I64_LOAD16_S = 0x32;\\n    uint16 constant I64_LOAD16_U = 0x33;\\n    uint16 constant I64_LOAD32_S = 0x34;\\n    uint16 constant I64_LOAD32_U = 0x35;\\n\\n    uint16 constant I32_STORE = 0x36;\\n    uint16 constant I64_STORE = 0x37;\\n    uint16 constant F32_STORE = 0x38;\\n    uint16 constant F64_STORE = 0x39;\\n    uint16 constant I32_STORE8 = 0x3A;\\n    uint16 constant I32_STORE16 = 0x3B;\\n    uint16 constant I64_STORE8 = 0x3C;\\n    uint16 constant I64_STORE16 = 0x3D;\\n    uint16 constant I64_STORE32 = 0x3E;\\n\\n    uint16 constant MEMORY_SIZE = 0x3F;\\n    uint16 constant MEMORY_GROW = 0x40;\\n\\n    uint16 constant DROP = 0x1A;\\n    uint16 constant SELECT = 0x1B;\\n    uint16 constant I32_CONST = 0x41;\\n    uint16 constant I64_CONST = 0x42;\\n    uint16 constant F32_CONST = 0x43;\\n    uint16 constant F64_CONST = 0x44;\\n    uint16 constant I32_EQZ = 0x45;\\n    uint16 constant I32_RELOP_BASE = 0x46;\\n    uint16 constant IRELOP_EQ = 0;\\n    uint16 constant IRELOP_NE = 1;\\n    uint16 constant IRELOP_LT_S = 2;\\n    uint16 constant IRELOP_LT_U = 3;\\n    uint16 constant IRELOP_GT_S = 4;\\n    uint16 constant IRELOP_GT_U = 5;\\n    uint16 constant IRELOP_LE_S = 6;\\n    uint16 constant IRELOP_LE_U = 7;\\n    uint16 constant IRELOP_GE_S = 8;\\n    uint16 constant IRELOP_GE_U = 9;\\n    uint16 constant IRELOP_LAST = IRELOP_GE_U;\\n\\n    uint16 constant I64_EQZ = 0x50;\\n    uint16 constant I64_RELOP_BASE = 0x51;\\n\\n    uint16 constant I32_UNOP_BASE = 0x67;\\n    uint16 constant IUNOP_CLZ = 0;\\n    uint16 constant IUNOP_CTZ = 1;\\n    uint16 constant IUNOP_POPCNT = 2;\\n    uint16 constant IUNOP_LAST = IUNOP_POPCNT;\\n\\n    uint16 constant I32_ADD = 0x6A;\\n    uint16 constant I32_SUB = 0x6B;\\n    uint16 constant I32_MUL = 0x6C;\\n    uint16 constant I32_DIV_S = 0x6D;\\n    uint16 constant I32_DIV_U = 0x6E;\\n    uint16 constant I32_REM_S = 0x6F;\\n    uint16 constant I32_REM_U = 0x70;\\n    uint16 constant I32_AND = 0x71;\\n    uint16 constant I32_OR = 0x72;\\n    uint16 constant I32_XOR = 0x73;\\n    uint16 constant I32_SHL = 0x74;\\n    uint16 constant I32_SHR_S = 0x75;\\n    uint16 constant I32_SHR_U = 0x76;\\n    uint16 constant I32_ROTL = 0x77;\\n    uint16 constant I32_ROTR = 0x78;\\n\\n    uint16 constant I64_UNOP_BASE = 0x79;\\n\\n    uint16 constant I64_ADD = 0x7C;\\n    uint16 constant I64_SUB = 0x7D;\\n    uint16 constant I64_MUL = 0x7E;\\n    uint16 constant I64_DIV_S = 0x7F;\\n    uint16 constant I64_DIV_U = 0x80;\\n    uint16 constant I64_REM_S = 0x81;\\n    uint16 constant I64_REM_U = 0x82;\\n    uint16 constant I64_AND = 0x83;\\n    uint16 constant I64_OR = 0x84;\\n    uint16 constant I64_XOR = 0x85;\\n    uint16 constant I64_SHL = 0x86;\\n    uint16 constant I64_SHR_S = 0x87;\\n    uint16 constant I64_SHR_U = 0x88;\\n    uint16 constant I64_ROTL = 0x89;\\n    uint16 constant I64_ROTR = 0x8A;\\n\\n    uint16 constant I32_WRAP_I64 = 0xA7;\\n    uint16 constant I64_EXTEND_I32_S = 0xAC;\\n    uint16 constant I64_EXTEND_I32_U = 0xAD;\\n\\n    uint16 constant I32_REINTERPRET_F32 = 0xBC;\\n    uint16 constant I64_REINTERPRET_F64 = 0xBD;\\n    uint16 constant F32_REINTERPRET_I32 = 0xBE;\\n    uint16 constant F64_REINTERPRET_I64 = 0xBF;\\n\\n    uint16 constant I32_EXTEND_8S = 0xC0;\\n    uint16 constant I32_EXTEND_16S = 0xC1;\\n    uint16 constant I64_EXTEND_8S = 0xC2;\\n    uint16 constant I64_EXTEND_16S = 0xC3;\\n    uint16 constant I64_EXTEND_32S = 0xC4;\\n\\n    uint16 constant END_BLOCK = 0x8000;\\n    uint16 constant END_BLOCK_IF = 0x8001;\\n    uint16 constant INIT_FRAME = 0x8002;\\n    uint16 constant ARBITRARY_JUMP_IF = 0x8003;\\n    uint16 constant PUSH_STACK_BOUNDARY = 0x8004;\\n    uint16 constant MOVE_FROM_STACK_TO_INTERNAL = 0x8005;\\n    uint16 constant MOVE_FROM_INTERNAL_TO_STACK = 0x8006;\\n    uint16 constant IS_STACK_BOUNDARY = 0x8007;\\n    uint16 constant DUP = 0x8008;\\n    uint16 constant CROSS_MODULE_CALL = 0x8009;\\n    uint16 constant CALLER_MODULE_INTERNAL_CALL = 0x800A;\\n\\n    uint16 constant GET_GLOBAL_STATE_BYTES32 = 0x8010;\\n    uint16 constant SET_GLOBAL_STATE_BYTES32 = 0x8011;\\n    uint16 constant GET_GLOBAL_STATE_U64 = 0x8012;\\n    uint16 constant SET_GLOBAL_STATE_U64 = 0x8013;\\n\\n    uint16 constant READ_PRE_IMAGE = 0x8020;\\n    uint16 constant READ_INBOX_MESSAGE = 0x8021;\\n    uint16 constant HALT_AND_SET_FINISHED = 0x8022;\\n\\n    uint256 constant INBOX_INDEX_SEQUENCER = 0;\\n    uint256 constant INBOX_INDEX_DELAYED = 1;\\n\\n    function hash(Instruction memory inst) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"Instruction:\\\", inst.opcode, inst.argumentData)\\n            );\\n    }\\n\\n    function newNop() internal pure returns (Instruction memory) {\\n        return Instruction({opcode: NOP, argumentData: 0});\\n    }\\n}\\n\",\"keccak256\":\"0xf273ee49bad2f0df9949848a86d77ede70547664094d5a5b988f1a50781cbcb5\",\"license\":\"UNLICENSED\"},\"src/state/Machines.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ValueStacks.sol\\\";\\nimport \\\"./PcStacks.sol\\\";\\nimport \\\"./Instructions.sol\\\";\\nimport \\\"./StackFrames.sol\\\";\\n\\nenum MachineStatus {\\n\\tRUNNING,\\n\\tFINISHED,\\n\\tERRORED,\\n\\tTOO_FAR\\n}\\n\\nstruct Machine {\\n\\tMachineStatus status;\\n\\tValueStack valueStack;\\n\\tValueStack internalStack;\\n\\tPcStack blockStack;\\n\\tStackFrameWindow frameStack;\\n\\tbytes32 globalStateHash;\\n\\tuint32 moduleIdx;\\n\\tuint32 functionIdx;\\n\\tuint32 functionPc;\\n\\tbytes32 modulesRoot;\\n}\\n\\nlibrary Machines {\\n\\tfunction hash(Machine memory mach) internal pure returns (bytes32) {\\n\\t\\t// Warning: the non-running hashes are replicated in BlockChallenge\\n\\t\\tif (mach.status == MachineStatus.RUNNING) {\\n\\t\\t\\treturn keccak256(abi.encodePacked(\\n\\t\\t\\t\\t\\\"Machine running:\\\",\\n\\t\\t\\t\\tValueStacks.hash(mach.valueStack),\\n\\t\\t\\t\\tValueStacks.hash(mach.internalStack),\\n\\t\\t\\t\\tPcStacks.hash(mach.blockStack),\\n\\t\\t\\t\\tStackFrames.hash(mach.frameStack),\\n\\t\\t\\t\\tmach.globalStateHash,\\n\\t\\t\\t\\tmach.moduleIdx,\\n\\t\\t\\t\\tmach.functionIdx,\\n\\t\\t\\t\\tmach.functionPc,\\n\\t\\t\\t\\tmach.modulesRoot\\n\\t\\t\\t));\\n\\t\\t} else if (mach.status == MachineStatus.FINISHED) {\\n\\t\\t\\treturn keccak256(abi.encodePacked(\\n\\t\\t\\t\\t\\\"Machine finished:\\\",\\n\\t\\t\\t\\tmach.globalStateHash\\n\\t\\t\\t));\\n\\t\\t} else if (mach.status == MachineStatus.ERRORED) {\\n\\t\\t\\treturn keccak256(abi.encodePacked(\\\"Machine errored:\\\"));\\n\\t\\t} else if (mach.status == MachineStatus.TOO_FAR) {\\n\\t\\t\\treturn keccak256(abi.encodePacked(\\\"Machine too far:\\\"));\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"BAD_MACH_STATUS\\\");\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xc7501a5fabd0fe8a0aac6a4f5ae560789a0932287718fbe4eda68aa8ed37b273\",\"license\":\"UNLICENSED\"},\"src/state/MerkleProofs.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\nimport \\\"./Instructions.sol\\\";\\nimport \\\"./Modules.sol\\\";\\n\\nstruct MerkleProof {\\n\\tbytes32[] counterparts;\\n}\\n\\nlibrary MerkleProofs {\\n\\tfunction computeRootFromValue(MerkleProof memory proof, uint256 index, Value memory leaf) internal pure returns (bytes32) {\\n\\t\\treturn computeRootUnsafe(proof, index, Values.hash(leaf), \\\"Value merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromInstruction(MerkleProof memory proof, uint256 index, Instruction memory inst) internal pure returns (bytes32) {\\n\\t\\treturn computeRootUnsafe(proof, index, Instructions.hash(inst), \\\"Instruction merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromFunction(MerkleProof memory proof, uint256 index, bytes32 codeRoot) internal pure returns (bytes32) {\\n\\t\\tbytes32 h = keccak256(abi.encodePacked(\\\"Function:\\\", codeRoot));\\n\\t\\treturn computeRootUnsafe(proof, index, h, \\\"Function merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromMemory(MerkleProof memory proof, uint256 index, bytes32 contents) internal pure returns (bytes32) {\\n\\t\\tbytes32 h = keccak256(abi.encodePacked(\\\"Memory leaf:\\\", contents));\\n\\t\\treturn computeRootUnsafe(proof, index, h, \\\"Memory merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromElement(MerkleProof memory proof, uint256 index, bytes32 funcTypeHash, Value memory val) internal pure returns (bytes32) {\\n\\t\\tbytes32 h = keccak256(abi.encodePacked(\\\"Table element:\\\", funcTypeHash, Values.hash(val)));\\n\\t\\treturn computeRootUnsafe(proof, index, h, \\\"Table element merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromTable(MerkleProof memory proof, uint256 index, uint8 tableType, uint64 tableSize, bytes32 elementsRoot) internal pure returns (bytes32) {\\n\\t\\tbytes32 h = keccak256(abi.encodePacked(\\\"Table:\\\", tableType, tableSize, elementsRoot));\\n\\t\\treturn computeRootUnsafe(proof, index, h, \\\"Table merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromModule(MerkleProof memory proof, uint256 index, Module memory mod) internal pure returns (bytes32) {\\n\\t\\treturn computeRootUnsafe(proof, index, Modules.hash(mod), \\\"Module merkle tree:\\\");\\n\\t}\\n\\n\\t// WARNING: leafHash must be computed in such a way that it cannot be a non-leaf hash.\\n\\tfunction computeRootUnsafe(MerkleProof memory proof, uint256 index, bytes32 leafHash, string memory prefix) internal pure returns (bytes32 h) {\\n\\t\\th = leafHash;\\n\\t\\tfor (uint256 layer = 0; layer < proof.counterparts.length; layer++) {\\n\\t\\t\\tif (index & 1 == 0) {\\n\\t\\t\\t\\th = keccak256(abi.encodePacked(prefix, h, proof.counterparts[layer]));\\n\\t\\t\\t} else {\\n\\t\\t\\t\\th = keccak256(abi.encodePacked(prefix, proof.counterparts[layer], h));\\n\\t\\t\\t}\\n\\t\\t\\tindex >>= 1;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x3696497409a3c3cdf6e0af1cc0048dbaa9fcb9ead23b409a717367e5dc08ed07\",\"license\":\"UNLICENSED\"},\"src/state/ModuleMemories.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./MerkleProofs.sol\\\";\\nimport \\\"./Deserialize.sol\\\";\\n\\nstruct ModuleMemory {\\n\\tuint64 size;\\n\\tbytes32 merkleRoot;\\n}\\n\\nlibrary ModuleMemories {\\n\\tfunction hash(ModuleMemory memory mem) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\\"Memory:\\\", mem.size, mem.merkleRoot));\\n\\t}\\n\\n\\tfunction proveLeaf(ModuleMemory memory mem, uint256 leafIdx, bytes calldata proof, uint256 startOffset) internal pure returns (bytes32 contents, uint256 offset, MerkleProof memory merkle) {\\n\\t\\toffset = startOffset;\\n\\t\\t(contents, offset) = Deserialize.b32(proof, offset);\\n\\t\\t(merkle, offset) = Deserialize.merkleProof(proof, offset);\\n\\t\\tbytes32 recomputedRoot = MerkleProofs.computeRootFromMemory(merkle, leafIdx, contents);\\n\\t\\trequire(recomputedRoot == mem.merkleRoot, \\\"WRONG_MEM_ROOT\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0x5f836a5d36dff4e34cd02ef20f16eccbe6869fe9011eba8e8ff6ba0430910fe0\",\"license\":\"UNLICENSED\"},\"src/state/Modules.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ModuleMemories.sol\\\";\\n\\nstruct Module {\\n    bytes32 globalsMerkleRoot;\\n    ModuleMemory moduleMemory;\\n    bytes32 tablesMerkleRoot;\\n    bytes32 functionsMerkleRoot;\\n    uint32 internalsOffset;\\n}\\n\\nlibrary Modules {\\n    function hash(Module memory mod) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"Module:\\\",\\n                    mod.globalsMerkleRoot,\\n                    ModuleMemories.hash(mod.moduleMemory),\\n                    mod.tablesMerkleRoot,\\n                    mod.functionsMerkleRoot,\\n                    mod.internalsOffset\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x40ac3cca47c15c6f601467e1a3a35bb058d65fd5ac74c628edcdec0fa4aad0f4\",\"license\":\"UNLICENSED\"},\"src/state/PcArrays.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nstruct PcArray {\\n\\tuint32[] inner;\\n}\\n\\nlibrary PcArrays {\\n\\tfunction get(PcArray memory arr, uint256 index) internal pure returns (uint32) {\\n\\t\\treturn arr.inner[index];\\n\\t}\\n\\n\\tfunction set(PcArray memory arr, uint256 index, uint32 val) internal pure {\\n\\t\\tarr.inner[index] = val;\\n\\t}\\n\\n\\tfunction length(PcArray memory arr) internal pure returns (uint256) {\\n\\t\\treturn arr.inner.length;\\n\\t}\\n\\n\\tfunction push(PcArray memory arr, uint32 val) internal pure {\\n\\t\\tuint32[] memory newInner = new uint32[](arr.inner.length + 1);\\n\\t\\tfor (uint256 i = 0; i < arr.inner.length; i++) {\\n\\t\\t\\tnewInner[i] = arr.inner[i];\\n\\t\\t}\\n\\t\\tnewInner[arr.inner.length] = val;\\n\\t\\tarr.inner = newInner;\\n\\t}\\n\\n\\tfunction pop(PcArray memory arr) internal pure returns (uint32 popped) {\\n\\t\\tpopped = arr.inner[arr.inner.length - 1];\\n\\t\\tuint32[] memory newInner = new uint32[](arr.inner.length - 1);\\n\\t\\tfor (uint256 i = 0; i < newInner.length; i++) {\\n\\t\\t\\tnewInner[i] = arr.inner[i];\\n\\t\\t}\\n\\t\\tarr.inner = newInner;\\n\\t}\\n}\\n\",\"keccak256\":\"0x1a2fa6e3929c5e6afd56643896b8074ee830207866ed65c2e85dd7908482c39b\",\"license\":\"UNLICENSED\"},\"src/state/PcStacks.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PcArrays.sol\\\";\\n\\nstruct PcStack {\\n\\tPcArray proved;\\n\\tbytes32 remainingHash;\\n}\\n\\nlibrary PcStacks {\\n\\tfunction hash(PcStack memory stack) internal pure returns (bytes32 h) {\\n\\t\\th = stack.remainingHash;\\n\\t\\tuint256 len = PcArrays.length(stack.proved);\\n\\t\\tfor (uint256 i = 0; i < len; i++) {\\n\\t\\t\\th = keccak256(abi.encodePacked(\\\"Program counter stack:\\\", PcArrays.get(stack.proved, i), h));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction pop(PcStack memory stack) internal pure returns (uint32) {\\n\\t\\treturn PcArrays.pop(stack.proved);\\n\\t}\\n\\n\\tfunction push(PcStack memory stack, uint32 val) internal pure {\\n\\t\\treturn PcArrays.push(stack.proved, val);\\n\\t}\\n\\n\\tfunction isEmpty(PcStack memory stack) internal pure returns (bool) {\\n\\t\\treturn PcArrays.length(stack.proved) == 0 && stack.remainingHash == bytes32(0);\\n\\t}\\n\\n\\tfunction hasProvenDepthLessThan(PcStack memory stack, uint256 bound) internal pure returns (bool) {\\n\\t\\treturn PcArrays.length(stack.proved) < bound && stack.remainingHash == bytes32(0);\\n\\t}\\n}\\n\",\"keccak256\":\"0x90258f73cc0d9af360f8ded68504aa1a2841ff46c20041dc40fc9df16a62b281\",\"license\":\"UNLICENSED\"},\"src/state/StackFrames.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\n\\nstruct StackFrame {\\n    Value returnPc;\\n    bytes32 localsMerkleRoot;\\n    uint32 callerModule;\\n    uint32 callerModuleInternals;\\n}\\n\\nstruct StackFrameWindow {\\n    StackFrame[] proved;\\n    bytes32 remainingHash;\\n}\\n\\nlibrary StackFrames {\\n    function hash(StackFrame memory frame) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"Stack frame:\\\",\\n                    Values.hash(frame.returnPc),\\n                    frame.localsMerkleRoot,\\n                    frame.callerModule,\\n                    frame.callerModuleInternals\\n                )\\n            );\\n    }\\n\\n    function hash(StackFrameWindow memory window)\\n        internal\\n        pure\\n        returns (bytes32 h)\\n    {\\n        h = window.remainingHash;\\n        for (uint256 i = 0; i < window.proved.length; i++) {\\n            h = keccak256(\\n                abi.encodePacked(\\n                    \\\"Stack frame stack:\\\",\\n                    hash(window.proved[i]),\\n                    h\\n                )\\n            );\\n        }\\n    }\\n\\n    function peek(StackFrameWindow memory window)\\n        internal\\n        pure\\n        returns (StackFrame memory)\\n    {\\n        require(window.proved.length == 1, \\\"BAD_WINDOW_LENGTH\\\");\\n        return window.proved[0];\\n    }\\n\\n    function pop(StackFrameWindow memory window)\\n        internal\\n        pure\\n        returns (StackFrame memory frame)\\n    {\\n        require(window.proved.length == 1, \\\"BAD_WINDOW_LENGTH\\\");\\n        frame = window.proved[0];\\n        window.proved = new StackFrame[](0);\\n    }\\n\\n    function push(StackFrameWindow memory window, StackFrame memory frame)\\n        internal\\n        pure\\n    {\\n        StackFrame[] memory newProved = new StackFrame[](\\n            window.proved.length + 1\\n        );\\n        for (uint256 i = 0; i < window.proved.length; i++) {\\n            newProved[i] = window.proved[i];\\n        }\\n        newProved[window.proved.length] = frame;\\n        window.proved = newProved;\\n    }\\n}\\n\",\"keccak256\":\"0x33d0cd90f98e6036b274316c9ef622cdba8751a393656f838eb9795423073ee1\",\"license\":\"UNLICENSED\"},\"src/state/ValueArrays.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\n\\nstruct ValueArray {\\n\\tValue[] inner;\\n}\\n\\nlibrary ValueArrays {\\n\\tfunction get(ValueArray memory arr, uint256 index) internal pure returns (Value memory) {\\n\\t\\treturn arr.inner[index];\\n\\t}\\n\\n\\tfunction set(ValueArray memory arr, uint256 index, Value memory val) internal pure {\\n\\t\\tarr.inner[index] = val;\\n\\t}\\n\\n\\tfunction length(ValueArray memory arr) internal pure returns (uint256) {\\n\\t\\treturn arr.inner.length;\\n\\t}\\n\\n\\tfunction push(ValueArray memory arr, Value memory val) internal pure {\\n\\t\\tValue[] memory newInner = new Value[](arr.inner.length + 1);\\n\\t\\tfor (uint256 i = 0; i < arr.inner.length; i++) {\\n\\t\\t\\tnewInner[i] = arr.inner[i];\\n\\t\\t}\\n\\t\\tnewInner[arr.inner.length] = val;\\n\\t\\tarr.inner = newInner;\\n\\t}\\n\\n\\tfunction pop(ValueArray memory arr) internal pure returns (Value memory popped) {\\n\\t\\tpopped = arr.inner[arr.inner.length - 1];\\n\\t\\tValue[] memory newInner = new Value[](arr.inner.length - 1);\\n\\t\\tfor (uint256 i = 0; i < newInner.length; i++) {\\n\\t\\t\\tnewInner[i] = arr.inner[i];\\n\\t\\t}\\n\\t\\tarr.inner = newInner;\\n\\t}\\n}\\n\",\"keccak256\":\"0xee609e88227972d896e3c4dd3eb9d5fbedbcc043c1c593735923509557c5f125\",\"license\":\"UNLICENSED\"},\"src/state/ValueStacks.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\nimport \\\"./ValueArrays.sol\\\";\\n\\nstruct ValueStack {\\n\\tValueArray proved;\\n\\tbytes32 remainingHash;\\n}\\n\\nlibrary ValueStacks {\\n\\tfunction hash(ValueStack memory stack) internal pure returns (bytes32 h) {\\n\\t\\th = stack.remainingHash;\\n\\t\\tuint256 len = ValueArrays.length(stack.proved);\\n\\t\\tfor (uint256 i = 0; i < len; i++) {\\n\\t\\t\\th = keccak256(abi.encodePacked(\\\"Value stack:\\\", Values.hash(ValueArrays.get(stack.proved, i)), h));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction peek(ValueStack memory stack) internal pure returns (Value memory) {\\n\\t\\tuint256 len = ValueArrays.length(stack.proved);\\n\\t\\treturn ValueArrays.get(stack.proved, len - 1);\\n\\t}\\n\\n\\tfunction pop(ValueStack memory stack) internal pure returns (Value memory) {\\n\\t\\treturn ValueArrays.pop(stack.proved);\\n\\t}\\n\\n\\tfunction push(ValueStack memory stack, Value memory val) internal pure {\\n\\t\\treturn ValueArrays.push(stack.proved, val);\\n\\t}\\n\\n\\tfunction isEmpty(ValueStack memory stack) internal pure returns (bool) {\\n\\t\\treturn ValueArrays.length(stack.proved) == 0 && stack.remainingHash == bytes32(0);\\n\\t}\\n\\n\\tfunction hasProvenDepthLessThan(ValueStack memory stack, uint256 bound) internal pure returns (bool) {\\n\\t\\treturn ValueArrays.length(stack.proved) < bound && stack.remainingHash == bytes32(0);\\n\\t}\\n}\\n\",\"keccak256\":\"0x5c0cf0db204e28fff836c7b53c622e6d7fcf5d91d3f17a275e2d99710b3dbcb5\",\"license\":\"UNLICENSED\"},\"src/state/Values.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nenum ValueType {\\n\\tI32,\\n\\tI64,\\n\\tF32,\\n\\tF64,\\n\\tREF_NULL,\\n\\tFUNC_REF,\\n\\tINTERNAL_REF,\\n\\tSTACK_BOUNDARY\\n}\\n\\nstruct Value {\\n\\tValueType valueType;\\n\\tuint256 contents;\\n}\\n\\nlibrary Values {\\n\\tfunction hash(Value memory val) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\\"Value:\\\", val.valueType, val.contents));\\n\\t}\\n\\n\\tfunction maxValueType() internal pure returns (ValueType) {\\n\\t\\treturn ValueType.STACK_BOUNDARY;\\n\\t}\\n\\n\\tfunction isNumeric(ValueType val) internal pure returns (bool) {\\n\\t\\treturn val == ValueType.I32 || val == ValueType.I64 || val == ValueType.F32 || val == ValueType.F64;\\n\\t}\\n\\n\\tfunction isNumeric(Value memory val) internal pure returns (bool) {\\n\\t\\treturn isNumeric(val.valueType);\\n\\t}\\n\\n\\tfunction assumeI32(Value memory val) internal pure returns(uint32) {\\n\\t\\tuint uintval = uint(val.contents);\\n\\t\\trequire(val.valueType == ValueType.I32, \\\"NOT_I32\\\");\\n\\t\\trequire(uintval < (1<<32), \\\"BAD_I32\\\");\\n\\t\\treturn uint32(uintval);\\n\\t}\\n\\n\\tfunction assumeI64(Value memory val) internal pure returns(uint64) {\\n\\t\\tuint uintval = uint(val.contents);\\n\\t\\trequire(val.valueType == ValueType.I64, \\\"NOT_I64\\\");\\n\\t\\trequire(uintval < (1<<64), \\\"BAD_I64\\\");\\n\\t\\treturn uint64(uintval);\\n\\t}\\n\\n\\tfunction newRefNull() internal pure returns (Value memory) {\\n\\t\\treturn Value({\\n\\t\\t\\tvalueType: ValueType.REF_NULL,\\n\\t\\t\\tcontents: 0\\n\\t\\t});\\n\\t}\\n\\n\\tfunction newI32(uint32 x) internal pure returns (Value memory) {\\n\\t\\treturn Value({\\n\\t\\t\\tvalueType: ValueType.I32,\\n\\t\\t\\tcontents: uint256(x)\\n\\t\\t});\\n\\t}\\n\\n\\tfunction newI64(uint64 x) internal pure returns (Value memory) {\\n\\t\\treturn Value({\\n\\t\\t\\tvalueType: ValueType.I64,\\n\\t\\t\\tcontents: uint256(x)\\n\\t\\t});\\n\\t}\\n\\n\\tfunction newBoolean(bool x) internal pure returns (Value memory) {\\n\\t\\tif (x) {\\n\\t\\t\\treturn newI32(uint32(1));\\n\\t\\t} else {\\n\\t\\t\\treturn newI32(uint32(0));\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x2c30c3b373b6442aaef6407afe370abc25a2eb41bb4368294dd120c99c1b594f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6031,
        "contract": "src/osp/OneStepProverHostIo.sol:OneStepProverHostIo",
        "label": "seqInbox",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISequencerInbox)1839"
      },
      {
        "astId": 6034,
        "contract": "src/osp/OneStepProverHostIo.sol:OneStepProverHostIo",
        "label": "delayedInbox",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IBridge)1703"
      }
    ],
    "types": {
      "t_contract(IBridge)1703": {
        "encoding": "inplace",
        "label": "contract IBridge",
        "numberOfBytes": "20"
      },
      "t_contract(ISequencerInbox)1839": {
        "encoding": "inplace",
        "label": "contract ISequencerInbox",
        "numberOfBytes": "20"
      }
    }
  }
}