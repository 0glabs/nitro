{
  "address": "0x4640833EE783Ad940A45F0E26Bc6049cE3965838",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "messageNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "InboxMessageDelivered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "messageNum",
          "type": "uint256"
        }
      ],
      "name": "InboxMessageDeliveredFromOrigin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "PauseToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "RewriteToggled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "contract IBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "l2CallValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSubmissionCost",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "excessFeeRefundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "callValueRefundAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "createRetryableTicket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "l2CallValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSubmissionCost",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "excessFeeRefundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "callValueRefundAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "createRetryableTicketNoRefundAliasRewrite",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxSubmissionCost",
          "type": "uint256"
        }
      ],
      "name": "depositEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBridge",
          "name": "_bridge",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCreateRetryablePaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseCreateRetryables",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "sendContractTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destAddr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "sendL1FundedContractTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destAddr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "sendL1FundedUnsignedTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "messageData",
          "type": "bytes"
        }
      ],
      "name": "sendL2Message",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "messageData",
          "type": "bytes"
        }
      ],
      "name": "sendL2MessageFromOrigin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "sendUnsignedTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shouldRewriteSender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startRewriteAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopRewriteAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseCreateRetryables",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x395a631e4882f341163bb116d1af13d75c559ff82e4f9b6749f33ee689021c50",
  "receipt": {
    "to": null,
    "from": "0xFF21a5fD9E13241c95033Fcbc501EeaDC3572771",
    "contractAddress": "0x4640833EE783Ad940A45F0E26Bc6049cE3965838",
    "transactionIndex": 0,
    "gasUsed": "1949699",
    "logsBloom": "0x
    "blockHash": "0x802981017474a5ce3a841b9b2a6e27d2e53c02a8dde7ab4526c210588611a8c5",
    "transactionHash": "0x395a631e4882f341163bb116d1af13d75c559ff82e4f9b6749f33ee689021c50",
    "logs": [],
    "blockNumber": 57,
    "cumulativeGasUsed": "1949699",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e7611196dd0ae85361a704f7442944b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InboxMessageDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"}],\"name\":\"InboxMessageDeliveredFromOrigin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"PauseToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"RewriteToggled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contract IBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"l2CallValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"excessFeeRefundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callValueRefundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createRetryableTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"l2CallValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"excessFeeRefundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callValueRefundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createRetryableTicketNoRefundAliasRewrite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"depositEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCreateRetryablePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseCreateRetryables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sendContractTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sendL1FundedContractTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sendL1FundedUnsignedTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"messageData\",\"type\":\"bytes\"}],\"name\":\"sendL2Message\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"messageData\",\"type\":\"bytes\"}],\"name\":\"sendL2MessageFromOrigin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sendUnsignedTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldRewriteSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startRewriteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopRewriteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseCreateRetryables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createRetryableTicket(address,uint256,uint256,address,address,uint256,uint256,bytes)\":{\"details\":\"all msg.value will deposited to callValueRefundAddress on L2\",\"params\":{\"callValueRefundAddress\":\"l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\",\"data\":\"ABI encoded data of L2 message\",\"destAddr\":\"destination L2 contract address\",\"excessFeeRefundAddress\":\"maxgas x gasprice - execution cost gets credited here on L2 balance\",\"gasPriceBid\":\"price bid for L2 execution\",\"l2CallValue\":\"call value for retryable L2 message\",\"maxGas\":\"Max gas deducted from user's L2 balance to cover L2 execution\",\"maxSubmissionCost\":\"Max gas deducted from user's L2 balance to cover base submission fee\"},\"returns\":{\"_0\":\"unique id for retryable transaction (keccak256(requestID, uint(0) )\"}},\"createRetryableTicketNoRefundAliasRewrite(address,uint256,uint256,address,address,uint256,uint256,bytes)\":{\"details\":\"Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress). createRetryableTicket method is the recommended standard.\",\"params\":{\"callValueRefundAddress\":\"l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\",\"data\":\"ABI encoded data of L2 message\",\"destAddr\":\"destination L2 contract address\",\"excessFeeRefundAddress\":\"maxgas x gasprice - execution cost gets credited here on L2 balance\",\"gasPriceBid\":\"price bid for L2 execution\",\"l2CallValue\":\"call value for retryable L2 message\",\"maxGas\":\"Max gas deducted from user's L2 balance to cover L2 execution\",\"maxSubmissionCost\":\"Max gas deducted from user's L2 balance to cover base submission fee\"},\"returns\":{\"_0\":\"unique id for retryable transaction (keccak256(requestID, uint(0) )\"}},\"depositEth(uint256)\":{\"details\":\"this function should not be called inside contract constructors\"},\"sendL2Message(bytes)\":{\"details\":\"This method can be used to send any type of message that doesn't require L1 validation\",\"params\":{\"messageData\":\"Data of the message being sent\"}},\"sendL2MessageFromOrigin(bytes)\":{\"details\":\"This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\",\"params\":{\"messageData\":\"Data of the message being sent\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createRetryableTicket(address,uint256,uint256,address,address,uint256,uint256,bytes)\":{\"notice\":\"Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\"},\"createRetryableTicketNoRefundAliasRewrite(address,uint256,uint256,address,address,uint256,uint256,bytes)\":{\"notice\":\"Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\"},\"depositEth(uint256)\":{\"notice\":\"deposit eth from L1 to L2\"},\"pauseCreateRetryables()\":{\"notice\":\"pauses creating retryables\"},\"sendL2Message(bytes)\":{\"notice\":\"Send a generic L2 message to the chain\"},\"sendL2MessageFromOrigin(bytes)\":{\"notice\":\"Send a generic L2 message to the chain\"},\"startRewriteAddress()\":{\"notice\":\"start rewriting addresses in eth deposits\"},\"stopRewriteAddress()\":{\"notice\":\"stop rewriting addresses in eth deposits\"},\"unpauseCreateRetryables()\":{\"notice\":\"unpauses creating retryables\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/bridge/Inbox.sol\":\"Inbox\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd0fc241d70f27a08c43c0c9e5a15d2661a643d8db46c219b2322bef8a34bbdd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"src/bridge/Bridge.sol\":{\"content\":\"//\\n// Copyright 2021, Offchain Labs, Inc. All rights reserved.\\n// SPDX-License-Identifier: UNLICENSED\\n//\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Inbox.sol\\\";\\nimport \\\"./Outbox.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./IBridge.sol\\\";\\n\\ncontract Bridge is OwnableUpgradeable, IBridge {\\n    using Address for address;\\n    struct InOutInfo {\\n        uint256 index;\\n        bool allowed;\\n    }\\n\\n    mapping(address => InOutInfo) private allowedInboxesMap;\\n    //mapping(address => InOutInfo) private allowedOutboxesMap;\\n\\n    address[] public allowedInboxList;\\n    address[] public allowedOutboxList;\\n\\n    address public override activeOutbox;\\n\\n    // Accumulator for delayed inbox; tail represents hash of the current state; each element represents the inclusion of a new message.\\n    bytes32[] public override inboxAccs;\\n\\n    function initialize() external initializer {\\n        __Ownable_init();\\n    }\\n\\n    function allowedInboxes(address inbox) external view override returns (bool) {\\n        return allowedInboxesMap[inbox].allowed;\\n    }\\n\\n    function allowedOutboxes(address outbox) external view override returns (bool) {\\n        revert(\\\"NOT_IMPLEMENTED\\\");\\n    }\\n\\n    function deliverMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable override returns (uint256) {\\n        require(allowedInboxesMap[msg.sender].allowed, \\\"NOT_FROM_INBOX\\\");\\n        return\\n            addMessageToInbox(\\n                kind,\\n                sender,\\n                block.number,\\n                block.timestamp, // solhint-disable-line not-rely-on-time\\n                tx.gasprice,\\n                messageDataHash\\n            );\\n    }\\n\\n    function addMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        uint256 blockNumber,\\n        uint256 blockTimestamp,\\n        uint256 gasPrice,\\n        bytes32 messageDataHash\\n    ) internal returns (uint256) {\\n        uint256 count = inboxAccs.length;\\n        bytes32 messageHash = Messages.messageHash(\\n            kind,\\n            sender,\\n            blockNumber,\\n            blockTimestamp,\\n            count,\\n            gasPrice,\\n            messageDataHash\\n        );\\n        bytes32 prevAcc = 0;\\n        if (count > 0) {\\n            prevAcc = inboxAccs[count - 1];\\n        }\\n        inboxAccs.push(Messages.addMessageToInbox(prevAcc, messageHash));\\n        emit MessageDelivered(count, prevAcc, msg.sender, kind, sender, messageDataHash, gasPrice, blockTimestamp);\\n        return count;\\n    }\\n\\n    function executeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external override returns (bool success, bytes memory returnData) {\\n        revert(\\\"NOT_IMPLEMENTED\\\");\\n    }\\n\\n    function setInbox(address inbox, bool enabled) external override onlyOwner {\\n        InOutInfo storage info = allowedInboxesMap[inbox];\\n        bool alreadyEnabled = info.allowed;\\n        emit InboxToggle(inbox, enabled);\\n        if ((alreadyEnabled && enabled) || (!alreadyEnabled && !enabled)) {\\n            return;\\n        }\\n        if (enabled) {\\n            allowedInboxesMap[inbox] = InOutInfo(allowedInboxList.length, true);\\n            allowedInboxList.push(inbox);\\n        } else {\\n            allowedInboxList[info.index] = allowedInboxList[allowedInboxList.length - 1];\\n            allowedInboxesMap[allowedInboxList[info.index]].index = info.index;\\n            allowedInboxList.pop();\\n            delete allowedInboxesMap[inbox];\\n        }\\n    }\\n\\n    function setOutbox(address outbox, bool enabled) external override onlyOwner {\\n        revert(\\\"NOT_IMPLEMENTED\\\");\\n    }\\n\\n    function messageCount() external view override returns (uint256) {\\n        return inboxAccs.length;\\n    }\\n}\\n\",\"keccak256\":\"0x681d9fa7c8eb82c66fe1675f13f53daafd7a6c57a6d0b13411052b2b147ab79f\",\"license\":\"UNLICENSED\"},\"src/bridge/IBridge.sol\":{\"content\":\"//\\n// Copyright 2021, Offchain Labs, Inc. All rights reserved.\\n// SPDX-License-Identifier: UNLICENSED\\n//\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBridge {\\n    event MessageDelivered(\\n        uint256 indexed messageIndex,\\n        bytes32 indexed beforeInboxAcc,\\n        address inbox,\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash,\\n        uint256 gasPrice,\\n        uint256 timestamp\\n    );\\n\\n    event BridgeCallTriggered(\\n        address indexed outbox,\\n        address indexed destAddr,\\n        uint256 amount,\\n        bytes data\\n    );\\n\\n    event InboxToggle(address indexed inbox, bool enabled);\\n\\n    event OutboxToggle(address indexed outbox, bool enabled);\\n\\n    function deliverMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable returns (uint256);\\n\\n    function executeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    // These are only callable by the admin\\n    function setInbox(address inbox, bool enabled) external;\\n\\n    function setOutbox(address inbox, bool enabled) external;\\n\\n    // View functions\\n\\n    function activeOutbox() external view returns (address);\\n\\n    function allowedInboxes(address inbox) external view returns (bool);\\n\\n    function allowedOutboxes(address outbox) external view returns (bool);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function messageCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xae4ba4d11408a77db1d861568938cd19d776955a7ddee37d0d2fcecbf92b403c\",\"license\":\"UNLICENSED\"},\"src/bridge/IInbox.sol\":{\"content\":\"//\\n// Copyright 2021, Offchain Labs, Inc. All rights reserved.\\n// SPDX-License-Identifier: UNLICENSED\\n//\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBridge.sol\\\";\\nimport \\\"./IMessageProvider.sol\\\";\\n\\ninterface IInbox is IMessageProvider {\\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\\n\\n    function sendUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendL1FundedUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function sendL1FundedContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicket(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function depositEth(uint256 maxSubmissionCost) external payable returns (uint256);\\n\\n    function bridge() external view returns (IBridge);\\n}\\n\",\"keccak256\":\"0x74304957d5643bc8f9c09d0c21eee659a0045b8d7a8d725e06abea1396118ce5\",\"license\":\"UNLICENSED\"},\"src/bridge/IMessageProvider.sol\":{\"content\":\"//\\n// Copyright 2021, Offchain Labs, Inc. All rights reserved.\\n// SPDX-License-Identifier: UNLICENSED\\n//\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMessageProvider {\\n    event InboxMessageDelivered(uint256 indexed messageNum, bytes data);\\n\\n    event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);\\n}\\n\",\"keccak256\":\"0x6da18bcd0a22a503985c082f6555df5aaefa448f331003f26e9113a55677ee79\",\"license\":\"UNLICENSED\"},\"src/bridge/Inbox.sol\":{\"content\":\"//\\n// Copyright 2021, Offchain Labs, Inc. All rights reserved.\\n// SPDX-License-Identifier: UNLICENSED\\n//\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IInbox.sol\\\";\\nimport \\\"./IBridge.sol\\\";\\n\\nimport \\\"./Messages.sol\\\";\\nimport \\\"../libraries/AddressAliasHelper.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./Bridge.sol\\\";\\n\\ncontract Inbox is IInbox {\\n    uint8 internal constant ETH_TRANSFER = 0;\\n    uint8 internal constant L2_MSG = 3;\\n    uint8 internal constant L1MessageType_L2FundedByL1 = 7;\\n    uint8 internal constant L1MessageType_submitRetryableTx = 9;\\n\\n    uint8 internal constant L2MessageType_unsignedEOATx = 0;\\n    uint8 internal constant L2MessageType_unsignedContractTx = 1;\\n\\n    IBridge public override bridge;\\n\\n    bool public isCreateRetryablePaused;\\n    bool public shouldRewriteSender;\\n\\n    function initialize(IBridge _bridge) external {\\n        require(address(bridge) == address(0), \\\"ALREADY_INIT\\\");\\n        bridge = _bridge;\\n    }\\n\\n    /**\\n     * @notice Send a generic L2 message to the chain\\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\\n     * @param messageData Data of the message being sent\\n     */\\n    function sendL2MessageFromOrigin(bytes calldata messageData)\\n        external\\n        returns (uint256)\\n    {\\n        // solhint-disable-next-line avoid-tx-origin\\n        require(msg.sender == tx.origin, \\\"origin only\\\");\\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\\n        emit InboxMessageDeliveredFromOrigin(msgNum);\\n        return msgNum;\\n    }\\n\\n    /**\\n     * @notice Send a generic L2 message to the chain\\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\\n     * @param messageData Data of the message being sent\\n     */\\n    function sendL2Message(bytes calldata messageData)\\n        external\\n        override\\n        returns (uint256)\\n    {\\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\\n        emit InboxMessageDelivered(msgNum, messageData);\\n        return msgNum;\\n    }\\n\\n    function sendL1FundedUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable virtual override returns (uint256) {\\n        return\\n            _deliverMessage(\\n                L1MessageType_L2FundedByL1,\\n                msg.sender,\\n                abi.encodePacked(\\n                    L2MessageType_unsignedEOATx,\\n                    maxGas,\\n                    gasPriceBid,\\n                    nonce,\\n                    uint256(uint160(bytes20(destAddr))),\\n                    msg.value,\\n                    data\\n                )\\n            );\\n    }\\n\\n    function sendL1FundedContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable virtual override returns (uint256) {\\n        return\\n            _deliverMessage(\\n                L1MessageType_L2FundedByL1,\\n                msg.sender,\\n                abi.encodePacked(\\n                    L2MessageType_unsignedContractTx,\\n                    maxGas,\\n                    gasPriceBid,\\n                    uint256(uint160(bytes20(destAddr))),\\n                    msg.value,\\n                    data\\n                )\\n            );\\n    }\\n\\n    function sendUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external virtual override returns (uint256) {\\n        return\\n            _deliverMessage(\\n                L2_MSG,\\n                msg.sender,\\n                abi.encodePacked(\\n                    L2MessageType_unsignedEOATx,\\n                    maxGas,\\n                    gasPriceBid,\\n                    nonce,\\n                    uint256(uint160(bytes20(destAddr))),\\n                    amount,\\n                    data\\n                )\\n            );\\n    }\\n\\n    function sendContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external virtual override returns (uint256) {\\n        return\\n            _deliverMessage(\\n                L2_MSG,\\n                msg.sender,\\n                abi.encodePacked(\\n                    L2MessageType_unsignedContractTx,\\n                    maxGas,\\n                    gasPriceBid,\\n                    uint256(uint160(bytes20(destAddr))),\\n                    amount,\\n                    data\\n                )\\n            );\\n    }\\n\\n    modifier onlyOwner() {\\n        // the rollup contract owns the bridge\\n        address bridgeowner = Bridge(address(bridge)).owner();\\n        // we want to validate the owner of the rollup\\n        //address owner = RollupBase(rollup).owner();\\n        require(msg.sender == bridgeowner, \\\"NOT_OWNER\\\");\\n        _;\\n    }\\n\\n    event PauseToggled(bool enabled);\\n\\n    /// @notice pauses creating retryables\\n    function pauseCreateRetryables() external onlyOwner {\\n        require(!isCreateRetryablePaused, \\\"ALREADY_PAUSED\\\");\\n        isCreateRetryablePaused = true;\\n        emit PauseToggled(true);\\n    }\\n\\n    /// @notice unpauses creating retryables\\n    function unpauseCreateRetryables() external onlyOwner {\\n        require(isCreateRetryablePaused, \\\"NOT_PAUSED\\\");\\n        isCreateRetryablePaused = false;\\n        emit PauseToggled(false);\\n    }\\n\\n    event RewriteToggled(bool enabled);\\n\\n    /// @notice start rewriting addresses in eth deposits\\n    function startRewriteAddress() external onlyOwner {\\n        require(!shouldRewriteSender, \\\"ALREADY_REWRITING\\\");\\n        shouldRewriteSender = true;\\n        emit RewriteToggled(true);\\n    }\\n\\n    /// @notice stop rewriting addresses in eth deposits\\n    function stopRewriteAddress() external onlyOwner {\\n        require(shouldRewriteSender, \\\"NOT_REWRITING\\\");\\n        shouldRewriteSender = false;\\n        emit RewriteToggled(false);\\n    }\\n\\n    /// @notice deposit eth from L1 to L2\\n    /// @dev this function should not be called inside contract constructors\\n    function depositEth(uint256 maxSubmissionCost)\\n        external\\n        payable\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(!isCreateRetryablePaused, \\\"CREATE_RETRYABLES_PAUSED\\\");\\n        address sender = msg.sender;\\n        address destinationAddress = msg.sender;\\n\\n        if (shouldRewriteSender) {\\n            if (!Address.isContract(sender) && tx.origin == msg.sender) {\\n                // isContract check fails if this function is called during a contract's constructor.\\n                // We don't adjust the address for calls coming from L1 contracts since their addresses get remapped\\n                // If the caller is an EOA, we adjust the address.\\n                // This is needed because unsigned messages to the L2 (such as retryables)\\n                // have the L1 sender address mapped.\\n                // Here we preemptively reverse the mapping for EOAs so deposits work as expected\\n                sender = AddressAliasHelper.undoL1ToL2Alias(sender);\\n            } else {\\n                destinationAddress = AddressAliasHelper.applyL1ToL2Alias(destinationAddress);\\n            }\\n        }\\n\\n        return\\n            _deliverMessage(\\n                L1MessageType_submitRetryableTx,\\n                sender,\\n                abi.encodePacked(\\n                    // the beneficiary and other refund addresses don't get rewritten by arb-os\\n                    // so we use the original msg.sender value\\n                    uint256(uint160(bytes20(destinationAddress))),\\n                    uint256(0),\\n                    msg.value,\\n                    maxSubmissionCost,\\n                    uint256(uint160(bytes20(destinationAddress))),\\n                    uint256(uint160(bytes20(destinationAddress))),\\n                    uint256(0),\\n                    uint256(0),\\n                    uint256(0),\\n                    \\\"\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress). createRetryableTicket method is the recommended standard.\\n     * @param destAddr destination L2 contract address\\n     * @param l2CallValue call value for retryable L2 message\\n     * @param  maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\\n     * @param excessFeeRefundAddress maxgas x gasprice - execution cost gets credited here on L2 balance\\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\\n     * @param maxGas Max gas deducted from user's L2 balance to cover L2 execution\\n     * @param gasPriceBid price bid for L2 execution\\n     * @param data ABI encoded data of L2 message\\n     * @return unique id for retryable transaction (keccak256(requestID, uint(0) )\\n     */\\n    function createRetryableTicketNoRefundAliasRewrite(\\n        address destAddr,\\n        uint256 l2CallValue,\\n        uint256 maxSubmissionCost,\\n        address excessFeeRefundAddress,\\n        address callValueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) public payable virtual returns (uint256) {\\n        require(!isCreateRetryablePaused, \\\"CREATE_RETRYABLES_PAUSED\\\");\\n\\n        return\\n            _deliverMessage(\\n                L1MessageType_submitRetryableTx,\\n                msg.sender,\\n                abi.encodePacked(\\n                    uint256(uint160(bytes20(destAddr))),\\n                    l2CallValue,\\n                    msg.value,\\n                    maxSubmissionCost,\\n                    uint256(uint160(bytes20(excessFeeRefundAddress))),\\n                    uint256(uint160(bytes20(callValueRefundAddress))),\\n                    maxGas,\\n                    gasPriceBid,\\n                    data.length,\\n                    data\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\\n     * @param destAddr destination L2 contract address\\n     * @param l2CallValue call value for retryable L2 message\\n     * @param  maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\\n     * @param excessFeeRefundAddress maxgas x gasprice - execution cost gets credited here on L2 balance\\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\\n     * @param maxGas Max gas deducted from user's L2 balance to cover L2 execution\\n     * @param gasPriceBid price bid for L2 execution\\n     * @param data ABI encoded data of L2 message\\n     * @return unique id for retryable transaction (keccak256(requestID, uint(0) )\\n     */\\n    function createRetryableTicket(\\n        address destAddr,\\n        uint256 l2CallValue,\\n        uint256 maxSubmissionCost,\\n        address excessFeeRefundAddress,\\n        address callValueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable virtual override returns (uint256) {\\n        // if a refund address is a contract, we apply the alias to it\\n        // so that it can access its funds on the L2\\n        // since the beneficiary and other refund addresses don't get rewritten by arb-os\\n        if (shouldRewriteSender && Address.isContract(excessFeeRefundAddress)) {\\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\\n        }\\n        if (shouldRewriteSender && Address.isContract(callValueRefundAddress)) {\\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\\n        }\\n\\n        return\\n            createRetryableTicketNoRefundAliasRewrite(\\n                destAddr,\\n                l2CallValue,\\n                maxSubmissionCost,\\n                excessFeeRefundAddress,\\n                callValueRefundAddress,\\n                maxGas,\\n                gasPriceBid,\\n                data\\n            );\\n    }\\n\\n    function _deliverMessage(\\n        uint8 _kind,\\n        address _sender,\\n        bytes memory _messageData\\n    ) internal returns (uint256) {\\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\\n        emit InboxMessageDelivered(msgNum, _messageData);\\n        return msgNum;\\n    }\\n\\n    function deliverToBridge(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) internal returns (uint256) {\\n        return bridge.deliverMessageToInbox{ value: msg.value }(kind, sender, messageDataHash);\\n    }\\n}\\n\",\"keccak256\":\"0x63266c7421141f4253046a24f1d3312fd0283a07783faea7a3bd14d06f15635d\",\"license\":\"UNLICENSED\"},\"src/bridge/Messages.sol\":{\"content\":\"//\\n// Copyright 2021, Offchain Labs, Inc. All rights reserved.\\n// SPDX-License-Identifier: UNLICENSED\\n//\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Messages {\\n    function messageHash(\\n        uint8 kind,\\n        address sender,\\n        uint256 blockNumber,\\n        uint256 timestamp,\\n        uint256 inboxSeqNum,\\n        uint256 gasPriceL1,\\n        bytes32 messageDataHash\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    kind,\\n                    sender,\\n                    blockNumber,\\n                    timestamp,\\n                    inboxSeqNum,\\n                    gasPriceL1,\\n                    messageDataHash\\n                )\\n            );\\n    }\\n\\n    function addMessageToInbox(bytes32 inbox, bytes32 message) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(inbox, message));\\n    }\\n}\\n\",\"keccak256\":\"0xf98b507847f2b15d3923f38a164b12bdedc03f951bc981fec26607c3ed0c97b0\",\"license\":\"UNLICENSED\"},\"src/bridge/Outbox.sol\":{\"content\":\"//\\n// Copyright 2021, Offchain Labs, Inc. All rights reserved.\\n// SPDX-License-Identifier: UNLICENSED\\n//\\n\\npragma solidity ^0.8.0;\\n\\ncontract Outbox {\\n\\n}\\n\",\"keccak256\":\"0x16bfdc8023dcdf235b870e465e23860138f09a54e268da6ec2ed78748b3c1536\",\"license\":\"UNLICENSED\"},\"src/libraries/AddressAliasHelper.sol\":{\"content\":\"//\\n// Copyright 2021, Offchain Labs, Inc. All rights reserved.\\n// SPDX-License-Identifier: UNLICENSED\\n//\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressAliasHelper {\\n    uint160 constant offset = uint160(0x1111000000000000000000000000000000001111);\\n\\n    /// @notice Utility function that converts the address in the L1 that submitted a tx to\\n    /// the inbox to the msg.sender viewed in the L2\\n    /// @param l1Address the address in the L1 that triggered the tx to L2\\n    /// @return l2Address L2 address as viewed in msg.sender\\n    function applyL1ToL2Alias(address l1Address) internal pure returns (address l2Address) {\\n        l2Address = address(uint160(l1Address) + offset);\\n    }\\n\\n    /// @notice Utility function that converts the msg.sender viewed in the L2 to the\\n    /// address in the L1 that submitted a tx to the inbox\\n    /// @param l2Address L2 address as viewed in msg.sender\\n    /// @return l1Address the address in the L1 that triggered the tx to L2\\n    function undoL1ToL2Alias(address l2Address) internal pure returns (address l1Address) {\\n        l1Address = address(uint160(l2Address) - offset);\\n    }\\n}\\n\",\"keccak256\":\"0xf3ff81098c0e01d88c72e7d08e3e5ef3c3f14d49990f5e2810b903a170011585\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061226e806100206000396000f3fe6080604052600436106100fe5760003560e01c8063794cfd5111610095578063b4d9ec4411610064578063b4d9ec4414610306578063b75436bb14610331578063c4d66de81461036e578063e78cea9214610397578063fdebb9b3146103c2576100fe565b8063794cfd51146102845780637ae8d8b31461029b5780638a631aa6146102b25780639fe12da5146102ef576100fe565b80635075788b116100d15780635075788b146101b75780635e916758146101f4578063679b6ded1461022457806367ef3ab814610254576100fe565b80630f4d14e9146101035780631b871c8d146101335780631fe927cf146101635780632b40609a146101a0575b600080fd5b61011d60048036038101906101189190611547565b6103ed565b60405161012a9190611e3c565b60405180910390f35b61014d600480360381019061014891906113f7565b61055b565b60405161015a9190611e3c565b60405180910390f35b34801561016f57600080fd5b5061018a600480360381019061018591906114cd565b610651565b6040516101979190611e3c565b60405180910390f35b3480156101ac57600080fd5b506101b561071f565b005b3480156101c357600080fd5b506101de60048036038101906101d9919061175d565b6108d6565b6040516101eb9190611e3c565b60405180910390f35b61020e600480360381019061020991906115a1565b61093b565b60405161021b9190611e3c565b60405180910390f35b61023e600480360381019061023991906113f7565b61099c565b60405161024b9190611e3c565b60405180910390f35b61026e600480360381019061026991906116c3565b610a21565b60405161027b9190611e3c565b60405180910390f35b34801561029057600080fd5b50610299610a85565b005b3480156102a757600080fd5b506102b0610c3a565b005b3480156102be57600080fd5b506102d960048036038101906102d49190611629565b610df1565b6040516102e69190611e3c565b60405180910390f35b3480156102fb57600080fd5b50610304610e53565b005b34801561031257600080fd5b5061031b611008565b6040516103289190611cc0565b60405180910390f35b34801561033d57600080fd5b50610358600480360381019061035391906114cd565b61101b565b6040516103659190611e3c565b60405180910390f35b34801561037a57600080fd5b506103956004803603810190610390919061151a565b611087565b005b3480156103a357600080fd5b506103ac611159565b6040516103b99190611d21565b60405180910390f35b3480156103ce57600080fd5b506103d761117d565b6040516103e49190611cc0565b60405180910390f35b60008060149054906101000a900460ff161561043e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043590611d3c565b60405180910390fd5b60003390506000339050600060159054906101000a900460ff16156104c05761046682611190565b15801561049e57503373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b156104b3576104ac826111a3565b91506104bf565b6104bc816111cc565b90505b5b6105526009838360601b60601c73ffffffffffffffffffffffffffffffffffffffff16600034898760601b60601c73ffffffffffffffffffffffffffffffffffffffff168860601b60601c73ffffffffffffffffffffffffffffffffffffffff16600080600060405160200161053e99989796959493929190611b25565b6040516020818303038152906040526111f5565b92505050919050565b60008060149054906101000a900460ff16156105ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a390611d3c565b60405180910390fd5b6106426009338c60601b60601c73ffffffffffffffffffffffffffffffffffffffff168c348d8d60601b60601c73ffffffffffffffffffffffffffffffffffffffff168d60601b60601c73ffffffffffffffffffffffffffffffffffffffff168d8d8d8d90508e8e60405160200161062e9b9a99989796959493929190611a73565b6040516020818303038152906040526111f5565b90509998505050505050505050565b60003273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b890611dbc565b60405180910390fd5b60006106e660033386866040516106d9929190611a5a565b604051809103902061124f565b9050807fab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c60405160405180910390a28091505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561078857600080fd5b505afa15801561079c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c091906113ca565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610830576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082790611ddc565b60405180910390fd5b600060149054906101000a900460ff1615610880576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087790611d9c565b60405180910390fd5b6001600060146101000a81548160ff0219169083151502179055507f9077d36bc00859b5c3f320310707208543dd35092cb0a0fe117d0c6a558b148b60016040516108cb9190611cc0565b60405180910390a150565b600061092e60033360008b8b8b8b60601b60601c73ffffffffffffffffffffffffffffffffffffffff168b8b8b60405160200161091a989796959493929190611c41565b6040516020818303038152906040526111f5565b9050979650505050505050565b6000610991600733600189898960601b60601c73ffffffffffffffffffffffffffffffffffffffff16348a8a60405160200161097d9796959493929190611bd3565b6040516020818303038152906040526111f5565b905095945050505050565b60008060159054906101000a900460ff1680156109be57506109bd87611190565b5b156109cf576109cc876111cc565b96505b600060159054906101000a900460ff1680156109f057506109ef86611190565b5b15610a01576109fe866111cc565b95505b610a128a8a8a8a8a8a8a8a8a61055b565b90509998505050505050505050565b6000610a7960073360008a8a8a8a60601b60601c73ffffffffffffffffffffffffffffffffffffffff16348b8b604051602001610a65989796959493929190611c41565b6040516020818303038152906040526111f5565b90509695505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610aee57600080fd5b505afa158015610b02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2691906113ca565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8d90611ddc565b60405180910390fd5b600060159054906101000a900460ff16610be5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bdc90611e1c565b60405180910390fd5b60008060156101000a81548160ff0219169083151502179055507fab1ea65fd25ce96d303e895d1bd43edddb89841544a3705d3e61fc947a5fc25b6000604051610c2f9190611cc0565b60405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ca357600080fd5b505afa158015610cb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdb91906113ca565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4290611ddc565b60405180910390fd5b600060159054906101000a900460ff1615610d9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9290611d5c565b60405180910390fd5b6001600060156101000a81548160ff0219169083151502179055507fab1ea65fd25ce96d303e895d1bd43edddb89841544a3705d3e61fc947a5fc25b6001604051610de69190611cc0565b60405180910390a150565b6000610e4760033360018a8a8a60601b60601c73ffffffffffffffffffffffffffffffffffffffff168a8a8a604051602001610e339796959493929190611bd3565b6040516020818303038152906040526111f5565b90509695505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ebc57600080fd5b505afa158015610ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef491906113ca565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5b90611ddc565b60405180910390fd5b600060149054906101000a900460ff16610fb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610faa90611dfc565b60405180910390fd5b60008060146101000a81548160ff0219169083151502179055507f9077d36bc00859b5c3f320310707208543dd35092cb0a0fe117d0c6a558b148b6000604051610ffd9190611cc0565b60405180910390a150565b600060149054906101000a900460ff1681565b6000806110416003338686604051611034929190611a5a565b604051809103902061124f565b9050807fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b8585604051611075929190611cdb565b60405180910390a28091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611116576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110d90611d7c565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060159054906101000a900460ff1681565b600080823b905060008111915050919050565b6000731111000000000000000000000000000000001111826111c59190611f1b565b9050919050565b6000731111000000000000000000000000000000001111826111ee9190611ed1565b9050919050565b60008061120a8585858051906020012061124f565b9050807fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b8460405161123c9190611cff565b60405180910390a2809150509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302bbfad1348686866040518563ffffffff1660e01b81526004016112b093929190611e57565b6020604051808303818588803b1580156112c957600080fd5b505af11580156112dd573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113029190611574565b90509392505050565b60008135905061131a816121f3565b92915050565b60008151905061132f816121f3565b92915050565b60008083601f84011261134b5761134a612076565b5b8235905067ffffffffffffffff81111561136857611367612071565b5b6020830191508360018202830111156113845761138361207b565b5b9250929050565b60008135905061139a8161220a565b92915050565b6000813590506113af81612221565b92915050565b6000815190506113c481612221565b92915050565b6000602082840312156113e0576113df612085565b5b60006113ee84828501611320565b91505092915050565b60008060008060008060008060006101008a8c03121561141a57611419612085565b5b60006114288c828d0161130b565b99505060206114398c828d016113a0565b985050604061144a8c828d016113a0565b975050606061145b8c828d0161130b565b965050608061146c8c828d0161130b565b95505060a061147d8c828d016113a0565b94505060c061148e8c828d016113a0565b93505060e08a013567ffffffffffffffff8111156114af576114ae612080565b5b6114bb8c828d01611335565b92509250509295985092959850929598565b600080602083850312156114e4576114e3612085565b5b600083013567ffffffffffffffff81111561150257611501612080565b5b61150e85828601611335565b92509250509250929050565b6000602082840312156115305761152f612085565b5b600061153e8482850161138b565b91505092915050565b60006020828403121561155d5761155c612085565b5b600061156b848285016113a0565b91505092915050565b60006020828403121561158a57611589612085565b5b6000611598848285016113b5565b91505092915050565b6000806000806000608086880312156115bd576115bc612085565b5b60006115cb888289016113a0565b95505060206115dc888289016113a0565b94505060406115ed8882890161130b565b935050606086013567ffffffffffffffff81111561160e5761160d612080565b5b61161a88828901611335565b92509250509295509295909350565b60008060008060008060a0878903121561164657611645612085565b5b600061165489828a016113a0565b965050602061166589828a016113a0565b955050604061167689828a0161130b565b945050606061168789828a016113a0565b935050608087013567ffffffffffffffff8111156116a8576116a7612080565b5b6116b489828a01611335565b92509250509295509295509295565b60008060008060008060a087890312156116e0576116df612085565b5b60006116ee89828a016113a0565b96505060206116ff89828a016113a0565b955050604061171089828a016113a0565b945050606061172189828a0161130b565b935050608087013567ffffffffffffffff81111561174257611741612080565b5b61174e89828a01611335565b92509250509295509295509295565b600080600080600080600060c0888a03121561177c5761177b612085565b5b600061178a8a828b016113a0565b975050602061179b8a828b016113a0565b96505060406117ac8a828b016113a0565b95505060606117bd8a828b0161130b565b94505060806117ce8a828b016113a0565b93505060a088013567ffffffffffffffff8111156117ef576117ee612080565b5b6117fb8a828b01611335565b925092505092959891949750929550565b61181581611f4f565b82525050565b61182481611f61565b82525050565b61183381611f6d565b82525050565b60006118458385611e99565b9350611852838584611fe4565b61185b8361208a565b840190509392505050565b60006118728385611eaa565b935061187f838584611fe4565b82840190509392505050565b600061189682611e8e565b6118a08185611e99565b93506118b0818560208601611ff3565b6118b98161208a565b840191505092915050565b6118cd81611fc0565b82525050565b60006118e0601883611eb5565b91506118eb826120a8565b602082019050919050565b6000611903601183611eb5565b915061190e826120d1565b602082019050919050565b6000611926600c83611eb5565b9150611931826120fa565b602082019050919050565b6000611949600e83611eb5565b915061195482612123565b602082019050919050565b600061196c600083611ec6565b91506119778261214c565b600082019050919050565b600061198f600b83611eb5565b915061199a8261214f565b602082019050919050565b60006119b2600983611eb5565b91506119bd82612178565b602082019050919050565b60006119d5600a83611eb5565b91506119e0826121a1565b602082019050919050565b60006119f8600d83611eb5565b9150611a03826121ca565b602082019050919050565b611a1781611fa9565b82525050565b611a2e611a2982611fa9565b612026565b82525050565b611a3d81611fb3565b82525050565b611a54611a4f82611fb3565b612030565b82525050565b6000611a67828486611866565b91508190509392505050565b6000611a7f828e611a1d565b602082019150611a8f828d611a1d565b602082019150611a9f828c611a1d565b602082019150611aaf828b611a1d565b602082019150611abf828a611a1d565b602082019150611acf8289611a1d565b602082019150611adf8288611a1d565b602082019150611aef8287611a1d565b602082019150611aff8286611a1d565b602082019150611b10828486611866565b91508190509c9b505050505050505050505050565b6000611b31828c611a1d565b602082019150611b41828b611a1d565b602082019150611b51828a611a1d565b602082019150611b618289611a1d565b602082019150611b718288611a1d565b602082019150611b818287611a1d565b602082019150611b918286611a1d565b602082019150611ba18285611a1d565b602082019150611bb18284611a1d565b602082019150611bc08261195f565b91508190509a9950505050505050505050565b6000611bdf828a611a43565b600182019150611bef8289611a1d565b602082019150611bff8288611a1d565b602082019150611c0f8287611a1d565b602082019150611c1f8286611a1d565b602082019150611c30828486611866565b915081905098975050505050505050565b6000611c4d828b611a43565b600182019150611c5d828a611a1d565b602082019150611c6d8289611a1d565b602082019150611c7d8288611a1d565b602082019150611c8d8287611a1d565b602082019150611c9d8286611a1d565b602082019150611cae828486611866565b91508190509998505050505050505050565b6000602082019050611cd5600083018461181b565b92915050565b60006020820190508181036000830152611cf6818486611839565b90509392505050565b60006020820190508181036000830152611d19818461188b565b905092915050565b6000602082019050611d3660008301846118c4565b92915050565b60006020820190508181036000830152611d55816118d3565b9050919050565b60006020820190508181036000830152611d75816118f6565b9050919050565b60006020820190508181036000830152611d9581611919565b9050919050565b60006020820190508181036000830152611db58161193c565b9050919050565b60006020820190508181036000830152611dd581611982565b9050919050565b60006020820190508181036000830152611df5816119a5565b9050919050565b60006020820190508181036000830152611e15816119c8565b9050919050565b60006020820190508181036000830152611e35816119eb565b9050919050565b6000602082019050611e516000830184611a0e565b92915050565b6000606082019050611e6c6000830186611a34565b611e79602083018561180c565b611e86604083018461182a565b949350505050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000611edc82611f89565b9150611ee783611f89565b92508273ffffffffffffffffffffffffffffffffffffffff03821115611f1057611f0f612042565b5b828201905092915050565b6000611f2682611f89565b9150611f3183611f89565b925082821015611f4457611f43612042565b5b828203905092915050565b6000611f5a82611f89565b9050919050565b60008115159050919050565b6000819050919050565b6000611f8282611f4f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611fcb82611fd2565b9050919050565b6000611fdd82611f89565b9050919050565b82818337600083830152505050565b60005b83811015612011578082015181840152602081019050611ff6565b83811115612020576000848401525b50505050565b6000819050919050565b600061203b8261209b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160f81b9050919050565b7f4352454154455f524554525941424c45535f5041555345440000000000000000600082015250565b7f414c52454144595f524557524954494e47000000000000000000000000000000600082015250565b7f414c52454144595f494e49540000000000000000000000000000000000000000600082015250565b7f414c52454144595f504155534544000000000000000000000000000000000000600082015250565b50565b7f6f726967696e206f6e6c79000000000000000000000000000000000000000000600082015250565b7f4e4f545f4f574e45520000000000000000000000000000000000000000000000600082015250565b7f4e4f545f50415553454400000000000000000000000000000000000000000000600082015250565b7f4e4f545f524557524954494e4700000000000000000000000000000000000000600082015250565b6121fc81611f4f565b811461220757600080fd5b50565b61221381611f77565b811461221e57600080fd5b50565b61222a81611fa9565b811461223557600080fd5b5056fea2646970667358221220a9db09ae30d660e7094d5ebaade128b054c5b10cd0b0372c42ac4afcf203665a64736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createRetryableTicket(address,uint256,uint256,address,address,uint256,uint256,bytes)": {
        "details": "all msg.value will deposited to callValueRefundAddress on L2",
        "params": {
          "callValueRefundAddress": "l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled",
          "data": "ABI encoded data of L2 message",
          "destAddr": "destination L2 contract address",
          "excessFeeRefundAddress": "maxgas x gasprice - execution cost gets credited here on L2 balance",
          "gasPriceBid": "price bid for L2 execution",
          "l2CallValue": "call value for retryable L2 message",
          "maxGas": "Max gas deducted from user's L2 balance to cover L2 execution",
          "maxSubmissionCost": "Max gas deducted from user's L2 balance to cover base submission fee"
        },
        "returns": {
          "_0": "unique id for retryable transaction (keccak256(requestID, uint(0) )"
        }
      },
      "createRetryableTicketNoRefundAliasRewrite(address,uint256,uint256,address,address,uint256,uint256,bytes)": {
        "details": "Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress). createRetryableTicket method is the recommended standard.",
        "params": {
          "callValueRefundAddress": "l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled",
          "data": "ABI encoded data of L2 message",
          "destAddr": "destination L2 contract address",
          "excessFeeRefundAddress": "maxgas x gasprice - execution cost gets credited here on L2 balance",
          "gasPriceBid": "price bid for L2 execution",
          "l2CallValue": "call value for retryable L2 message",
          "maxGas": "Max gas deducted from user's L2 balance to cover L2 execution",
          "maxSubmissionCost": "Max gas deducted from user's L2 balance to cover base submission fee"
        },
        "returns": {
          "_0": "unique id for retryable transaction (keccak256(requestID, uint(0) )"
        }
      },
      "depositEth(uint256)": {
        "details": "this function should not be called inside contract constructors"
      },
      "sendL2Message(bytes)": {
        "details": "This method can be used to send any type of message that doesn't require L1 validation",
        "params": {
          "messageData": "Data of the message being sent"
        }
      },
      "sendL2MessageFromOrigin(bytes)": {
        "details": "This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input",
        "params": {
          "messageData": "Data of the message being sent"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createRetryableTicket(address,uint256,uint256,address,address,uint256,uint256,bytes)": {
        "notice": "Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts"
      },
      "createRetryableTicketNoRefundAliasRewrite(address,uint256,uint256,address,address,uint256,uint256,bytes)": {
        "notice": "Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts"
      },
      "depositEth(uint256)": {
        "notice": "deposit eth from L1 to L2"
      },
      "pauseCreateRetryables()": {
        "notice": "pauses creating retryables"
      },
      "sendL2Message(bytes)": {
        "notice": "Send a generic L2 message to the chain"
      },
      "sendL2MessageFromOrigin(bytes)": {
        "notice": "Send a generic L2 message to the chain"
      },
      "startRewriteAddress()": {
        "notice": "start rewriting addresses in eth deposits"
      },
      "stopRewriteAddress()": {
        "notice": "stop rewriting addresses in eth deposits"
      },
      "unpauseCreateRetryables()": {
        "notice": "unpauses creating retryables"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1871,
        "contract": "src/bridge/Inbox.sol:Inbox",
        "label": "bridge",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IBridge)1703"
      },
      {
        "astId": 1873,
        "contract": "src/bridge/Inbox.sol:Inbox",
        "label": "isCreateRetryablePaused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1875,
        "contract": "src/bridge/Inbox.sol:Inbox",
        "label": "shouldRewriteSender",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBridge)1703": {
        "encoding": "inplace",
        "label": "contract IBridge",
        "numberOfBytes": "20"
      }
    }
  }
}