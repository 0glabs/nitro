{
  "address": "0x0026085f5B2C7D3b8560a20ced2eeFf38A32aAb7",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxInboxMessagesRead",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExecutionContext",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum MachineStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value[]",
                      "name": "inner",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct ValueArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ValueStack",
              "name": "valueStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value[]",
                      "name": "inner",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct ValueArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ValueStack",
              "name": "internalStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint32[]",
                      "name": "inner",
                      "type": "uint32[]"
                    }
                  ],
                  "internalType": "struct PcArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PcStack",
              "name": "blockStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value",
                      "name": "returnPc",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "localsMerkleRoot",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "callerModule",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "callerModuleInternals",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct StackFrame[]",
                  "name": "proved",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct StackFrameWindow",
              "name": "frameStack",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "globalStateHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "moduleIdx",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "functionIdx",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "functionPc",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "modulesRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Machine",
          "name": "startMach",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "globalsMerkleRoot",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "size",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ModuleMemory",
              "name": "moduleMemory",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "tablesMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "functionsMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "internalsOffset",
              "type": "uint32"
            }
          ],
          "internalType": "struct Module",
          "name": "startMod",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "opcode",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "argumentData",
              "type": "uint256"
            }
          ],
          "internalType": "struct Instruction",
          "name": "inst",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        }
      ],
      "name": "executeOneStep",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum MachineStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value[]",
                      "name": "inner",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct ValueArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ValueStack",
              "name": "valueStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value[]",
                      "name": "inner",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct ValueArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ValueStack",
              "name": "internalStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint32[]",
                      "name": "inner",
                      "type": "uint32[]"
                    }
                  ],
                  "internalType": "struct PcArray",
                  "name": "proved",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PcStack",
              "name": "blockStack",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "enum ValueType",
                          "name": "valueType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint256",
                          "name": "contents",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct Value",
                      "name": "returnPc",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "localsMerkleRoot",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "callerModule",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "callerModuleInternals",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct StackFrame[]",
                  "name": "proved",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes32",
                  "name": "remainingHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct StackFrameWindow",
              "name": "frameStack",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "globalStateHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "moduleIdx",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "functionIdx",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "functionPc",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "modulesRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Machine",
          "name": "mach",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "globalsMerkleRoot",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "size",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ModuleMemory",
              "name": "moduleMemory",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "tablesMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "functionsMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "internalsOffset",
              "type": "uint32"
            }
          ],
          "internalType": "struct Module",
          "name": "mod",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xda43c7e12d36d3907ac807279e672a7a26c02eb49c03362b839366cfb3643f1b",
  "receipt": {
    "to": null,
    "from": "0xFF21a5fD9E13241c95033Fcbc501EeaDC3572771",
    "contractAddress": "0x0026085f5B2C7D3b8560a20ced2eeFf38A32aAb7",
    "transactionIndex": 0,
    "gasUsed": "3866430",
    "logsBloom": "0x
    "blockHash": "0x1696037dcaaa2895d2b8f981778f5f2921d884c7d5adc8481e470d2cc5a9f0e2",
    "transactionHash": "0xda43c7e12d36d3907ac807279e672a7a26c02eb49c03362b839366cfb3643f1b",
    "logs": [],
    "blockNumber": 55,
    "cumulativeGasUsed": "3866430",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e7611196dd0ae85361a704f7442944b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxInboxMessagesRead\",\"type\":\"uint256\"}],\"internalType\":\"struct ExecutionContext\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum MachineStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value[]\",\"name\":\"inner\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ValueArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValueStack\",\"name\":\"valueStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value[]\",\"name\":\"inner\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ValueArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValueStack\",\"name\":\"internalStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"inner\",\"type\":\"uint32[]\"}],\"internalType\":\"struct PcArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct PcStack\",\"name\":\"blockStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value\",\"name\":\"returnPc\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"localsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callerModule\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"callerModuleInternals\",\"type\":\"uint32\"}],\"internalType\":\"struct StackFrame[]\",\"name\":\"proved\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct StackFrameWindow\",\"name\":\"frameStack\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"globalStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"moduleIdx\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionIdx\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionPc\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"modulesRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Machine\",\"name\":\"startMach\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"globalsMerkleRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"size\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct ModuleMemory\",\"name\":\"moduleMemory\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"tablesMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"functionsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"internalsOffset\",\"type\":\"uint32\"}],\"internalType\":\"struct Module\",\"name\":\"startMod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"opcode\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"argumentData\",\"type\":\"uint256\"}],\"internalType\":\"struct Instruction\",\"name\":\"inst\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"executeOneStep\",\"outputs\":[{\"components\":[{\"internalType\":\"enum MachineStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value[]\",\"name\":\"inner\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ValueArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValueStack\",\"name\":\"valueStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value[]\",\"name\":\"inner\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ValueArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValueStack\",\"name\":\"internalStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"inner\",\"type\":\"uint32[]\"}],\"internalType\":\"struct PcArray\",\"name\":\"proved\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct PcStack\",\"name\":\"blockStack\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ValueType\",\"name\":\"valueType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"contents\",\"type\":\"uint256\"}],\"internalType\":\"struct Value\",\"name\":\"returnPc\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"localsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callerModule\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"callerModuleInternals\",\"type\":\"uint32\"}],\"internalType\":\"struct StackFrame[]\",\"name\":\"proved\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"remainingHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct StackFrameWindow\",\"name\":\"frameStack\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"globalStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"moduleIdx\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionIdx\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionPc\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"modulesRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Machine\",\"name\":\"mach\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"globalsMerkleRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"size\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct ModuleMemory\",\"name\":\"moduleMemory\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"tablesMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"functionsMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"internalsOffset\",\"type\":\"uint32\"}],\"internalType\":\"struct Module\",\"name\":\"mod\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/osp/OneStepProver0.sol\":\"OneStepProver0\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/osp/IOneStepProver.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../state/Machines.sol\\\";\\nimport \\\"../state/Modules.sol\\\";\\nimport \\\"../state/Instructions.sol\\\";\\n\\nstruct ExecutionContext {\\n    uint256 maxInboxMessagesRead;\\n}\\n\\nabstract contract IOneStepProver {\\n    function executeOneStep(\\n        ExecutionContext memory execCtx,\\n        Machine calldata mach,\\n        Module calldata mod,\\n        Instruction calldata instruction,\\n        bytes calldata proof\\n    )\\n        external\\n        view\\n        virtual\\n        returns (Machine memory result, Module memory resultMod);\\n}\\n\",\"keccak256\":\"0xf2a87c00ce591229417b9f094d817d3ae116a448e544a93473f99f692d04dfb0\",\"license\":\"UNLICENSED\"},\"src/osp/OneStepProver0.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../state/Values.sol\\\";\\nimport \\\"../state/Machines.sol\\\";\\nimport \\\"../state/Modules.sol\\\";\\nimport \\\"../state/Deserialize.sol\\\";\\nimport \\\"./IOneStepProver.sol\\\";\\n\\ncontract OneStepProver0 is IOneStepProver {\\n\\tfunction executeUnreachable(Machine memory mach, Module memory, Instruction calldata, bytes calldata) internal pure {\\n\\t\\tmach.status = MachineStatus.ERRORED;\\n\\t}\\n\\n\\tfunction executeNop(Machine memory mach, Module memory, Instruction calldata, bytes calldata) internal pure {\\n\\t\\t// :)\\n\\t}\\n\\n\\tfunction executeConstPush(Machine memory mach, Module memory, Instruction calldata inst, bytes calldata) internal pure {\\n\\t\\tuint16 opcode = inst.opcode;\\n\\t\\tValueType ty;\\n\\t\\tif (opcode == Instructions.I32_CONST) {\\n\\t\\t\\tty = ValueType.I32;\\n\\t\\t} else if (opcode == Instructions.I64_CONST) {\\n\\t\\t\\tty = ValueType.I64;\\n\\t\\t} else if (opcode == Instructions.F32_CONST) {\\n\\t\\t\\tty = ValueType.F32;\\n\\t\\t} else if (opcode == Instructions.F64_CONST) {\\n\\t\\t\\tty = ValueType.F64;\\n\\t\\t} else if (opcode == Instructions.PUSH_STACK_BOUNDARY) {\\n\\t\\t\\tty = ValueType.STACK_BOUNDARY;\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"CONST_PUSH_INVALID_OPCODE\\\");\\n\\t\\t}\\n\\n\\t\\tValueStacks.push(mach.valueStack, Value({\\n\\t\\t\\tvalueType: ty,\\n\\t\\t\\tcontents: uint64(inst.argumentData)\\n\\t\\t}));\\n\\t}\\n\\n\\tfunction executeDrop(Machine memory mach, Module memory, Instruction calldata, bytes calldata) internal pure {\\n\\t\\tValueStacks.pop(mach.valueStack);\\n\\t}\\n\\n\\tfunction executeSelect(Machine memory mach, Module memory, Instruction calldata, bytes calldata) internal pure {\\n\\t\\tuint32 selector = Values.assumeI32(ValueStacks.pop(mach.valueStack));\\n\\t\\tValue memory b = ValueStacks.pop(mach.valueStack);\\n\\t\\tValue memory a = ValueStacks.pop(mach.valueStack);\\n\\n\\t\\tif (selector != 0) {\\n\\t\\t\\tValueStacks.push(mach.valueStack, a);\\n\\t\\t} else {\\n\\t\\t\\tValueStacks.push(mach.valueStack, b);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction executeBlock(Machine memory mach, Module memory, Instruction calldata inst, bytes calldata) internal pure {\\n\\t\\tuint32 targetPc = uint32(inst.argumentData);\\n\\t\\trequire(targetPc == inst.argumentData, \\\"BAD_BLOCK_PC\\\");\\n\\t\\tPcStacks.push(mach.blockStack, targetPc);\\n\\t}\\n\\n\\tfunction executeBranch(Machine memory mach, Module memory, Instruction calldata, bytes calldata) internal pure {\\n\\t\\tmach.functionPc = PcStacks.pop(mach.blockStack);\\n\\t}\\n\\n\\tfunction executeBranchIf(Machine memory mach, Module memory, Instruction calldata, bytes calldata) internal pure {\\n\\t\\tValue memory cond = ValueStacks.pop(mach.valueStack);\\n\\t\\tif (cond.contents != 0) {\\n\\t\\t\\t// Jump to target\\n\\t\\t\\tmach.functionPc = PcStacks.pop(mach.blockStack);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction executeReturn(Machine memory mach, Module memory, Instruction calldata, bytes calldata) internal pure {\\n\\t\\tStackFrame memory frame = StackFrames.pop(mach.frameStack);\\n\\t\\tif (frame.returnPc.valueType == ValueType.REF_NULL) {\\n\\t\\t\\tmach.status = MachineStatus.ERRORED;\\n\\t\\t\\treturn;\\n\\t\\t} else if (frame.returnPc.valueType != ValueType.INTERNAL_REF) {\\n\\t\\t\\trevert(\\\"INVALID_RETURN_PC_TYPE\\\");\\n\\t\\t}\\n\\t\\tuint256 data = frame.returnPc.contents;\\n\\t\\tuint32 pc = uint32(data);\\n\\t\\tuint32 func = uint32(data >> 32);\\n\\t\\tuint32 mod = uint32(data >> 64);\\n\\t\\trequire(data >> 96 == 0, \\\"INVALID_RETURN_PC_DATA\\\");\\n\\t\\tmach.functionPc = pc;\\n\\t\\tmach.functionIdx = func;\\n\\t\\tmach.moduleIdx = mod;\\n\\t}\\n\\n\\tfunction createReturnValue(Machine memory mach) internal pure returns (Value memory) {\\n\\t\\tuint256 returnData = 0;\\n\\t\\treturnData |= mach.functionPc;\\n\\t\\treturnData |= uint256(mach.functionIdx) << 32;\\n\\t\\treturnData |= uint256(mach.moduleIdx) << 64;\\n\\t\\treturn Value({\\n\\t\\t\\tvalueType: ValueType.INTERNAL_REF,\\n\\t\\t\\tcontents: returnData\\n\\t\\t});\\n\\t}\\n\\n\\tfunction executeCall(Machine memory mach, Module memory, Instruction calldata inst, bytes calldata) internal pure {\\n\\t\\t// Push the return pc to the stack\\n\\t\\tValueStacks.push(mach.valueStack, createReturnValue(mach));\\n\\n\\t\\t// Push caller module info to the stack\\n\\t\\tStackFrame memory frame = StackFrames.peek(mach.frameStack);\\n\\t\\tValueStacks.push(mach.valueStack, Values.newI32(frame.callerModule));\\n\\t\\tValueStacks.push(mach.valueStack, Values.newI32(frame.callerModuleInternals));\\n\\n\\t\\t// Jump to the target\\n\\t\\tuint32 idx = uint32(inst.argumentData);\\n\\t\\trequire(idx == inst.argumentData, \\\"BAD_CALL_DATA\\\");\\n\\t\\tmach.functionIdx = idx;\\n\\t\\tmach.functionPc = 0;\\n\\t}\\n\\n\\tfunction executeCrossModuleCall(Machine memory mach, Module memory mod, Instruction calldata inst, bytes calldata) internal pure {\\n\\t\\t// Push the return pc to the stack\\n\\t\\tValueStacks.push(mach.valueStack, createReturnValue(mach));\\n\\n\\t\\t// Push caller module info to the stack\\n\\t\\tValueStacks.push(mach.valueStack, Values.newI32(mach.moduleIdx));\\n\\t\\tValueStacks.push(mach.valueStack, Values.newI32(mod.internalsOffset));\\n\\n\\t\\t// Jump to the target\\n\\t\\tuint32 func = uint32(inst.argumentData);\\n\\t\\tuint32 module = uint32(inst.argumentData >> 32);\\n\\t\\trequire(inst.argumentData >> 64 == 0, \\\"BAD_CROSS_MODULE_CALL_DATA\\\");\\n\\t\\tmach.moduleIdx = module;\\n\\t\\tmach.functionIdx = func;\\n\\t\\tmach.functionPc = 0;\\n\\t}\\n\\n\\tfunction executeCallerModuleInternalCall(Machine memory mach, Module memory mod, Instruction calldata inst, bytes calldata) internal pure {\\n\\t\\t// Push the return pc to the stack\\n\\t\\tValueStacks.push(mach.valueStack, createReturnValue(mach));\\n\\n\\t\\t// Push caller module info to the stack\\n\\t\\tValueStacks.push(mach.valueStack, Values.newI32(mach.moduleIdx));\\n\\t\\tValueStacks.push(mach.valueStack, Values.newI32(mod.internalsOffset));\\n\\n\\t\\tStackFrame memory frame = StackFrames.peek(mach.frameStack);\\n\\t\\tif (frame.callerModuleInternals == 0) {\\n\\t\\t\\t// The caller module has no internals\\n\\t\\t\\tmach.status = MachineStatus.ERRORED;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Jump to the target\\n\\t\\tuint32 offset = uint32(inst.argumentData);\\n\\t\\trequire(offset == inst.argumentData, \\\"BAD_CALLER_INTERNAL_CALL_DATA\\\");\\n\\t\\tmach.moduleIdx = frame.callerModule;\\n\\t\\tmach.functionIdx = frame.callerModuleInternals + offset;\\n\\t\\tmach.functionPc = 0;\\n\\t}\\n\\n\\tfunction executeCallIndirect(Machine memory mach, Module memory mod, Instruction calldata inst, bytes calldata proof) internal pure {\\n\\t\\tuint32 funcIdx;\\n\\t\\t{\\n\\t\\t\\tuint32 elementIdx = Values.assumeI32(ValueStacks.pop(mach.valueStack));\\n\\n\\t\\t\\t// Prove metadata about the instruction and tables\\n\\t\\t\\tbytes32 elemsRoot;\\n\\t\\t\\tbytes32 wantedFuncTypeHash;\\n\\t\\t\\tuint256 offset = 0;\\n\\t\\t\\t{\\n\\t\\t\\t\\tuint64 tableIdx;\\n\\t\\t\\t\\tuint8 tableType;\\n\\t\\t\\t\\tuint64 tableSize;\\n\\t\\t\\t\\tMerkleProof memory tableMerkleProof;\\n\\t\\t\\t\\t(tableIdx, offset) = Deserialize.u64(proof, offset);\\n\\t\\t\\t\\t(wantedFuncTypeHash, offset) = Deserialize.b32(proof, offset);\\n\\t\\t\\t\\t(tableType, offset) = Deserialize.u8(proof, offset);\\n\\t\\t\\t\\t(tableSize, offset) = Deserialize.u64(proof, offset);\\n\\t\\t\\t\\t(elemsRoot, offset) = Deserialize.b32(proof, offset);\\n\\t\\t\\t\\t(tableMerkleProof, offset) = Deserialize.merkleProof(proof, offset);\\n\\n\\t\\t\\t\\t// Validate the information by recomputing known hashes\\n\\t\\t\\t\\tbytes32 recomputed = keccak256(abi.encodePacked(\\\"Call indirect:\\\", tableIdx, wantedFuncTypeHash));\\n\\t\\t\\t\\trequire(recomputed == bytes32(inst.argumentData), \\\"BAD_CALL_INDIRECT_DATA\\\");\\n\\t\\t\\t\\trecomputed = MerkleProofs.computeRootFromTable(tableMerkleProof, tableIdx, tableType, tableSize, elemsRoot);\\n\\t\\t\\t\\trequire(recomputed == mod.tablesMerkleRoot, \\\"BAD_TABLES_ROOT\\\");\\n\\n\\t\\t\\t\\t// Check if the table access is out of bounds\\n\\t\\t\\t\\tif (elementIdx >= tableSize) {\\n\\t\\t\\t\\t\\tmach.status = MachineStatus.ERRORED;\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tbytes32 elemFuncTypeHash;\\n\\t\\t\\tValue memory functionPointer;\\n\\t\\t\\tMerkleProof memory elementMerkleProof;\\n\\t\\t\\t(elemFuncTypeHash, offset) = Deserialize.b32(proof, offset);\\n\\t\\t\\t(functionPointer, offset) = Deserialize.value(proof, offset);\\n\\t\\t\\t(elementMerkleProof, offset) = Deserialize.merkleProof(proof, offset);\\n\\t\\t\\tbytes32 recomputedElemRoot = MerkleProofs.computeRootFromElement(elementMerkleProof, elementIdx, elemFuncTypeHash, functionPointer);\\n\\t\\t\\trequire(recomputedElemRoot == elemsRoot, \\\"BAD_ELEMENTS_ROOT\\\");\\n\\n\\t\\t\\tif (elemFuncTypeHash != wantedFuncTypeHash) {\\n\\t\\t\\t\\tmach.status = MachineStatus.ERRORED;\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (functionPointer.valueType == ValueType.REF_NULL) {\\n\\t\\t\\t\\tmach.status = MachineStatus.ERRORED;\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t} else if (functionPointer.valueType == ValueType.FUNC_REF) {\\n\\t\\t\\t\\tfuncIdx = uint32(functionPointer.contents);\\n\\t\\t\\t\\trequire(funcIdx == functionPointer.contents, \\\"BAD_FUNC_REF_CONTENTS\\\");\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(\\\"BAD_ELEM_TYPE\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Push the return pc to the stack\\n\\t\\tValueStacks.push(mach.valueStack, createReturnValue(mach));\\n\\n\\t\\t// Push caller module info to the stack\\n\\t\\tStackFrame memory frame = StackFrames.peek(mach.frameStack);\\n\\t\\tValueStacks.push(mach.valueStack, Values.newI32(frame.callerModule));\\n\\t\\tValueStacks.push(mach.valueStack, Values.newI32(frame.callerModuleInternals));\\n\\n\\t\\t// Jump to the target\\n\\t\\tmach.functionIdx = funcIdx;\\n\\t\\tmach.functionPc = 0;\\n\\t}\\n\\n\\tfunction executeArbitraryJumpIf(Machine memory mach, Module memory, Instruction calldata inst, bytes calldata) internal pure {\\n\\t\\tValue memory cond = ValueStacks.pop(mach.valueStack);\\n\\t\\tif (cond.contents != 0) {\\n\\t\\t\\t// Jump to target\\n\\t\\t\\tuint32 pc = uint32(inst.argumentData);\\n\\t\\t\\trequire(pc == inst.argumentData, \\\"BAD_CALL_DATA\\\");\\n\\t\\t\\tmach.functionPc = pc;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction merkleProveGetValue(bytes32 merkleRoot, uint256 index, bytes calldata proof) internal pure returns (Value memory) {\\n\\t\\tuint256 offset = 0;\\n\\t\\tValue memory proposedVal;\\n\\t\\tMerkleProof memory merkle;\\n\\t\\t(proposedVal, offset) = Deserialize.value(proof, offset);\\n\\t\\t(merkle, offset) = Deserialize.merkleProof(proof, offset);\\n\\t\\tbytes32 recomputedRoot = MerkleProofs.computeRootFromValue(merkle, index, proposedVal);\\n\\t\\trequire(recomputedRoot == merkleRoot, \\\"WRONG_MERKLE_ROOT\\\");\\n\\t\\treturn proposedVal;\\n\\t}\\n\\n\\tfunction merkleProveSetValue(bytes32 merkleRoot, uint256 index, Value memory newVal, bytes calldata proof) internal pure returns (bytes32) {\\n\\t\\tValue memory oldVal;\\n\\t\\tuint256 offset = 0;\\n\\t\\tMerkleProof memory merkle;\\n\\t\\t(oldVal, offset) = Deserialize.value(proof, offset);\\n\\t\\t(merkle, offset) = Deserialize.merkleProof(proof, offset);\\n\\t\\tbytes32 recomputedRoot = MerkleProofs.computeRootFromValue(merkle, index, oldVal);\\n\\t\\trequire(recomputedRoot == merkleRoot, \\\"WRONG_MERKLE_ROOT\\\");\\n\\t\\treturn MerkleProofs.computeRootFromValue(merkle, index, newVal);\\n\\t}\\n\\n\\tfunction executeLocalGet(Machine memory mach, Module memory, Instruction calldata inst, bytes calldata proof) internal pure {\\n\\t\\tStackFrame memory frame = StackFrames.peek(mach.frameStack);\\n\\t\\tValue memory val = merkleProveGetValue(frame.localsMerkleRoot, inst.argumentData, proof);\\n\\t\\tValueStacks.push(mach.valueStack, val);\\n\\t}\\n\\n\\tfunction executeLocalSet(Machine memory mach, Module memory, Instruction calldata inst, bytes calldata proof) internal pure {\\n\\t\\tValue memory newVal = ValueStacks.pop(mach.valueStack);\\n\\t\\tStackFrame memory frame = StackFrames.peek(mach.frameStack);\\n\\t\\tframe.localsMerkleRoot = merkleProveSetValue(frame.localsMerkleRoot, inst.argumentData, newVal, proof);\\n\\t}\\n\\n\\tfunction executeGlobalGet(Machine memory mach, Module memory mod, Instruction calldata inst, bytes calldata proof) internal pure {\\n\\t\\tValue memory val = merkleProveGetValue(mod.globalsMerkleRoot, inst.argumentData, proof);\\n\\t\\tValueStacks.push(mach.valueStack, val);\\n\\t}\\n\\n\\tfunction executeGlobalSet(Machine memory mach, Module memory mod, Instruction calldata inst, bytes calldata proof) internal pure {\\n\\t\\tValue memory newVal = ValueStacks.pop(mach.valueStack);\\n\\t\\tmod.globalsMerkleRoot = merkleProveSetValue(mod.globalsMerkleRoot, inst.argumentData, newVal, proof);\\n\\t}\\n\\n\\tfunction executeEndBlock(Machine memory mach, Module memory, Instruction calldata, bytes calldata) internal pure {\\n\\t\\tPcStacks.pop(mach.blockStack);\\n\\t}\\n\\n\\tfunction executeEndBlockIf(Machine memory mach, Module memory, Instruction calldata, bytes calldata) internal pure {\\n\\t\\tValue memory cond = ValueStacks.peek(mach.valueStack);\\n\\t\\tif (cond.contents != 0) {\\n\\t\\t\\tPcStacks.pop(mach.blockStack);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction executeInitFrame(Machine memory mach, Module memory, Instruction calldata inst, bytes calldata) internal pure {\\n\\t\\tValue memory callerModuleInternals = ValueStacks.pop(mach.valueStack);\\n\\t\\tValue memory callerModule = ValueStacks.pop(mach.valueStack);\\n\\t\\tValue memory returnPc = ValueStacks.pop(mach.valueStack);\\n\\t\\tStackFrame memory newFrame = StackFrame({\\n\\t\\t\\treturnPc: returnPc,\\n\\t\\t\\tlocalsMerkleRoot: bytes32(inst.argumentData),\\n\\t\\t\\tcallerModule: Values.assumeI32(callerModule),\\n\\t\\t\\tcallerModuleInternals: Values.assumeI32(callerModuleInternals)\\n\\t\\t});\\n\\t\\tStackFrames.push(mach.frameStack, newFrame);\\n\\t}\\n\\n\\tfunction executeMoveInternal(Machine memory mach, Module memory, Instruction calldata inst, bytes calldata) internal pure {\\n\\t\\tValue memory val;\\n\\t\\tif (inst.opcode == Instructions.MOVE_FROM_STACK_TO_INTERNAL) {\\n\\t\\t\\tval = ValueStacks.pop(mach.valueStack);\\n\\t\\t\\tValueStacks.push(mach.internalStack, val);\\n\\t\\t} else if (inst.opcode == Instructions.MOVE_FROM_INTERNAL_TO_STACK) {\\n\\t\\t\\tval = ValueStacks.pop(mach.internalStack);\\n\\t\\t\\tValueStacks.push(mach.valueStack, val);\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"MOVE_INTERNAL_INVALID_OPCODE\\\");\\n\\t\\t}\\n\\t}\\n\\n\\tfunction executeIsStackBoundary(Machine memory mach, Module memory, Instruction calldata, bytes calldata) internal pure {\\n\\t\\tValue memory val = ValueStacks.pop(mach.valueStack);\\n\\t\\tuint256 newContents = 0;\\n\\t\\tif (val.valueType == ValueType.STACK_BOUNDARY) {\\n\\t\\t\\tnewContents = 1;\\n\\t\\t}\\n\\t\\tValueStacks.push(mach.valueStack, Value({\\n\\t\\t\\tvalueType: ValueType.I32,\\n\\t\\t\\tcontents: newContents\\n\\t\\t}));\\n\\t}\\n\\n\\tfunction executeDup(Machine memory mach, Module memory, Instruction calldata, bytes calldata) internal pure {\\n\\t\\tValue memory val = ValueStacks.peek(mach.valueStack);\\n\\t\\tValueStacks.push(mach.valueStack, val);\\n\\t}\\n\\n\\tfunction handleTrap(Machine memory mach) internal pure {\\n\\t\\tmach.status = MachineStatus.ERRORED;\\n\\t}\\n\\n\\tfunction executeOneStep(ExecutionContext calldata, Machine calldata startMach, Module calldata startMod, Instruction calldata inst, bytes calldata proof) override pure external returns (Machine memory mach, Module memory mod) {\\n\\t\\tmach = startMach;\\n\\t\\tmod = startMod;\\n\\n\\t\\tuint16 opcode = inst.opcode;\\n\\n\\t\\tfunction(Machine memory, Module memory, Instruction calldata, bytes calldata) internal pure impl;\\n\\t\\tif (opcode == Instructions.UNREACHABLE) {\\n\\t\\t\\timpl = executeUnreachable;\\n\\t\\t} else if (opcode == Instructions.NOP) {\\n\\t\\t\\timpl = executeNop;\\n\\t\\t} else if (opcode == Instructions.BLOCK) {\\n\\t\\t\\timpl = executeBlock;\\n\\t\\t} else if (opcode == Instructions.BRANCH) {\\n\\t\\t\\timpl = executeBranch;\\n\\t\\t} else if (opcode == Instructions.BRANCH_IF) {\\n\\t\\t\\timpl = executeBranchIf;\\n\\t\\t} else if (opcode == Instructions.RETURN) {\\n\\t\\t\\timpl = executeReturn;\\n\\t\\t} else if (opcode == Instructions.CALL) {\\n\\t\\t\\timpl = executeCall;\\n\\t\\t} else if (opcode == Instructions.CROSS_MODULE_CALL) {\\n\\t\\t\\timpl = executeCrossModuleCall;\\n\\t\\t} else if (opcode == Instructions.CALLER_MODULE_INTERNAL_CALL) {\\n\\t\\t\\timpl = executeCallerModuleInternalCall;\\n\\t\\t} else if (opcode == Instructions.CALL_INDIRECT) {\\n\\t\\t\\timpl = executeCallIndirect;\\n\\t\\t} else if (opcode == Instructions.END_BLOCK) {\\n\\t\\t\\timpl = executeEndBlock;\\n\\t\\t} else if (opcode == Instructions.END_BLOCK_IF) {\\n\\t\\t\\timpl = executeEndBlockIf;\\n\\t\\t} else if (opcode == Instructions.ARBITRARY_JUMP_IF) {\\n\\t\\t\\timpl = executeArbitraryJumpIf;\\n\\t\\t} else if (opcode == Instructions.LOCAL_GET) {\\n\\t\\t\\timpl = executeLocalGet;\\n\\t\\t} else if (opcode == Instructions.LOCAL_SET) {\\n\\t\\t\\timpl = executeLocalSet;\\n\\t\\t} else if (opcode == Instructions.GLOBAL_GET) {\\n\\t\\t\\timpl = executeGlobalGet;\\n\\t\\t} else if (opcode == Instructions.GLOBAL_SET) {\\n\\t\\t\\timpl = executeGlobalSet;\\n\\t\\t} else if (opcode == Instructions.INIT_FRAME) {\\n\\t\\t\\timpl = executeInitFrame;\\n\\t\\t} else if (opcode == Instructions.DROP) {\\n\\t\\t\\timpl = executeDrop;\\n\\t\\t} else if (opcode == Instructions.SELECT) {\\n\\t\\t\\timpl = executeSelect;\\n\\t\\t} else if (opcode >= Instructions.I32_CONST && opcode <= Instructions.F64_CONST || opcode == Instructions.PUSH_STACK_BOUNDARY) {\\n\\t\\t\\timpl = executeConstPush;\\n\\t\\t} else if (opcode == Instructions.MOVE_FROM_STACK_TO_INTERNAL || opcode == Instructions.MOVE_FROM_INTERNAL_TO_STACK) {\\n\\t\\t\\timpl = executeMoveInternal;\\n\\t\\t} else if (opcode == Instructions.IS_STACK_BOUNDARY) {\\n\\t\\t\\timpl = executeIsStackBoundary;\\n\\t\\t} else if (opcode == Instructions.DUP) {\\n\\t\\t\\timpl = executeDup;\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"INVALID_OPCODE\\\");\\n\\t\\t}\\n\\n\\t\\timpl(mach, mod, inst, proof);\\n\\t}\\n}\\n\",\"keccak256\":\"0xbcea39803345ec247047d0168417ae148c5f079d5a3e588d6f4743a2d89db417\",\"license\":\"UNLICENSED\"},\"src/state/Deserialize.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\nimport \\\"./ValueStacks.sol\\\";\\nimport \\\"./PcStacks.sol\\\";\\nimport \\\"./Machines.sol\\\";\\nimport \\\"./Instructions.sol\\\";\\nimport \\\"./StackFrames.sol\\\";\\nimport \\\"./MerkleProofs.sol\\\";\\nimport \\\"./ModuleMemories.sol\\\";\\nimport \\\"./Modules.sol\\\";\\nimport \\\"./GlobalStates.sol\\\";\\n\\nlibrary Deserialize {\\n\\tfunction u8(bytes calldata proof, uint256 startOffset) internal pure returns (uint8 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tret = uint8(proof[offset]);\\n\\t\\toffset++;\\n\\t}\\n\\n\\tfunction u16(bytes calldata proof, uint256 startOffset) internal pure returns (uint16 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tfor (uint256 i = 0; i < 16/8; i++) {\\n\\t\\t\\tret <<= 8;\\n\\t\\t\\tret |= uint8(proof[offset]);\\n\\t\\t\\toffset++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction u32(bytes calldata proof, uint256 startOffset) internal pure returns (uint32 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tfor (uint256 i = 0; i < 32/8; i++) {\\n\\t\\t\\tret <<= 8;\\n\\t\\t\\tret |= uint8(proof[offset]);\\n\\t\\t\\toffset++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction u64(bytes calldata proof, uint256 startOffset) internal pure returns (uint64 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tfor (uint256 i = 0; i < 64/8; i++) {\\n\\t\\t\\tret <<= 8;\\n\\t\\t\\tret |= uint8(proof[offset]);\\n\\t\\t\\toffset++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction u256(bytes calldata proof, uint256 startOffset) internal pure returns (uint256 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tfor (uint256 i = 0; i < 256/8; i++) {\\n\\t\\t\\tret <<= 8;\\n\\t\\t\\tret |= uint8(proof[offset]);\\n\\t\\t\\toffset++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction b32(bytes calldata proof, uint256 startOffset) internal pure returns (bytes32 ret, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tuint256 retInt;\\n\\t\\t(retInt, offset) = u256(proof, offset);\\n\\t\\tret = bytes32(retInt);\\n\\t}\\n\\n\\tfunction value(bytes calldata proof, uint256 startOffset) internal pure returns (Value memory val, uint256 offset)  {\\n\\t\\toffset = startOffset;\\n\\t\\tuint8 typeInt = uint8(proof[offset]);\\n\\t\\toffset++;\\n\\t\\trequire(typeInt <= uint8(Values.maxValueType()), \\\"BAD_VALUE_TYPE\\\");\\n\\t\\tuint256 contents;\\n\\t\\t(contents, offset) = u256(proof, offset);\\n\\t\\tval = Value({\\n\\t\\t\\tvalueType: ValueType(typeInt),\\n\\t\\t\\tcontents: contents\\n\\t\\t});\\n\\t}\\n\\n\\tfunction valueStack(bytes calldata proof, uint256 startOffset) internal pure returns (ValueStack memory stack, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tbytes32 remainingHash;\\n\\t\\t(remainingHash, offset) = b32(proof, offset);\\n\\t\\tuint256 provedLength;\\n\\t\\t(provedLength, offset) = u256(proof, offset);\\n\\t\\tValue[] memory proved = new Value[](provedLength);\\n\\t\\tfor (uint256 i = 0; i < proved.length; i++) {\\n\\t\\t\\t(proved[i], offset) = value(proof, offset);\\n\\t\\t}\\n\\t\\tstack = ValueStack({\\n\\t\\t\\tproved: ValueArray(proved),\\n\\t\\t\\tremainingHash: remainingHash\\n\\t\\t});\\n\\t}\\n\\n\\tfunction pcStack(bytes calldata proof, uint256 startOffset) internal pure returns (PcStack memory stack, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tbytes32 remainingHash;\\n\\t\\t(remainingHash, offset) = b32(proof, offset);\\n\\t\\tuint256 provedLength;\\n\\t\\t(provedLength, offset) = u256(proof, offset);\\n\\t\\tuint32[] memory proved = new uint32[](provedLength);\\n\\t\\tfor (uint256 i = 0; i < proved.length; i++) {\\n\\t\\t\\t(proved[i], offset) = u32(proof, offset);\\n\\t\\t}\\n\\t\\tstack = PcStack({\\n\\t\\t\\tproved: PcArray(proved),\\n\\t\\t\\tremainingHash: remainingHash\\n\\t\\t});\\n\\t}\\n\\n\\tfunction instruction(bytes calldata proof, uint256 startOffset) internal pure returns (Instruction memory inst, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tuint16 opcode;\\n\\t\\tuint256 data;\\n\\t\\t(opcode, offset) = u16(proof, offset);\\n\\t\\t(data, offset) = u256(proof, offset);\\n\\t\\tinst = Instruction({\\n\\t\\t\\topcode: opcode,\\n\\t\\t\\targumentData: data\\n\\t\\t});\\n\\t}\\n\\n\\tfunction stackFrame(bytes calldata proof, uint256 startOffset) internal pure returns (StackFrame memory window, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tValue memory returnPc;\\n\\t\\tbytes32 localsMerkleRoot;\\n\\t\\tuint32 callerModule;\\n\\t\\tuint32 callerModuleInternals;\\n\\t\\t(returnPc, offset) = value(proof, offset);\\n\\t\\t(localsMerkleRoot, offset) = b32(proof, offset);\\n\\t\\t(callerModule, offset) = u32(proof, offset);\\n\\t\\t(callerModuleInternals, offset) = u32(proof, offset);\\n\\t\\twindow = StackFrame({\\n\\t\\t\\treturnPc: returnPc,\\n\\t\\t\\tlocalsMerkleRoot: localsMerkleRoot,\\n\\t\\t\\tcallerModule: callerModule,\\n\\t\\t\\tcallerModuleInternals: callerModuleInternals\\n\\t\\t});\\n\\t}\\n\\n\\tfunction stackFrameWindow(bytes calldata proof, uint256 startOffset) internal pure returns (StackFrameWindow memory window, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tbytes32 remainingHash;\\n\\t\\t(remainingHash, offset) = b32(proof, offset);\\n\\t\\tStackFrame[] memory proved;\\n\\t\\tif (proof[offset] != 0) {\\n\\t\\t\\toffset++;\\n\\t\\t\\tproved = new StackFrame[](1);\\n\\t\\t\\t(proved[0], offset) = stackFrame(proof, offset);\\n\\t\\t} else {\\n\\t\\t\\toffset++;\\n\\t\\t\\tproved = new StackFrame[](0);\\n\\t\\t}\\n\\t\\twindow = StackFrameWindow({\\n\\t\\t\\tproved: proved,\\n\\t\\t\\tremainingHash: remainingHash\\n\\t\\t});\\n\\t}\\n\\n\\tfunction moduleMemory(bytes calldata proof, uint256 startOffset) internal pure returns (ModuleMemory memory mem, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tuint64 size;\\n\\t\\tbytes32 root;\\n\\t\\t(size, offset) = u64(proof, offset);\\n\\t\\t(root, offset) = b32(proof, offset);\\n\\t\\tmem = ModuleMemory({\\n\\t\\t\\tsize: size,\\n\\t\\t\\tmerkleRoot: root\\n\\t\\t});\\n\\t}\\n\\n\\tfunction module(bytes calldata proof, uint256 startOffset) internal pure returns (Module memory mod, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tbytes32 globalsMerkleRoot;\\n\\t\\tModuleMemory memory mem;\\n\\t\\tbytes32 tablesMerkleRoot;\\n\\t\\tbytes32 functionsMerkleRoot;\\n\\t\\tuint32 internalsOffset;\\n\\t\\t(globalsMerkleRoot, offset) = b32(proof, offset);\\n\\t\\t(mem, offset) = moduleMemory(proof, offset);\\n\\t\\t(tablesMerkleRoot, offset) = b32(proof, offset);\\n\\t\\t(functionsMerkleRoot, offset) = b32(proof, offset);\\n\\t\\t(internalsOffset, offset) = u32(proof, offset);\\n\\t\\tmod = Module({\\n\\t\\t\\tglobalsMerkleRoot: globalsMerkleRoot,\\n\\t\\t\\tmoduleMemory: mem,\\n\\t\\t\\ttablesMerkleRoot: tablesMerkleRoot,\\n\\t\\t\\tfunctionsMerkleRoot: functionsMerkleRoot,\\n\\t\\t\\tinternalsOffset: internalsOffset\\n\\t\\t});\\n\\t}\\n\\n\\tfunction globalState(bytes calldata proof, uint256 startOffset) internal pure returns (GlobalState memory state, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\n\\t\\t// using constant ints for array size requires newer solidity\\n\\t\\tbytes32[1] memory bytes32_vals;\\n\\t\\tuint64[2] memory u64_vals;\\n\\n\\t\\tfor (uint8 i = 0; i< GlobalStates.BYTES32_VALS_NUM; i++) {\\n\\t\\t\\t(bytes32_vals[i], offset) = b32(proof, offset);\\n\\t\\t}\\n\\t\\tfor (uint8 i = 0; i< GlobalStates.U64_VALS_NUM; i++) {\\n\\t\\t\\t(u64_vals[i], offset) = u64(proof, offset);\\n\\t\\t}\\n\\t\\tstate = GlobalState({\\n\\t\\t\\tbytes32_vals: bytes32_vals,\\n\\t\\t\\tu64_vals: u64_vals\\n\\t\\t});\\n\\t}\\n\\n\\tfunction machine(bytes calldata proof, uint256 startOffset) internal pure returns (Machine memory mach, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tMachineStatus status;\\n\\t\\t{\\n\\t\\t\\tuint8 status_u8;\\n\\t\\t\\t(status_u8, offset) = u8(proof, offset);\\n\\t\\t\\tif (status_u8 == 0) {\\n\\t\\t\\t\\tstatus = MachineStatus.RUNNING;\\n\\t\\t\\t} else if (status_u8 == 1) {\\n\\t\\t\\t\\tstatus = MachineStatus.FINISHED;\\n\\t\\t\\t} else if (status_u8 == 2) {\\n\\t\\t\\t\\tstatus = MachineStatus.ERRORED;\\n\\t\\t\\t} else if (status_u8 == 3) {\\n\\t\\t\\t\\tstatus = MachineStatus.TOO_FAR;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(\\\"UNKNOWN_MACH_STATUS\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tValueStack memory values;\\n\\t\\tValueStack memory internalStack;\\n\\t\\tPcStack memory blocks;\\n\\t\\tbytes32 globalStateHash;\\n\\t\\tuint32 moduleIdx;\\n\\t\\tuint32 functionIdx;\\n\\t\\tuint32 functionPc;\\n\\t\\tStackFrameWindow memory frameStack;\\n\\t\\tbytes32 modulesRoot;\\n\\t\\t(values, offset) = valueStack(proof, offset);\\n\\t\\t(internalStack, offset) = valueStack(proof, offset);\\n\\t\\t(blocks, offset) = pcStack(proof, offset);\\n\\t\\t(frameStack, offset) = stackFrameWindow(proof, offset);\\n\\t\\t(globalStateHash, offset) = b32(proof, offset);\\n\\t\\t(moduleIdx, offset) = u32(proof, offset);\\n\\t\\t(functionIdx, offset) = u32(proof, offset);\\n\\t\\t(functionPc, offset) = u32(proof, offset);\\n\\t\\t(modulesRoot, offset) = b32(proof, offset);\\n\\t\\tmach = Machine({\\n\\t\\t\\tstatus: status,\\n\\t\\t\\tvalueStack: values,\\n\\t\\t\\tinternalStack: internalStack,\\n\\t\\t\\tblockStack: blocks,\\n\\t\\t\\tframeStack: frameStack,\\n\\t\\t\\tglobalStateHash: globalStateHash,\\n\\t\\t\\tmoduleIdx: moduleIdx,\\n\\t\\t\\tfunctionIdx: functionIdx,\\n\\t\\t\\tfunctionPc: functionPc,\\n\\t\\t\\tmodulesRoot: modulesRoot\\n\\t\\t});\\n\\t}\\n\\n\\tfunction merkleProof(bytes calldata proof, uint256 startOffset) internal pure returns (MerkleProof memory merkle, uint256 offset) {\\n\\t\\toffset = startOffset;\\n\\t\\tuint8 length;\\n\\t\\t(length, offset) = u8(proof, offset);\\n\\t\\tbytes32[] memory counterparts = new bytes32[](length);\\n\\t\\tfor (uint8 i = 0; i < length; i++) {\\n\\t\\t\\t(counterparts[i], offset) = b32(proof, offset);\\n\\t\\t}\\n\\t\\tmerkle = MerkleProof(counterparts);\\n\\t}\\n}\\n\",\"keccak256\":\"0x32a434c4f0cdabfeaac3589962cf2baae436569e8a9da409cfc418e5ead4cb1d\",\"license\":\"UNLICENSED\"},\"src/state/GlobalStates.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nstruct GlobalState {\\n\\tbytes32[1] bytes32_vals;\\n\\tuint64[2] u64_vals;\\n}\\n\\n\\nlibrary GlobalStates {\\n\\tuint16 constant BYTES32_VALS_NUM = 1;\\n\\tuint16 constant U64_VALS_NUM = 2;\\n\\tfunction hash(GlobalState memory state) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\n\\t\\t\\t\\\"Global state:\\\",\\n\\t\\t\\tstate.bytes32_vals[0],\\n\\t\\t\\tstate.u64_vals[0],\\n\\t\\t\\tstate.u64_vals[1]\\n\\t\\t));\\n\\t}\\n}\\n\",\"keccak256\":\"0x417592ac9b86d72227941cc836354eae4a32c6bf1730c798efaf5c8772043631\",\"license\":\"UNLICENSED\"},\"src/state/Instructions.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nstruct Instruction {\\n    uint16 opcode;\\n    uint256 argumentData;\\n}\\n\\nlibrary Instructions {\\n    uint16 constant UNREACHABLE = 0x00;\\n    uint16 constant NOP = 0x01;\\n    uint16 constant BLOCK = 0x02;\\n    uint16 constant BRANCH = 0x0C;\\n    uint16 constant BRANCH_IF = 0x0D;\\n    uint16 constant RETURN = 0x0F;\\n    uint16 constant CALL = 0x10;\\n    uint16 constant CALL_INDIRECT = 0x11;\\n    uint16 constant LOCAL_GET = 0x20;\\n    uint16 constant LOCAL_SET = 0x21;\\n    uint16 constant GLOBAL_GET = 0x23;\\n    uint16 constant GLOBAL_SET = 0x24;\\n\\n    uint16 constant I32_LOAD = 0x28;\\n    uint16 constant I64_LOAD = 0x29;\\n    uint16 constant F32_LOAD = 0x2A;\\n    uint16 constant F64_LOAD = 0x2B;\\n    uint16 constant I32_LOAD8_S = 0x2C;\\n    uint16 constant I32_LOAD8_U = 0x2D;\\n    uint16 constant I32_LOAD16_S = 0x2E;\\n    uint16 constant I32_LOAD16_U = 0x2F;\\n    uint16 constant I64_LOAD8_S = 0x30;\\n    uint16 constant I64_LOAD8_U = 0x31;\\n    uint16 constant I64_LOAD16_S = 0x32;\\n    uint16 constant I64_LOAD16_U = 0x33;\\n    uint16 constant I64_LOAD32_S = 0x34;\\n    uint16 constant I64_LOAD32_U = 0x35;\\n\\n    uint16 constant I32_STORE = 0x36;\\n    uint16 constant I64_STORE = 0x37;\\n    uint16 constant F32_STORE = 0x38;\\n    uint16 constant F64_STORE = 0x39;\\n    uint16 constant I32_STORE8 = 0x3A;\\n    uint16 constant I32_STORE16 = 0x3B;\\n    uint16 constant I64_STORE8 = 0x3C;\\n    uint16 constant I64_STORE16 = 0x3D;\\n    uint16 constant I64_STORE32 = 0x3E;\\n\\n    uint16 constant MEMORY_SIZE = 0x3F;\\n    uint16 constant MEMORY_GROW = 0x40;\\n\\n    uint16 constant DROP = 0x1A;\\n    uint16 constant SELECT = 0x1B;\\n    uint16 constant I32_CONST = 0x41;\\n    uint16 constant I64_CONST = 0x42;\\n    uint16 constant F32_CONST = 0x43;\\n    uint16 constant F64_CONST = 0x44;\\n    uint16 constant I32_EQZ = 0x45;\\n    uint16 constant I32_RELOP_BASE = 0x46;\\n    uint16 constant IRELOP_EQ = 0;\\n    uint16 constant IRELOP_NE = 1;\\n    uint16 constant IRELOP_LT_S = 2;\\n    uint16 constant IRELOP_LT_U = 3;\\n    uint16 constant IRELOP_GT_S = 4;\\n    uint16 constant IRELOP_GT_U = 5;\\n    uint16 constant IRELOP_LE_S = 6;\\n    uint16 constant IRELOP_LE_U = 7;\\n    uint16 constant IRELOP_GE_S = 8;\\n    uint16 constant IRELOP_GE_U = 9;\\n    uint16 constant IRELOP_LAST = IRELOP_GE_U;\\n\\n    uint16 constant I64_EQZ = 0x50;\\n    uint16 constant I64_RELOP_BASE = 0x51;\\n\\n    uint16 constant I32_UNOP_BASE = 0x67;\\n    uint16 constant IUNOP_CLZ = 0;\\n    uint16 constant IUNOP_CTZ = 1;\\n    uint16 constant IUNOP_POPCNT = 2;\\n    uint16 constant IUNOP_LAST = IUNOP_POPCNT;\\n\\n    uint16 constant I32_ADD = 0x6A;\\n    uint16 constant I32_SUB = 0x6B;\\n    uint16 constant I32_MUL = 0x6C;\\n    uint16 constant I32_DIV_S = 0x6D;\\n    uint16 constant I32_DIV_U = 0x6E;\\n    uint16 constant I32_REM_S = 0x6F;\\n    uint16 constant I32_REM_U = 0x70;\\n    uint16 constant I32_AND = 0x71;\\n    uint16 constant I32_OR = 0x72;\\n    uint16 constant I32_XOR = 0x73;\\n    uint16 constant I32_SHL = 0x74;\\n    uint16 constant I32_SHR_S = 0x75;\\n    uint16 constant I32_SHR_U = 0x76;\\n    uint16 constant I32_ROTL = 0x77;\\n    uint16 constant I32_ROTR = 0x78;\\n\\n    uint16 constant I64_UNOP_BASE = 0x79;\\n\\n    uint16 constant I64_ADD = 0x7C;\\n    uint16 constant I64_SUB = 0x7D;\\n    uint16 constant I64_MUL = 0x7E;\\n    uint16 constant I64_DIV_S = 0x7F;\\n    uint16 constant I64_DIV_U = 0x80;\\n    uint16 constant I64_REM_S = 0x81;\\n    uint16 constant I64_REM_U = 0x82;\\n    uint16 constant I64_AND = 0x83;\\n    uint16 constant I64_OR = 0x84;\\n    uint16 constant I64_XOR = 0x85;\\n    uint16 constant I64_SHL = 0x86;\\n    uint16 constant I64_SHR_S = 0x87;\\n    uint16 constant I64_SHR_U = 0x88;\\n    uint16 constant I64_ROTL = 0x89;\\n    uint16 constant I64_ROTR = 0x8A;\\n\\n    uint16 constant I32_WRAP_I64 = 0xA7;\\n    uint16 constant I64_EXTEND_I32_S = 0xAC;\\n    uint16 constant I64_EXTEND_I32_U = 0xAD;\\n\\n    uint16 constant I32_REINTERPRET_F32 = 0xBC;\\n    uint16 constant I64_REINTERPRET_F64 = 0xBD;\\n    uint16 constant F32_REINTERPRET_I32 = 0xBE;\\n    uint16 constant F64_REINTERPRET_I64 = 0xBF;\\n\\n    uint16 constant I32_EXTEND_8S = 0xC0;\\n    uint16 constant I32_EXTEND_16S = 0xC1;\\n    uint16 constant I64_EXTEND_8S = 0xC2;\\n    uint16 constant I64_EXTEND_16S = 0xC3;\\n    uint16 constant I64_EXTEND_32S = 0xC4;\\n\\n    uint16 constant END_BLOCK = 0x8000;\\n    uint16 constant END_BLOCK_IF = 0x8001;\\n    uint16 constant INIT_FRAME = 0x8002;\\n    uint16 constant ARBITRARY_JUMP_IF = 0x8003;\\n    uint16 constant PUSH_STACK_BOUNDARY = 0x8004;\\n    uint16 constant MOVE_FROM_STACK_TO_INTERNAL = 0x8005;\\n    uint16 constant MOVE_FROM_INTERNAL_TO_STACK = 0x8006;\\n    uint16 constant IS_STACK_BOUNDARY = 0x8007;\\n    uint16 constant DUP = 0x8008;\\n    uint16 constant CROSS_MODULE_CALL = 0x8009;\\n    uint16 constant CALLER_MODULE_INTERNAL_CALL = 0x800A;\\n\\n    uint16 constant GET_GLOBAL_STATE_BYTES32 = 0x8010;\\n    uint16 constant SET_GLOBAL_STATE_BYTES32 = 0x8011;\\n    uint16 constant GET_GLOBAL_STATE_U64 = 0x8012;\\n    uint16 constant SET_GLOBAL_STATE_U64 = 0x8013;\\n\\n    uint16 constant READ_PRE_IMAGE = 0x8020;\\n    uint16 constant READ_INBOX_MESSAGE = 0x8021;\\n    uint16 constant HALT_AND_SET_FINISHED = 0x8022;\\n\\n    uint256 constant INBOX_INDEX_SEQUENCER = 0;\\n    uint256 constant INBOX_INDEX_DELAYED = 1;\\n\\n    function hash(Instruction memory inst) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"Instruction:\\\", inst.opcode, inst.argumentData)\\n            );\\n    }\\n\\n    function newNop() internal pure returns (Instruction memory) {\\n        return Instruction({opcode: NOP, argumentData: 0});\\n    }\\n}\\n\",\"keccak256\":\"0xf273ee49bad2f0df9949848a86d77ede70547664094d5a5b988f1a50781cbcb5\",\"license\":\"UNLICENSED\"},\"src/state/Machines.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ValueStacks.sol\\\";\\nimport \\\"./PcStacks.sol\\\";\\nimport \\\"./Instructions.sol\\\";\\nimport \\\"./StackFrames.sol\\\";\\n\\nenum MachineStatus {\\n\\tRUNNING,\\n\\tFINISHED,\\n\\tERRORED,\\n\\tTOO_FAR\\n}\\n\\nstruct Machine {\\n\\tMachineStatus status;\\n\\tValueStack valueStack;\\n\\tValueStack internalStack;\\n\\tPcStack blockStack;\\n\\tStackFrameWindow frameStack;\\n\\tbytes32 globalStateHash;\\n\\tuint32 moduleIdx;\\n\\tuint32 functionIdx;\\n\\tuint32 functionPc;\\n\\tbytes32 modulesRoot;\\n}\\n\\nlibrary Machines {\\n\\tfunction hash(Machine memory mach) internal pure returns (bytes32) {\\n\\t\\t// Warning: the non-running hashes are replicated in BlockChallenge\\n\\t\\tif (mach.status == MachineStatus.RUNNING) {\\n\\t\\t\\treturn keccak256(abi.encodePacked(\\n\\t\\t\\t\\t\\\"Machine running:\\\",\\n\\t\\t\\t\\tValueStacks.hash(mach.valueStack),\\n\\t\\t\\t\\tValueStacks.hash(mach.internalStack),\\n\\t\\t\\t\\tPcStacks.hash(mach.blockStack),\\n\\t\\t\\t\\tStackFrames.hash(mach.frameStack),\\n\\t\\t\\t\\tmach.globalStateHash,\\n\\t\\t\\t\\tmach.moduleIdx,\\n\\t\\t\\t\\tmach.functionIdx,\\n\\t\\t\\t\\tmach.functionPc,\\n\\t\\t\\t\\tmach.modulesRoot\\n\\t\\t\\t));\\n\\t\\t} else if (mach.status == MachineStatus.FINISHED) {\\n\\t\\t\\treturn keccak256(abi.encodePacked(\\n\\t\\t\\t\\t\\\"Machine finished:\\\",\\n\\t\\t\\t\\tmach.globalStateHash\\n\\t\\t\\t));\\n\\t\\t} else if (mach.status == MachineStatus.ERRORED) {\\n\\t\\t\\treturn keccak256(abi.encodePacked(\\\"Machine errored:\\\"));\\n\\t\\t} else if (mach.status == MachineStatus.TOO_FAR) {\\n\\t\\t\\treturn keccak256(abi.encodePacked(\\\"Machine too far:\\\"));\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"BAD_MACH_STATUS\\\");\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xc7501a5fabd0fe8a0aac6a4f5ae560789a0932287718fbe4eda68aa8ed37b273\",\"license\":\"UNLICENSED\"},\"src/state/MerkleProofs.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\nimport \\\"./Instructions.sol\\\";\\nimport \\\"./Modules.sol\\\";\\n\\nstruct MerkleProof {\\n\\tbytes32[] counterparts;\\n}\\n\\nlibrary MerkleProofs {\\n\\tfunction computeRootFromValue(MerkleProof memory proof, uint256 index, Value memory leaf) internal pure returns (bytes32) {\\n\\t\\treturn computeRootUnsafe(proof, index, Values.hash(leaf), \\\"Value merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromInstruction(MerkleProof memory proof, uint256 index, Instruction memory inst) internal pure returns (bytes32) {\\n\\t\\treturn computeRootUnsafe(proof, index, Instructions.hash(inst), \\\"Instruction merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromFunction(MerkleProof memory proof, uint256 index, bytes32 codeRoot) internal pure returns (bytes32) {\\n\\t\\tbytes32 h = keccak256(abi.encodePacked(\\\"Function:\\\", codeRoot));\\n\\t\\treturn computeRootUnsafe(proof, index, h, \\\"Function merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromMemory(MerkleProof memory proof, uint256 index, bytes32 contents) internal pure returns (bytes32) {\\n\\t\\tbytes32 h = keccak256(abi.encodePacked(\\\"Memory leaf:\\\", contents));\\n\\t\\treturn computeRootUnsafe(proof, index, h, \\\"Memory merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromElement(MerkleProof memory proof, uint256 index, bytes32 funcTypeHash, Value memory val) internal pure returns (bytes32) {\\n\\t\\tbytes32 h = keccak256(abi.encodePacked(\\\"Table element:\\\", funcTypeHash, Values.hash(val)));\\n\\t\\treturn computeRootUnsafe(proof, index, h, \\\"Table element merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromTable(MerkleProof memory proof, uint256 index, uint8 tableType, uint64 tableSize, bytes32 elementsRoot) internal pure returns (bytes32) {\\n\\t\\tbytes32 h = keccak256(abi.encodePacked(\\\"Table:\\\", tableType, tableSize, elementsRoot));\\n\\t\\treturn computeRootUnsafe(proof, index, h, \\\"Table merkle tree:\\\");\\n\\t}\\n\\n\\tfunction computeRootFromModule(MerkleProof memory proof, uint256 index, Module memory mod) internal pure returns (bytes32) {\\n\\t\\treturn computeRootUnsafe(proof, index, Modules.hash(mod), \\\"Module merkle tree:\\\");\\n\\t}\\n\\n\\t// WARNING: leafHash must be computed in such a way that it cannot be a non-leaf hash.\\n\\tfunction computeRootUnsafe(MerkleProof memory proof, uint256 index, bytes32 leafHash, string memory prefix) internal pure returns (bytes32 h) {\\n\\t\\th = leafHash;\\n\\t\\tfor (uint256 layer = 0; layer < proof.counterparts.length; layer++) {\\n\\t\\t\\tif (index & 1 == 0) {\\n\\t\\t\\t\\th = keccak256(abi.encodePacked(prefix, h, proof.counterparts[layer]));\\n\\t\\t\\t} else {\\n\\t\\t\\t\\th = keccak256(abi.encodePacked(prefix, proof.counterparts[layer], h));\\n\\t\\t\\t}\\n\\t\\t\\tindex >>= 1;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x3696497409a3c3cdf6e0af1cc0048dbaa9fcb9ead23b409a717367e5dc08ed07\",\"license\":\"UNLICENSED\"},\"src/state/ModuleMemories.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./MerkleProofs.sol\\\";\\nimport \\\"./Deserialize.sol\\\";\\n\\nstruct ModuleMemory {\\n\\tuint64 size;\\n\\tbytes32 merkleRoot;\\n}\\n\\nlibrary ModuleMemories {\\n\\tfunction hash(ModuleMemory memory mem) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\\"Memory:\\\", mem.size, mem.merkleRoot));\\n\\t}\\n\\n\\tfunction proveLeaf(ModuleMemory memory mem, uint256 leafIdx, bytes calldata proof, uint256 startOffset) internal pure returns (bytes32 contents, uint256 offset, MerkleProof memory merkle) {\\n\\t\\toffset = startOffset;\\n\\t\\t(contents, offset) = Deserialize.b32(proof, offset);\\n\\t\\t(merkle, offset) = Deserialize.merkleProof(proof, offset);\\n\\t\\tbytes32 recomputedRoot = MerkleProofs.computeRootFromMemory(merkle, leafIdx, contents);\\n\\t\\trequire(recomputedRoot == mem.merkleRoot, \\\"WRONG_MEM_ROOT\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0x5f836a5d36dff4e34cd02ef20f16eccbe6869fe9011eba8e8ff6ba0430910fe0\",\"license\":\"UNLICENSED\"},\"src/state/Modules.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ModuleMemories.sol\\\";\\n\\nstruct Module {\\n    bytes32 globalsMerkleRoot;\\n    ModuleMemory moduleMemory;\\n    bytes32 tablesMerkleRoot;\\n    bytes32 functionsMerkleRoot;\\n    uint32 internalsOffset;\\n}\\n\\nlibrary Modules {\\n    function hash(Module memory mod) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"Module:\\\",\\n                    mod.globalsMerkleRoot,\\n                    ModuleMemories.hash(mod.moduleMemory),\\n                    mod.tablesMerkleRoot,\\n                    mod.functionsMerkleRoot,\\n                    mod.internalsOffset\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x40ac3cca47c15c6f601467e1a3a35bb058d65fd5ac74c628edcdec0fa4aad0f4\",\"license\":\"UNLICENSED\"},\"src/state/PcArrays.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nstruct PcArray {\\n\\tuint32[] inner;\\n}\\n\\nlibrary PcArrays {\\n\\tfunction get(PcArray memory arr, uint256 index) internal pure returns (uint32) {\\n\\t\\treturn arr.inner[index];\\n\\t}\\n\\n\\tfunction set(PcArray memory arr, uint256 index, uint32 val) internal pure {\\n\\t\\tarr.inner[index] = val;\\n\\t}\\n\\n\\tfunction length(PcArray memory arr) internal pure returns (uint256) {\\n\\t\\treturn arr.inner.length;\\n\\t}\\n\\n\\tfunction push(PcArray memory arr, uint32 val) internal pure {\\n\\t\\tuint32[] memory newInner = new uint32[](arr.inner.length + 1);\\n\\t\\tfor (uint256 i = 0; i < arr.inner.length; i++) {\\n\\t\\t\\tnewInner[i] = arr.inner[i];\\n\\t\\t}\\n\\t\\tnewInner[arr.inner.length] = val;\\n\\t\\tarr.inner = newInner;\\n\\t}\\n\\n\\tfunction pop(PcArray memory arr) internal pure returns (uint32 popped) {\\n\\t\\tpopped = arr.inner[arr.inner.length - 1];\\n\\t\\tuint32[] memory newInner = new uint32[](arr.inner.length - 1);\\n\\t\\tfor (uint256 i = 0; i < newInner.length; i++) {\\n\\t\\t\\tnewInner[i] = arr.inner[i];\\n\\t\\t}\\n\\t\\tarr.inner = newInner;\\n\\t}\\n}\\n\",\"keccak256\":\"0x1a2fa6e3929c5e6afd56643896b8074ee830207866ed65c2e85dd7908482c39b\",\"license\":\"UNLICENSED\"},\"src/state/PcStacks.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PcArrays.sol\\\";\\n\\nstruct PcStack {\\n\\tPcArray proved;\\n\\tbytes32 remainingHash;\\n}\\n\\nlibrary PcStacks {\\n\\tfunction hash(PcStack memory stack) internal pure returns (bytes32 h) {\\n\\t\\th = stack.remainingHash;\\n\\t\\tuint256 len = PcArrays.length(stack.proved);\\n\\t\\tfor (uint256 i = 0; i < len; i++) {\\n\\t\\t\\th = keccak256(abi.encodePacked(\\\"Program counter stack:\\\", PcArrays.get(stack.proved, i), h));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction pop(PcStack memory stack) internal pure returns (uint32) {\\n\\t\\treturn PcArrays.pop(stack.proved);\\n\\t}\\n\\n\\tfunction push(PcStack memory stack, uint32 val) internal pure {\\n\\t\\treturn PcArrays.push(stack.proved, val);\\n\\t}\\n\\n\\tfunction isEmpty(PcStack memory stack) internal pure returns (bool) {\\n\\t\\treturn PcArrays.length(stack.proved) == 0 && stack.remainingHash == bytes32(0);\\n\\t}\\n\\n\\tfunction hasProvenDepthLessThan(PcStack memory stack, uint256 bound) internal pure returns (bool) {\\n\\t\\treturn PcArrays.length(stack.proved) < bound && stack.remainingHash == bytes32(0);\\n\\t}\\n}\\n\",\"keccak256\":\"0x90258f73cc0d9af360f8ded68504aa1a2841ff46c20041dc40fc9df16a62b281\",\"license\":\"UNLICENSED\"},\"src/state/StackFrames.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\n\\nstruct StackFrame {\\n    Value returnPc;\\n    bytes32 localsMerkleRoot;\\n    uint32 callerModule;\\n    uint32 callerModuleInternals;\\n}\\n\\nstruct StackFrameWindow {\\n    StackFrame[] proved;\\n    bytes32 remainingHash;\\n}\\n\\nlibrary StackFrames {\\n    function hash(StackFrame memory frame) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"Stack frame:\\\",\\n                    Values.hash(frame.returnPc),\\n                    frame.localsMerkleRoot,\\n                    frame.callerModule,\\n                    frame.callerModuleInternals\\n                )\\n            );\\n    }\\n\\n    function hash(StackFrameWindow memory window)\\n        internal\\n        pure\\n        returns (bytes32 h)\\n    {\\n        h = window.remainingHash;\\n        for (uint256 i = 0; i < window.proved.length; i++) {\\n            h = keccak256(\\n                abi.encodePacked(\\n                    \\\"Stack frame stack:\\\",\\n                    hash(window.proved[i]),\\n                    h\\n                )\\n            );\\n        }\\n    }\\n\\n    function peek(StackFrameWindow memory window)\\n        internal\\n        pure\\n        returns (StackFrame memory)\\n    {\\n        require(window.proved.length == 1, \\\"BAD_WINDOW_LENGTH\\\");\\n        return window.proved[0];\\n    }\\n\\n    function pop(StackFrameWindow memory window)\\n        internal\\n        pure\\n        returns (StackFrame memory frame)\\n    {\\n        require(window.proved.length == 1, \\\"BAD_WINDOW_LENGTH\\\");\\n        frame = window.proved[0];\\n        window.proved = new StackFrame[](0);\\n    }\\n\\n    function push(StackFrameWindow memory window, StackFrame memory frame)\\n        internal\\n        pure\\n    {\\n        StackFrame[] memory newProved = new StackFrame[](\\n            window.proved.length + 1\\n        );\\n        for (uint256 i = 0; i < window.proved.length; i++) {\\n            newProved[i] = window.proved[i];\\n        }\\n        newProved[window.proved.length] = frame;\\n        window.proved = newProved;\\n    }\\n}\\n\",\"keccak256\":\"0x33d0cd90f98e6036b274316c9ef622cdba8751a393656f838eb9795423073ee1\",\"license\":\"UNLICENSED\"},\"src/state/ValueArrays.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\n\\nstruct ValueArray {\\n\\tValue[] inner;\\n}\\n\\nlibrary ValueArrays {\\n\\tfunction get(ValueArray memory arr, uint256 index) internal pure returns (Value memory) {\\n\\t\\treturn arr.inner[index];\\n\\t}\\n\\n\\tfunction set(ValueArray memory arr, uint256 index, Value memory val) internal pure {\\n\\t\\tarr.inner[index] = val;\\n\\t}\\n\\n\\tfunction length(ValueArray memory arr) internal pure returns (uint256) {\\n\\t\\treturn arr.inner.length;\\n\\t}\\n\\n\\tfunction push(ValueArray memory arr, Value memory val) internal pure {\\n\\t\\tValue[] memory newInner = new Value[](arr.inner.length + 1);\\n\\t\\tfor (uint256 i = 0; i < arr.inner.length; i++) {\\n\\t\\t\\tnewInner[i] = arr.inner[i];\\n\\t\\t}\\n\\t\\tnewInner[arr.inner.length] = val;\\n\\t\\tarr.inner = newInner;\\n\\t}\\n\\n\\tfunction pop(ValueArray memory arr) internal pure returns (Value memory popped) {\\n\\t\\tpopped = arr.inner[arr.inner.length - 1];\\n\\t\\tValue[] memory newInner = new Value[](arr.inner.length - 1);\\n\\t\\tfor (uint256 i = 0; i < newInner.length; i++) {\\n\\t\\t\\tnewInner[i] = arr.inner[i];\\n\\t\\t}\\n\\t\\tarr.inner = newInner;\\n\\t}\\n}\\n\",\"keccak256\":\"0xee609e88227972d896e3c4dd3eb9d5fbedbcc043c1c593735923509557c5f125\",\"license\":\"UNLICENSED\"},\"src/state/ValueStacks.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Values.sol\\\";\\nimport \\\"./ValueArrays.sol\\\";\\n\\nstruct ValueStack {\\n\\tValueArray proved;\\n\\tbytes32 remainingHash;\\n}\\n\\nlibrary ValueStacks {\\n\\tfunction hash(ValueStack memory stack) internal pure returns (bytes32 h) {\\n\\t\\th = stack.remainingHash;\\n\\t\\tuint256 len = ValueArrays.length(stack.proved);\\n\\t\\tfor (uint256 i = 0; i < len; i++) {\\n\\t\\t\\th = keccak256(abi.encodePacked(\\\"Value stack:\\\", Values.hash(ValueArrays.get(stack.proved, i)), h));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction peek(ValueStack memory stack) internal pure returns (Value memory) {\\n\\t\\tuint256 len = ValueArrays.length(stack.proved);\\n\\t\\treturn ValueArrays.get(stack.proved, len - 1);\\n\\t}\\n\\n\\tfunction pop(ValueStack memory stack) internal pure returns (Value memory) {\\n\\t\\treturn ValueArrays.pop(stack.proved);\\n\\t}\\n\\n\\tfunction push(ValueStack memory stack, Value memory val) internal pure {\\n\\t\\treturn ValueArrays.push(stack.proved, val);\\n\\t}\\n\\n\\tfunction isEmpty(ValueStack memory stack) internal pure returns (bool) {\\n\\t\\treturn ValueArrays.length(stack.proved) == 0 && stack.remainingHash == bytes32(0);\\n\\t}\\n\\n\\tfunction hasProvenDepthLessThan(ValueStack memory stack, uint256 bound) internal pure returns (bool) {\\n\\t\\treturn ValueArrays.length(stack.proved) < bound && stack.remainingHash == bytes32(0);\\n\\t}\\n}\\n\",\"keccak256\":\"0x5c0cf0db204e28fff836c7b53c622e6d7fcf5d91d3f17a275e2d99710b3dbcb5\",\"license\":\"UNLICENSED\"},\"src/state/Values.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nenum ValueType {\\n\\tI32,\\n\\tI64,\\n\\tF32,\\n\\tF64,\\n\\tREF_NULL,\\n\\tFUNC_REF,\\n\\tINTERNAL_REF,\\n\\tSTACK_BOUNDARY\\n}\\n\\nstruct Value {\\n\\tValueType valueType;\\n\\tuint256 contents;\\n}\\n\\nlibrary Values {\\n\\tfunction hash(Value memory val) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\\"Value:\\\", val.valueType, val.contents));\\n\\t}\\n\\n\\tfunction maxValueType() internal pure returns (ValueType) {\\n\\t\\treturn ValueType.STACK_BOUNDARY;\\n\\t}\\n\\n\\tfunction isNumeric(ValueType val) internal pure returns (bool) {\\n\\t\\treturn val == ValueType.I32 || val == ValueType.I64 || val == ValueType.F32 || val == ValueType.F64;\\n\\t}\\n\\n\\tfunction isNumeric(Value memory val) internal pure returns (bool) {\\n\\t\\treturn isNumeric(val.valueType);\\n\\t}\\n\\n\\tfunction assumeI32(Value memory val) internal pure returns(uint32) {\\n\\t\\tuint uintval = uint(val.contents);\\n\\t\\trequire(val.valueType == ValueType.I32, \\\"NOT_I32\\\");\\n\\t\\trequire(uintval < (1<<32), \\\"BAD_I32\\\");\\n\\t\\treturn uint32(uintval);\\n\\t}\\n\\n\\tfunction assumeI64(Value memory val) internal pure returns(uint64) {\\n\\t\\tuint uintval = uint(val.contents);\\n\\t\\trequire(val.valueType == ValueType.I64, \\\"NOT_I64\\\");\\n\\t\\trequire(uintval < (1<<64), \\\"BAD_I64\\\");\\n\\t\\treturn uint64(uintval);\\n\\t}\\n\\n\\tfunction newRefNull() internal pure returns (Value memory) {\\n\\t\\treturn Value({\\n\\t\\t\\tvalueType: ValueType.REF_NULL,\\n\\t\\t\\tcontents: 0\\n\\t\\t});\\n\\t}\\n\\n\\tfunction newI32(uint32 x) internal pure returns (Value memory) {\\n\\t\\treturn Value({\\n\\t\\t\\tvalueType: ValueType.I32,\\n\\t\\t\\tcontents: uint256(x)\\n\\t\\t});\\n\\t}\\n\\n\\tfunction newI64(uint64 x) internal pure returns (Value memory) {\\n\\t\\treturn Value({\\n\\t\\t\\tvalueType: ValueType.I64,\\n\\t\\t\\tcontents: uint256(x)\\n\\t\\t});\\n\\t}\\n\\n\\tfunction newBoolean(bool x) internal pure returns (Value memory) {\\n\\t\\tif (x) {\\n\\t\\t\\treturn newI32(uint32(1));\\n\\t\\t} else {\\n\\t\\t\\treturn newI32(uint32(0));\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x2c30c3b373b6442aaef6407afe370abc25a2eb41bb4368294dd120c99c1b594f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061453d806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c4017b3814610030575b600080fd5b61004a60048036038101906100459190612dfe565b610061565b604051610058929190613b31565b60405180910390f35b6100696123b1565b610071612446565b8661007b90613e3d565b91508580360381019061008e9190612eb7565b905060008560000160208101906100a59190612ee4565b905061248a600061ffff168261ffff1614156100c5576103e990506103cb565b600161ffff168261ffff1614156100e05761042190506103ca565b600261ffff168261ffff1614156100fb5761042890506103c9565b600c61ffff168261ffff1614156101165761049390506103c8565b600d61ffff168261ffff161415610131576104bf90506103c7565b600f61ffff168261ffff16141561014c5761050a90506103c6565b601061ffff168261ffff161415610167576106b790506103c5565b61800961ffff168261ffff161415610183576107a290506103c4565b61800a61ffff168261ffff16141561019f576108a090506103c3565b601161ffff168261ffff1614156101ba57610a0190506103c2565b61800061ffff168261ffff1614156101d657610e8b90506103c1565b61800161ffff168261ffff1614156101f257610ea090506103c0565b61800361ffff168261ffff16141561020e57610ed490506103bf565b602061ffff168261ffff16141561022957610f6990506103be565b602161ffff168261ffff16141561024457610fa990506103bd565b602361ffff168261ffff16141561025f57610ff290506103bc565b602461ffff168261ffff16141561027a5761102090506103bb565b61800261ffff168261ffff1614156102965761105790506103ba565b601a61ffff168261ffff1614156102b1576110eb90506103b9565b601b61ffff168261ffff1614156102cc5761110090506103b8565b604161ffff168261ffff16101580156102ee5750604461ffff168261ffff1611155b80610302575061800461ffff168261ffff16145b156103115761117590506103b7565b61800561ffff168261ffff161480610332575061800661ffff168261ffff16145b156103415761129b90506103b6565b61800761ffff168261ffff16141561035d5761137390506103b5565b61800861ffff168261ffff161415610379576113f990506103b4565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ab90613931565b60405180910390fd5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b6103dc84848989898663ffffffff16565b5050965096945050505050565b60028560000190600381111561040257610401613f8e565b5b9081600381111561041657610415613f8e565b5b815250505050505050565b5050505050565b60008360200135905083602001358163ffffffff161461047d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047490613a31565b60405180910390fd5b61048b866060015182611420565b505050505050565b6104a08560600151611432565b85610100019063ffffffff16908163ffffffff16815250505050505050565b60006104ce8660200151611448565b90506000816020015114610502576104e98660600151611432565b86610100019063ffffffff16908163ffffffff16815250505b505050505050565b60006105198660800151611464565b90506004600781111561052f5761052e613f8e565b5b816000015160000151600781111561054a57610549613f8e565b5b14156105875760028660000190600381111561056957610568613f8e565b5b9081600381111561057d5761057c613f8e565b5b81525050506106b0565b6006600781111561059b5761059a613f8e565b5b81600001516000015160078111156105b6576105b5613f8e565b5b146105f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ed906139b1565b60405180910390fd5b6000816000015160200151905060008190506000602083901c90506000604084901c90506000606085901c14610661576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065890613951565b60405180910390fd5b828a610100019063ffffffff16908163ffffffff1681525050818a60e0019063ffffffff16908163ffffffff1681525050808a60c0019063ffffffff16908163ffffffff168152505050505050505b5050505050565b6106cd85602001516106c887611538565b6115a8565b60006106dc86608001516115ba565b90506106f886602001516106f38360400151611631565b6115a8565b610712866020015161070d8360600151611631565b6115a8565b60008460200135905084602001358163ffffffff1614610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075e906138f1565b60405180910390fd5b808760e0019063ffffffff16908163ffffffff1681525050600087610100019063ffffffff16908163ffffffff168152505050505050505050565b6107b885602001516107b387611538565b6115a8565b6107d285602001516107cd8760c00151611631565b6115a8565b6107ec85602001516107e78660800151611631565b6115a8565b600083602001359050600060208560200135901c9050600060408660200135901c1461084d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084490613a91565b60405180910390fd5b808760c0019063ffffffff16908163ffffffff1681525050818760e0019063ffffffff16908163ffffffff1681525050600087610100019063ffffffff16908163ffffffff168152505050505050505050565b6108b685602001516108b187611538565b6115a8565b6108d085602001516108cb8760c00151611631565b6115a8565b6108ea85602001516108e58660800151611631565b6115a8565b60006108f986608001516115ba565b90506000816060015163ffffffff1614156109455760028660000190600381111561092757610926613f8e565b5b9081600381111561093b5761093a613f8e565b5b81525050506109fa565b60008460200135905084602001358163ffffffff161461099a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099190613ab1565b60405180910390fd5b81604001518760c0019063ffffffff16908163ffffffff16815250508082606001516109c69190613d32565b8760e0019063ffffffff16908163ffffffff1681525050600087610100019063ffffffff16908163ffffffff168152505050505b5050505050565b600080610a19610a148860200151611448565b61166e565b9050600080600080806000610a2c612494565b610a378b8b87611733565b8096508195505050610a4a8b8b876117a7565b8096508197505050610a5d8b8b876117d1565b8096508194505050610a708b8b87611733565b8096508193505050610a838b8b876117a7565b8096508198505050610a968b8b8761180f565b809650819250505060008487604051602001610ab39291906137e4565b6040516020818303038152906040528051906020012090508c6020013560001b8114610b14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0b906139f1565b60405180910390fd5b610b2b828667ffffffffffffffff1686868c6118f2565b90508d604001518114610b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6a90613a51565b60405180910390fd5b8267ffffffffffffffff168963ffffffff1610610bca5760028f600001906003811115610ba357610ba2613f8e565b5b90816003811115610bb757610bb6613f8e565b5b8152505050505050505050505050610e84565b50505050506000610bd96124a7565b610be1612494565b610bec8a8a866117a7565b8095508194505050610bff8a8a8661196f565b8095508193505050610c128a8a8661180f565b80955081925050506000610c2e828963ffffffff168686611a6d565b9050868114610c72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6990613991565b60405180910390fd5b858414610cb85760028e600001906003811115610c9257610c91613f8e565b5b90816003811115610ca657610ca5613f8e565b5b81525050505050505050505050610e84565b60046007811115610ccc57610ccb613f8e565b5b83600001516007811115610ce357610ce2613f8e565b5b1415610d285760028e600001906003811115610d0257610d01613f8e565b5b90816003811115610d1657610d15613f8e565b5b81525050505050505050505050610e84565b60056007811115610d3c57610d3b613f8e565b5b83600001516007811115610d5357610d52613f8e565b5b1415610db1578260200151985082602001518963ffffffff1614610dac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da3906138d1565b60405180910390fd5b610dec565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de390613a71565b60405180910390fd5b5050505050505050610e0a8660200151610e0588611538565b6115a8565b6000610e1987608001516115ba565b9050610e358760200151610e308360400151611631565b6115a8565b610e4f8760200151610e4a8360600151611631565b6115a8565b818760e0019063ffffffff16908163ffffffff1681525050600087610100019063ffffffff16908163ffffffff168152505050505b5050505050565b610e988560600151611432565b505050505050565b6000610eaf8660200151611aef565b90506000816020015114610ecc57610eca8660600151611432565b505b505050505050565b6000610ee38660200151611448565b90506000816020015114610f615760008460200135905084602001358163ffffffff1614610f46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3d906138f1565b60405180910390fd5b8087610100019063ffffffff16908163ffffffff1681525050505b505050505050565b6000610f7886608001516115ba565b90506000610f90826020015186602001358686611b2a565b9050610fa08760200151826115a8565b50505050505050565b6000610fb88660200151611448565b90506000610fc987608001516115ba565b9050610fe081602001518660200135848787611bca565b81602001818152505050505050505050565b6000611008856000015185602001358585611b2a565b90506110188660200151826115a8565b505050505050565b600061102f8660200151611448565b905061104685600001518560200135838686611bca565b856000018181525050505050505050565b60006110668660200151611448565b905060006110778760200151611448565b905060006110888860200151611448565b905060006040518060800160405280838152602001886020013560001b81526020016110b38561166e565b63ffffffff1681526020016110c78661166e565b63ffffffff1681525090506110e0896080015182611c6f565b505050505050505050565b6110f88560200151611448565b505050505050565b60006111176111128760200151611448565b61166e565b905060006111288760200151611448565b905060006111398860200151611448565b905060008363ffffffff161461115c576111578860200151826115a8565b61116b565b61116a8860200151836115a8565b5b5050505050505050565b600083600001602081019061118a9190612ee4565b90506000604161ffff168261ffff1614156111a85760009050611250565b604261ffff168261ffff1614156111c2576001905061124f565b604361ffff168261ffff1614156111dc576002905061124e565b604461ffff168261ffff1614156111f6576003905061124d565b61800461ffff168261ffff161415611211576007905061124c565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124390613911565b60405180910390fd5b5b5b5b5b6112928760200151604051806040016040528084600781111561127657611275613f8e565b5b8152602001886020013567ffffffffffffffff168152506115a8565b50505050505050565b6112a36124a7565b61800561ffff168460000160208101906112bd9190612ee4565b61ffff1614156112e9576112d48660200151611448565b90506112e48660400151826115a8565b61136b565b61800661ffff168460000160208101906113039190612ee4565b61ffff16141561132f5761131a8660400151611448565b905061132a8660200151826115a8565b61136a565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611361906139d1565b60405180910390fd5b5b505050505050565b60006113828660200151611448565b9050600060078081111561139957611398613f8e565b5b826000015160078111156113b0576113af613f8e565b5b14156113bb57600190505b6113f087602001516040518060400160405280600060078111156113e2576113e1613f8e565b5b8152602001848152506115a8565b50505050505050565b60006114088660200151611aef565b90506114188660200151826115a8565b505050505050565b61142e826000015182611d6b565b5050565b60006114418260000151611e7a565b9050919050565b6114506124a7565b61145d8260000151611f87565b9050919050565b61146c6124d3565b6001826000015151146114b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ab90613971565b60405180910390fd5b81600001516000815181106114cc576114cb613fbd565b5b60200260200101519050600067ffffffffffffffff8111156114f1576114f0613fec565b5b60405190808252806020026020018201604052801561152a57816020015b6115176124d3565b81526020019060019003908161150f5790505b508260000181905250919050565b6115406124a7565b600082610100015163ffffffff168117905060208360e0015163ffffffff16901b8117905060408360c0015163ffffffff16901b8117905060405180604001604052806006600781111561159757611596613f8e565b5b815260200182815250915050919050565b6115b6826000015182612096565b5050565b6115c26124d3565b60018260000151511461160a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160190613971565b60405180910390fd5b816000015160008151811061162257611621613fbd565b5b60200260200101519050919050565b6116396124a7565b60405180604001604052806000600781111561165857611657613f8e565b5b81526020018363ffffffff168152509050919050565b600080826020015190506000600781111561168c5761168b613f8e565b5b836000015160078111156116a3576116a2613f8e565b5b146116e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116da90613b11565b60405180910390fd5b640100000000811061172a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172190613a11565b60405180910390fd5b80915050919050565b60008082905060005b600881101561179e5760088367ffffffffffffffff16901b925085858381811061176957611768613fbd565b5b9050013560f81c60f81b60f81c60ff1683179250818061178890613eb4565b925050808061179690613eb4565b91505061173c565b50935093915050565b60008082905060006117ba868684612192565b80935081925050508060001b925050935093915050565b6000808290508484828181106117ea576117e9613fbd565b5b9050013560f81c60f81b60f81c9150808061180490613eb4565b915050935093915050565b611817612494565b600082905060006118298686846117d1565b809350819250505060008160ff1667ffffffffffffffff8111156118505761184f613fec565b5b60405190808252806020026020018201604052801561187e5781602001602082028036833780820191505090505b50905060005b8260ff168160ff1610156118d65761189d8888866117a7565b838360ff16815181106118b3576118b2613fbd565b5b6020026020010181965082815250505080806118ce90613efd565b915050611884565b5060405180602001604052808281525093505050935093915050565b60008084848460405160200161190a93929190613852565b6040516020818303038152906040528051906020012090506119638787836040518060400160405280601281526020017f5461626c65206d65726b6c6520747265653a00000000000000000000000000008152506121fc565b91505095945050505050565b6119776124a7565b6000829050600085858381811061199157611990613fbd565b5b9050013560f81c60f81b60f81c905081806119ab90613eb4565b9250506119b66122dc565b60078111156119c8576119c7613f8e565b5b60ff168160ff161115611a10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0790613af1565b60405180910390fd5b6000611a1d878785612192565b809450819250505060405180604001604052808360ff166007811115611a4657611a45613f8e565b5b6007811115611a5857611a57613f8e565b5b81526020018281525093505050935093915050565b60008083611a7a846122e5565b604051602001611a8b92919061389a565b604051602081830303815290604052805190602001209050611ae48686836040518060400160405280601a81526020017f5461626c6520656c656d656e74206d65726b6c6520747265653a0000000000008152506121fc565b915050949350505050565b611af76124a7565b6000611b06836000015161231f565b9050611b228360000151600183611b1d9190613d6c565b61232e565b915050919050565b611b326124a7565b6000611b3c6124a7565b611b44612494565b611b4f86868561196f565b8094508193505050611b6286868561180f565b80945081925050506000611b7782898561235d565b9050888114611bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb290613ad1565b60405180910390fd5b82945050505050949350505050565b6000611bd46124a7565b6000611bde612494565b611be986868461196f565b8093508194505050611bfc86868461180f565b80935081925050506000611c11828a8661235d565b9050898114611c55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4c90613ad1565b60405180910390fd5b611c60828a8a61235d565b94505050505095945050505050565b60006001836000015151611c839190613cdc565b67ffffffffffffffff811115611c9c57611c9b613fec565b5b604051908082528060200260200182016040528015611cd557816020015b611cc26124d3565b815260200190600190039081611cba5790505b50905060005b836000015151811015611d385783600001518181518110611cff57611cfe613fbd565b5b6020026020010151828281518110611d1a57611d19613fbd565b5b60200260200101819052508080611d3090613eb4565b915050611cdb565b50818184600001515181518110611d5257611d51613fbd565b5b6020026020010181905250808360000181905250505050565b60006001836000015151611d7f9190613cdc565b67ffffffffffffffff811115611d9857611d97613fec565b5b604051908082528060200260200182016040528015611dc65781602001602082028036833780820191505090505b50905060005b836000015151811015611e385783600001518181518110611df057611def613fbd565b5b6020026020010151828281518110611e0b57611e0a613fbd565b5b602002602001019063ffffffff16908163ffffffff16815250508080611e3090613eb4565b915050611dcc565b50818184600001515181518110611e5257611e51613fbd565b5b602002602001019063ffffffff16908163ffffffff1681525050808360000181905250505050565b600081600001516001836000015151611e939190613d6c565b81518110611ea457611ea3613fbd565b5b6020026020010151905060006001836000015151611ec29190613d6c565b67ffffffffffffffff811115611edb57611eda613fec565b5b604051908082528060200260200182016040528015611f095781602001602082028036833780820191505090505b50905060005b8151811015611f775783600001518181518110611f2f57611f2e613fbd565b5b6020026020010151828281518110611f4a57611f49613fbd565b5b602002602001019063ffffffff16908163ffffffff16815250508080611f6f90613eb4565b915050611f0f565b5080836000018190525050919050565b611f8f6124a7565b81600001516001836000015151611fa69190613d6c565b81518110611fb757611fb6613fbd565b5b6020026020010151905060006001836000015151611fd59190613d6c565b67ffffffffffffffff811115611fee57611fed613fec565b5b60405190808252806020026020018201604052801561202757816020015b6120146124a7565b81526020019060019003908161200c5790505b50905060005b8151811015612086578360000151818151811061204d5761204c613fbd565b5b602002602001015182828151811061206857612067613fbd565b5b6020026020010181905250808061207e90613eb4565b91505061202d565b5080836000018190525050919050565b600060018360000151516120aa9190613cdc565b67ffffffffffffffff8111156120c3576120c2613fec565b5b6040519080825280602002602001820160405280156120fc57816020015b6120e96124a7565b8152602001906001900390816120e15790505b50905060005b83600001515181101561215f578360000151818151811061212657612125613fbd565b5b602002602001015182828151811061214157612140613fbd565b5b6020026020010181905250808061215790613eb4565b915050612102565b5081818460000151518151811061217957612178613fbd565b5b6020026020010181905250808360000181905250505050565b60008082905060005b60208110156121f357600883901b92508585838181106121be576121bd613fbd565b5b9050013560f81c60f81b60f81c60ff168317925081806121dd90613eb4565b92505080806121eb90613eb4565b91505061219b565b50935093915050565b600082905060005b8560000151518110156122d357600060018616141561226d5782828760000151838151811061223657612235613fbd565b5b6020026020010151604051602001612250939291906137ab565b6040516020818303038152906040528051906020012091506122b9565b828660000151828151811061228557612284613fbd565b5b6020026020010151836040516020016122a0939291906137ab565b6040516020818303038152906040528051906020012091505b600185901c945080806122cb90613eb4565b915050612204565b50949350505050565b60006007905090565b60008160000151826020015160405160200161230292919061381b565b604051602081830303815290604052805190602001209050919050565b60008160000151519050919050565b6123366124a7565b8260000151828151811061234d5761234c613fbd565b5b6020026020010151905092915050565b60006123a8848461236d856122e5565b6040518060400160405280601281526020017f56616c7565206d65726b6c6520747265653a00000000000000000000000000008152506121fc565b90509392505050565b604051806101400160405280600060038111156123d1576123d0613f8e565b5b81526020016123de612510565b81526020016123eb612510565b81526020016123f8612533565b8152602001612405612556565b815260200160008019168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600080191681525090565b6040518060a0016040528060008019168152602001612463612573565b81526020016000801916815260200160008019168152602001600063ffffffff1681525090565b61249261401b565b565b6040518060200160405280606081525090565b6040518060400160405280600060078111156124c6576124c5613f8e565b5b8152602001600081525090565b60405180608001604052806124e66124a7565b815260200160008019168152602001600063ffffffff168152602001600063ffffffff1681525090565b604051806040016040528061252361259a565b8152602001600080191681525090565b60405180604001604052806125466125ad565b8152602001600080191681525090565b604051806040016040528060608152602001600080191681525090565b6040518060400160405280600067ffffffffffffffff168152602001600080191681525090565b6040518060200160405280606081525090565b6040518060200160405280606081525090565b60006125d36125ce84613b86565b613b61565b905080838252602082019050828560a08602820111156125f6576125f5614063565b5b60005b85811015612626578161260c8882612c1e565b845260208401935060a083019250506001810190506125f9565b5050509392505050565b600061264361263e84613bb2565b613b61565b9050808382526020820190508285604086028201111561266657612665614063565b5b60005b85811015612696578161267c8882612d5a565b845260208401935060408301925050600181019050612669565b5050509392505050565b60006126b36126ae84613bde565b613b61565b905080838252602082019050828560208602820111156126d6576126d5614063565b5b60005b8581101561270657816126ec8882612dd4565b8452602084019350602083019250506001810190506126d9565b5050509392505050565b600082601f8301126127255761272461404f565b5b81356127358482602086016125c0565b91505092915050565b600082601f8301126127535761275261404f565b5b8135612763848260208601612630565b91505092915050565b600082601f8301126127815761278061404f565b5b81356127918482602086016126a0565b91505092915050565b6000813590506127a981614474565b92915050565b60008083601f8401126127c5576127c461404f565b5b8235905067ffffffffffffffff8111156127e2576127e161404a565b5b6020830191508360018202830111156127fe576127fd614063565b5b9250929050565b6000813590506128148161448b565b92915050565b6000813590506128298161449b565b92915050565b60006020828403121561284557612844614054565b5b81905092915050565b60006040828403121561286457612863614054565b5b81905092915050565b6000610140828403121561288457612883614054565b5b81905092915050565b600061014082840312156128a4576128a3614059565b5b6128af610140613b61565b905060006128bf84828501612805565b600083015250602082013567ffffffffffffffff8111156128e3576128e261405e565b5b6128ef84828501612cee565b602083015250604082013567ffffffffffffffff8111156129135761291261405e565b5b61291f84828501612cee565b604083015250606082013567ffffffffffffffff8111156129435761294261405e565b5b61294f84828501612b46565b606083015250608082013567ffffffffffffffff8111156129735761297261405e565b5b61297f84828501612bb2565b60808301525060a06129938482850161279a565b60a08301525060c06129a784828501612dd4565b60c08301525060e06129bb84828501612dd4565b60e0830152506101006129d084828501612dd4565b610100830152506101206129e68482850161279a565b6101208301525092915050565b600060408284031215612a0957612a08614059565b5b612a136040613b61565b90506000612a2384828501612de9565b6000830152506020612a378482850161279a565b60208301525092915050565b600060c08284031215612a5957612a58614054565b5b81905092915050565b600060c08284031215612a7857612a77614059565b5b612a8260a0613b61565b90506000612a928482850161279a565b6000830152506020612aa6848285016129f3565b6020830152506060612aba8482850161279a565b6040830152506080612ace8482850161279a565b60608301525060a0612ae284828501612dd4565b60808301525092915050565b600060208284031215612b0457612b03614059565b5b612b0e6020613b61565b9050600082013567ffffffffffffffff811115612b2e57612b2d61405e565b5b612b3a8482850161276c565b60008301525092915050565b600060408284031215612b5c57612b5b614059565b5b612b666040613b61565b9050600082013567ffffffffffffffff811115612b8657612b8561405e565b5b612b9284828501612aee565b6000830152506020612ba68482850161279a565b60208301525092915050565b600060408284031215612bc857612bc7614059565b5b612bd26040613b61565b9050600082013567ffffffffffffffff811115612bf257612bf161405e565b5b612bfe84828501612710565b6000830152506020612c128482850161279a565b60208301525092915050565b600060a08284031215612c3457612c33614059565b5b612c3e6080613b61565b90506000612c4e84828501612d5a565b6000830152506040612c628482850161279a565b6020830152506060612c7684828501612dd4565b6040830152506080612c8a84828501612dd4565b60608301525092915050565b600060208284031215612cac57612cab614059565b5b612cb66020613b61565b9050600082013567ffffffffffffffff811115612cd657612cd561405e565b5b612ce28482850161273e565b60008301525092915050565b600060408284031215612d0457612d03614059565b5b612d0e6040613b61565b9050600082013567ffffffffffffffff811115612d2e57612d2d61405e565b5b612d3a84828501612c96565b6000830152506020612d4e8482850161279a565b60208301525092915050565b600060408284031215612d7057612d6f614059565b5b612d7a6040613b61565b90506000612d8a8482850161281a565b6000830152506020612d9e84828501612dbf565b60208301525092915050565b600081359050612db9816144ab565b92915050565b600081359050612dce816144c2565b92915050565b600081359050612de3816144d9565b92915050565b600081359050612df8816144f0565b92915050565b6000806000806000806101608789031215612e1c57612e1b61406d565b5b6000612e2a89828a0161282f565b965050602087013567ffffffffffffffff811115612e4b57612e4a614068565b5b612e5789828a0161286d565b9550506040612e6889828a01612a43565b945050610100612e7a89828a0161284e565b93505061014087013567ffffffffffffffff811115612e9c57612e9b614068565b5b612ea889828a016127af565b92509250509295509295509295565b600060c08284031215612ecd57612ecc61406d565b5b6000612edb84828501612a62565b91505092915050565b600060208284031215612efa57612ef961406d565b5b6000612f0884828501612daa565b91505092915050565b6000612f1d838361364e565b60a08301905092915050565b6000612f35838361370a565b60408301905092915050565b6000612f4d838361375f565b60208301905092915050565b6000612f6482613c3a565b612f6e8185613c8d565b9350612f7983613c0a565b8060005b83811015612faa578151612f918882612f11565b9750612f9c83613c66565b925050600181019050612f7d565b5085935050505092915050565b6000612fc282613c45565b612fcc8185613c9e565b9350612fd783613c1a565b8060005b83811015613008578151612fef8882612f29565b9750612ffa83613c73565b925050600181019050612fdb565b5085935050505092915050565b600061302082613c50565b61302a8185613caf565b935061303583613c2a565b8060005b8381101561306657815161304d8882612f41565b975061305883613c80565b925050600181019050613039565b5085935050505092915050565b61307c81613da0565b82525050565b61309361308e82613da0565b613f27565b82525050565b6130a281613e19565b82525050565b6130b181613e2b565b82525050565b6130c86130c382613e2b565b613f4d565b82525050565b60006130d982613c5b565b6130e38185613cd1565b93506130f3818560208601613e50565b80840191505092915050565b600061310c601583613cc0565b91506131178261409d565b602082019050919050565b600061312f600d83613cc0565b915061313a826140c6565b602082019050919050565b6000613152601983613cc0565b915061315d826140ef565b602082019050919050565b6000613175600e83613cc0565b915061318082614118565b602082019050919050565b6000613198601683613cc0565b91506131a382614141565b602082019050919050565b60006131bb601183613cc0565b91506131c68261416a565b602082019050919050565b60006131de601183613cc0565b91506131e982614193565b602082019050919050565b6000613201601683613cc0565b915061320c826141bc565b602082019050919050565b6000613224601c83613cc0565b915061322f826141e5565b602082019050919050565b6000613247600e83613cd1565b91506132528261420e565b600e82019050919050565b600061326a600683613cd1565b915061327582614237565b600682019050919050565b600061328d601683613cc0565b915061329882614260565b602082019050919050565b60006132b0600783613cc0565b91506132bb82614289565b602082019050919050565b60006132d3600c83613cc0565b91506132de826142b2565b602082019050919050565b60006132f6600f83613cc0565b9150613301826142db565b602082019050919050565b6000613319600d83613cc0565b915061332482614304565b602082019050919050565b600061333c601a83613cc0565b91506133478261432d565b602082019050919050565b600061335f600683613cd1565b915061336a82614356565b600682019050919050565b6000613382601d83613cc0565b915061338d8261437f565b602082019050919050565b60006133a5601183613cc0565b91506133b0826143a8565b602082019050919050565b60006133c8600e83613cc0565b91506133d3826143d1565b602082019050919050565b60006133eb600783613cc0565b91506133f6826143fa565b602082019050919050565b600061340e600e83613cd1565b915061341982614423565b600e82019050919050565b60006101408301600083015161343d6000860182613099565b506020830151848203602086015261345582826136cd565b9150506040830151848203604086015261346f82826136cd565b9150506060830151848203606086015261348982826135d4565b915050608083015184820360808601526134a38282613611565b91505060a08301516134b860a0860182613073565b5060c08301516134cb60c086018261375f565b5060e08301516134de60e086018261375f565b506101008301516134f361010086018261375f565b50610120830151613508610120860182613073565b508091505092915050565b604082016000820151613529600085018261376e565b50602082015161353c6020850182613073565b50505050565b60c0820160008201516135586000850182613073565b50602082015161356b6020850182613513565b50604082015161357e6060850182613073565b5060608201516135916080850182613073565b5060808201516135a460a085018261375f565b50505050565b600060208301600083015184820360008601526135c78282613015565b9150508091505092915050565b600060408301600083015184820360008601526135f182826135aa565b91505060208301516136066020860182613073565b508091505092915050565b6000604083016000830151848203600086015261362e8282612f59565b91505060208301516136436020860182613073565b508091505092915050565b60a082016000820151613664600085018261370a565b5060208201516136776040850182613073565b50604082015161368a606085018261375f565b50606082015161369d608085018261375f565b50505050565b600060208301600083015184820360008601526136c08282612fb7565b9150508091505092915050565b600060408301600083015184820360008601526136ea82826136a3565b91505060208301516136ff6020860182613073565b508091505092915050565b60408201600082015161372060008501826130a8565b5060208201516137336020850182613739565b50505050565b61374281613dde565b82525050565b61375961375482613dde565b613f31565b82525050565b61376881613de8565b82525050565b61377781613df8565b82525050565b61378e61378982613df8565b613f3b565b82525050565b6137a56137a082613e0c565b613f4d565b82525050565b60006137b782866130ce565b91506137c38285613082565b6020820191506137d38284613082565b602082019150819050949350505050565b60006137ef8261323a565b91506137fb828561377d565b60088201915061380b8284613082565b6020820191508190509392505050565b60006138268261325d565b915061383282856130b7565b6001820191506138428284613748565b6020820191508190509392505050565b600061385d82613352565b91506138698286613794565b600182019150613879828561377d565b6008820191506138898284613082565b602082019150819050949350505050565b60006138a582613401565b91506138b18285613082565b6020820191506138c18284613082565b6020820191508190509392505050565b600060208201905081810360008301526138ea816130ff565b9050919050565b6000602082019050818103600083015261390a81613122565b9050919050565b6000602082019050818103600083015261392a81613145565b9050919050565b6000602082019050818103600083015261394a81613168565b9050919050565b6000602082019050818103600083015261396a8161318b565b9050919050565b6000602082019050818103600083015261398a816131ae565b9050919050565b600060208201905081810360008301526139aa816131d1565b9050919050565b600060208201905081810360008301526139ca816131f4565b9050919050565b600060208201905081810360008301526139ea81613217565b9050919050565b60006020820190508181036000830152613a0a81613280565b9050919050565b60006020820190508181036000830152613a2a816132a3565b9050919050565b60006020820190508181036000830152613a4a816132c6565b9050919050565b60006020820190508181036000830152613a6a816132e9565b9050919050565b60006020820190508181036000830152613a8a8161330c565b9050919050565b60006020820190508181036000830152613aaa8161332f565b9050919050565b60006020820190508181036000830152613aca81613375565b9050919050565b60006020820190508181036000830152613aea81613398565b9050919050565b60006020820190508181036000830152613b0a816133bb565b9050919050565b60006020820190508181036000830152613b2a816133de565b9050919050565b600060e0820190508181036000830152613b4b8185613424565b9050613b5a6020830184613542565b9392505050565b6000613b6b613b7c565b9050613b778282613e83565b919050565b6000604051905090565b600067ffffffffffffffff821115613ba157613ba0613fec565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613bcd57613bcc613fec565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613bf957613bf8613fec565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613ce782613dde565b9150613cf283613dde565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613d2757613d26613f5f565b5b828201905092915050565b6000613d3d82613de8565b9150613d4883613de8565b92508263ffffffff03821115613d6157613d60613f5f565b5b828201905092915050565b6000613d7782613dde565b9150613d8283613dde565b925082821015613d9557613d94613f5f565b5b828203905092915050565b6000819050919050565b6000819050613db88261444c565b919050565b6000819050613dcb82614460565b919050565b600061ffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b6000613e2482613daa565b9050919050565b6000613e3682613dbd565b9050919050565b6000613e49368361288d565b9050919050565b60005b83811015613e6e578082015181840152602081019050613e53565b83811115613e7d576000848401525b50505050565b613e8c82614072565b810181811067ffffffffffffffff82111715613eab57613eaa613fec565b5b80604052505050565b6000613ebf82613dde565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613ef257613ef1613f5f565b5b600182019050919050565b6000613f0882613e0c565b915060ff821415613f1c57613f1b613f5f565b5b600182019050919050565b6000819050919050565b6000819050919050565b6000613f4682614083565b9050919050565b6000613f5882614090565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160c01b9050919050565b60008160f81b9050919050565b7f4241445f46554e435f5245465f434f4e54454e54530000000000000000000000600082015250565b7f4241445f43414c4c5f4441544100000000000000000000000000000000000000600082015250565b7f434f4e53545f505553485f494e56414c49445f4f50434f444500000000000000600082015250565b7f494e56414c49445f4f50434f4445000000000000000000000000000000000000600082015250565b7f494e56414c49445f52455455524e5f50435f4441544100000000000000000000600082015250565b7f4241445f57494e444f575f4c454e475448000000000000000000000000000000600082015250565b7f4241445f454c454d454e54535f524f4f54000000000000000000000000000000600082015250565b7f494e56414c49445f52455455524e5f50435f5459504500000000000000000000600082015250565b7f4d4f56455f494e5445524e414c5f494e56414c49445f4f50434f444500000000600082015250565b7f43616c6c20696e6469726563743a000000000000000000000000000000000000600082015250565b7f56616c75653a0000000000000000000000000000000000000000000000000000600082015250565b7f4241445f43414c4c5f494e4449524543545f4441544100000000000000000000600082015250565b7f4241445f49333200000000000000000000000000000000000000000000000000600082015250565b7f4241445f424c4f434b5f50430000000000000000000000000000000000000000600082015250565b7f4241445f5441424c45535f524f4f540000000000000000000000000000000000600082015250565b7f4241445f454c454d5f5459504500000000000000000000000000000000000000600082015250565b7f4241445f43524f53535f4d4f44554c455f43414c4c5f44415441000000000000600082015250565b7f5461626c653a0000000000000000000000000000000000000000000000000000600082015250565b7f4241445f43414c4c45525f494e5445524e414c5f43414c4c5f44415441000000600082015250565b7f57524f4e475f4d45524b4c455f524f4f54000000000000000000000000000000600082015250565b7f4241445f56414c55455f54595045000000000000000000000000000000000000600082015250565b7f4e4f545f49333200000000000000000000000000000000000000000000000000600082015250565b7f5461626c6520656c656d656e743a000000000000000000000000000000000000600082015250565b6004811061445d5761445c613f8e565b5b50565b6008811061447157614470613f8e565b5b50565b61447d81613da0565b811461448857600080fd5b50565b6004811061449857600080fd5b50565b600881106144a857600080fd5b50565b6144b481613dd0565b81146144bf57600080fd5b50565b6144cb81613dde565b81146144d657600080fd5b50565b6144e281613de8565b81146144ed57600080fd5b50565b6144f981613df8565b811461450457600080fd5b5056fea26469706673582212203568b7cafcd1ab113e2cd8237c65a1aa8178fdbc25d62ba232a2b701890aca7364736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c4017b3814610030575b600080fd5b61004a60048036038101906100459190612dfe565b610061565b604051610058929190613b31565b60405180910390f35b6100696123b1565b610071612446565b8661007b90613e3d565b91508580360381019061008e9190612eb7565b905060008560000160208101906100a59190612ee4565b905061248a600061ffff168261ffff1614156100c5576103e990506103cb565b600161ffff168261ffff1614156100e05761042190506103ca565b600261ffff168261ffff1614156100fb5761042890506103c9565b600c61ffff168261ffff1614156101165761049390506103c8565b600d61ffff168261ffff161415610131576104bf90506103c7565b600f61ffff168261ffff16141561014c5761050a90506103c6565b601061ffff168261ffff161415610167576106b790506103c5565b61800961ffff168261ffff161415610183576107a290506103c4565b61800a61ffff168261ffff16141561019f576108a090506103c3565b601161ffff168261ffff1614156101ba57610a0190506103c2565b61800061ffff168261ffff1614156101d657610e8b90506103c1565b61800161ffff168261ffff1614156101f257610ea090506103c0565b61800361ffff168261ffff16141561020e57610ed490506103bf565b602061ffff168261ffff16141561022957610f6990506103be565b602161ffff168261ffff16141561024457610fa990506103bd565b602361ffff168261ffff16141561025f57610ff290506103bc565b602461ffff168261ffff16141561027a5761102090506103bb565b61800261ffff168261ffff1614156102965761105790506103ba565b601a61ffff168261ffff1614156102b1576110eb90506103b9565b601b61ffff168261ffff1614156102cc5761110090506103b8565b604161ffff168261ffff16101580156102ee5750604461ffff168261ffff1611155b80610302575061800461ffff168261ffff16145b156103115761117590506103b7565b61800561ffff168261ffff161480610332575061800661ffff168261ffff16145b156103415761129b90506103b6565b61800761ffff168261ffff16141561035d5761137390506103b5565b61800861ffff168261ffff161415610379576113f990506103b4565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ab90613931565b60405180910390fd5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b6103dc84848989898663ffffffff16565b5050965096945050505050565b60028560000190600381111561040257610401613f8e565b5b9081600381111561041657610415613f8e565b5b815250505050505050565b5050505050565b60008360200135905083602001358163ffffffff161461047d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047490613a31565b60405180910390fd5b61048b866060015182611420565b505050505050565b6104a08560600151611432565b85610100019063ffffffff16908163ffffffff16815250505050505050565b60006104ce8660200151611448565b90506000816020015114610502576104e98660600151611432565b86610100019063ffffffff16908163ffffffff16815250505b505050505050565b60006105198660800151611464565b90506004600781111561052f5761052e613f8e565b5b816000015160000151600781111561054a57610549613f8e565b5b14156105875760028660000190600381111561056957610568613f8e565b5b9081600381111561057d5761057c613f8e565b5b81525050506106b0565b6006600781111561059b5761059a613f8e565b5b81600001516000015160078111156105b6576105b5613f8e565b5b146105f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ed906139b1565b60405180910390fd5b6000816000015160200151905060008190506000602083901c90506000604084901c90506000606085901c14610661576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065890613951565b60405180910390fd5b828a610100019063ffffffff16908163ffffffff1681525050818a60e0019063ffffffff16908163ffffffff1681525050808a60c0019063ffffffff16908163ffffffff168152505050505050505b5050505050565b6106cd85602001516106c887611538565b6115a8565b60006106dc86608001516115ba565b90506106f886602001516106f38360400151611631565b6115a8565b610712866020015161070d8360600151611631565b6115a8565b60008460200135905084602001358163ffffffff1614610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075e906138f1565b60405180910390fd5b808760e0019063ffffffff16908163ffffffff1681525050600087610100019063ffffffff16908163ffffffff168152505050505050505050565b6107b885602001516107b387611538565b6115a8565b6107d285602001516107cd8760c00151611631565b6115a8565b6107ec85602001516107e78660800151611631565b6115a8565b600083602001359050600060208560200135901c9050600060408660200135901c1461084d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084490613a91565b60405180910390fd5b808760c0019063ffffffff16908163ffffffff1681525050818760e0019063ffffffff16908163ffffffff1681525050600087610100019063ffffffff16908163ffffffff168152505050505050505050565b6108b685602001516108b187611538565b6115a8565b6108d085602001516108cb8760c00151611631565b6115a8565b6108ea85602001516108e58660800151611631565b6115a8565b60006108f986608001516115ba565b90506000816060015163ffffffff1614156109455760028660000190600381111561092757610926613f8e565b5b9081600381111561093b5761093a613f8e565b5b81525050506109fa565b60008460200135905084602001358163ffffffff161461099a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099190613ab1565b60405180910390fd5b81604001518760c0019063ffffffff16908163ffffffff16815250508082606001516109c69190613d32565b8760e0019063ffffffff16908163ffffffff1681525050600087610100019063ffffffff16908163ffffffff168152505050505b5050505050565b600080610a19610a148860200151611448565b61166e565b9050600080600080806000610a2c612494565b610a378b8b87611733565b8096508195505050610a4a8b8b876117a7565b8096508197505050610a5d8b8b876117d1565b8096508194505050610a708b8b87611733565b8096508193505050610a838b8b876117a7565b8096508198505050610a968b8b8761180f565b809650819250505060008487604051602001610ab39291906137e4565b6040516020818303038152906040528051906020012090508c6020013560001b8114610b14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0b906139f1565b60405180910390fd5b610b2b828667ffffffffffffffff1686868c6118f2565b90508d604001518114610b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6a90613a51565b60405180910390fd5b8267ffffffffffffffff168963ffffffff1610610bca5760028f600001906003811115610ba357610ba2613f8e565b5b90816003811115610bb757610bb6613f8e565b5b8152505050505050505050505050610e84565b50505050506000610bd96124a7565b610be1612494565b610bec8a8a866117a7565b8095508194505050610bff8a8a8661196f565b8095508193505050610c128a8a8661180f565b80955081925050506000610c2e828963ffffffff168686611a6d565b9050868114610c72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6990613991565b60405180910390fd5b858414610cb85760028e600001906003811115610c9257610c91613f8e565b5b90816003811115610ca657610ca5613f8e565b5b81525050505050505050505050610e84565b60046007811115610ccc57610ccb613f8e565b5b83600001516007811115610ce357610ce2613f8e565b5b1415610d285760028e600001906003811115610d0257610d01613f8e565b5b90816003811115610d1657610d15613f8e565b5b81525050505050505050505050610e84565b60056007811115610d3c57610d3b613f8e565b5b83600001516007811115610d5357610d52613f8e565b5b1415610db1578260200151985082602001518963ffffffff1614610dac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da3906138d1565b60405180910390fd5b610dec565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de390613a71565b60405180910390fd5b5050505050505050610e0a8660200151610e0588611538565b6115a8565b6000610e1987608001516115ba565b9050610e358760200151610e308360400151611631565b6115a8565b610e4f8760200151610e4a8360600151611631565b6115a8565b818760e0019063ffffffff16908163ffffffff1681525050600087610100019063ffffffff16908163ffffffff168152505050505b5050505050565b610e988560600151611432565b505050505050565b6000610eaf8660200151611aef565b90506000816020015114610ecc57610eca8660600151611432565b505b505050505050565b6000610ee38660200151611448565b90506000816020015114610f615760008460200135905084602001358163ffffffff1614610f46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3d906138f1565b60405180910390fd5b8087610100019063ffffffff16908163ffffffff1681525050505b505050505050565b6000610f7886608001516115ba565b90506000610f90826020015186602001358686611b2a565b9050610fa08760200151826115a8565b50505050505050565b6000610fb88660200151611448565b90506000610fc987608001516115ba565b9050610fe081602001518660200135848787611bca565b81602001818152505050505050505050565b6000611008856000015185602001358585611b2a565b90506110188660200151826115a8565b505050505050565b600061102f8660200151611448565b905061104685600001518560200135838686611bca565b856000018181525050505050505050565b60006110668660200151611448565b905060006110778760200151611448565b905060006110888860200151611448565b905060006040518060800160405280838152602001886020013560001b81526020016110b38561166e565b63ffffffff1681526020016110c78661166e565b63ffffffff1681525090506110e0896080015182611c6f565b505050505050505050565b6110f88560200151611448565b505050505050565b60006111176111128760200151611448565b61166e565b905060006111288760200151611448565b905060006111398860200151611448565b905060008363ffffffff161461115c576111578860200151826115a8565b61116b565b61116a8860200151836115a8565b5b5050505050505050565b600083600001602081019061118a9190612ee4565b90506000604161ffff168261ffff1614156111a85760009050611250565b604261ffff168261ffff1614156111c2576001905061124f565b604361ffff168261ffff1614156111dc576002905061124e565b604461ffff168261ffff1614156111f6576003905061124d565b61800461ffff168261ffff161415611211576007905061124c565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124390613911565b60405180910390fd5b5b5b5b5b6112928760200151604051806040016040528084600781111561127657611275613f8e565b5b8152602001886020013567ffffffffffffffff168152506115a8565b50505050505050565b6112a36124a7565b61800561ffff168460000160208101906112bd9190612ee4565b61ffff1614156112e9576112d48660200151611448565b90506112e48660400151826115a8565b61136b565b61800661ffff168460000160208101906113039190612ee4565b61ffff16141561132f5761131a8660400151611448565b905061132a8660200151826115a8565b61136a565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611361906139d1565b60405180910390fd5b5b505050505050565b60006113828660200151611448565b9050600060078081111561139957611398613f8e565b5b826000015160078111156113b0576113af613f8e565b5b14156113bb57600190505b6113f087602001516040518060400160405280600060078111156113e2576113e1613f8e565b5b8152602001848152506115a8565b50505050505050565b60006114088660200151611aef565b90506114188660200151826115a8565b505050505050565b61142e826000015182611d6b565b5050565b60006114418260000151611e7a565b9050919050565b6114506124a7565b61145d8260000151611f87565b9050919050565b61146c6124d3565b6001826000015151146114b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ab90613971565b60405180910390fd5b81600001516000815181106114cc576114cb613fbd565b5b60200260200101519050600067ffffffffffffffff8111156114f1576114f0613fec565b5b60405190808252806020026020018201604052801561152a57816020015b6115176124d3565b81526020019060019003908161150f5790505b508260000181905250919050565b6115406124a7565b600082610100015163ffffffff168117905060208360e0015163ffffffff16901b8117905060408360c0015163ffffffff16901b8117905060405180604001604052806006600781111561159757611596613f8e565b5b815260200182815250915050919050565b6115b6826000015182612096565b5050565b6115c26124d3565b60018260000151511461160a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160190613971565b60405180910390fd5b816000015160008151811061162257611621613fbd565b5b60200260200101519050919050565b6116396124a7565b60405180604001604052806000600781111561165857611657613f8e565b5b81526020018363ffffffff168152509050919050565b600080826020015190506000600781111561168c5761168b613f8e565b5b836000015160078111156116a3576116a2613f8e565b5b146116e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116da90613b11565b60405180910390fd5b640100000000811061172a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172190613a11565b60405180910390fd5b80915050919050565b60008082905060005b600881101561179e5760088367ffffffffffffffff16901b925085858381811061176957611768613fbd565b5b9050013560f81c60f81b60f81c60ff1683179250818061178890613eb4565b925050808061179690613eb4565b91505061173c565b50935093915050565b60008082905060006117ba868684612192565b80935081925050508060001b925050935093915050565b6000808290508484828181106117ea576117e9613fbd565b5b9050013560f81c60f81b60f81c9150808061180490613eb4565b915050935093915050565b611817612494565b600082905060006118298686846117d1565b809350819250505060008160ff1667ffffffffffffffff8111156118505761184f613fec565b5b60405190808252806020026020018201604052801561187e5781602001602082028036833780820191505090505b50905060005b8260ff168160ff1610156118d65761189d8888866117a7565b838360ff16815181106118b3576118b2613fbd565b5b6020026020010181965082815250505080806118ce90613efd565b915050611884565b5060405180602001604052808281525093505050935093915050565b60008084848460405160200161190a93929190613852565b6040516020818303038152906040528051906020012090506119638787836040518060400160405280601281526020017f5461626c65206d65726b6c6520747265653a00000000000000000000000000008152506121fc565b91505095945050505050565b6119776124a7565b6000829050600085858381811061199157611990613fbd565b5b9050013560f81c60f81b60f81c905081806119ab90613eb4565b9250506119b66122dc565b60078111156119c8576119c7613f8e565b5b60ff168160ff161115611a10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0790613af1565b60405180910390fd5b6000611a1d878785612192565b809450819250505060405180604001604052808360ff166007811115611a4657611a45613f8e565b5b6007811115611a5857611a57613f8e565b5b81526020018281525093505050935093915050565b60008083611a7a846122e5565b604051602001611a8b92919061389a565b604051602081830303815290604052805190602001209050611ae48686836040518060400160405280601a81526020017f5461626c6520656c656d656e74206d65726b6c6520747265653a0000000000008152506121fc565b915050949350505050565b611af76124a7565b6000611b06836000015161231f565b9050611b228360000151600183611b1d9190613d6c565b61232e565b915050919050565b611b326124a7565b6000611b3c6124a7565b611b44612494565b611b4f86868561196f565b8094508193505050611b6286868561180f565b80945081925050506000611b7782898561235d565b9050888114611bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb290613ad1565b60405180910390fd5b82945050505050949350505050565b6000611bd46124a7565b6000611bde612494565b611be986868461196f565b8093508194505050611bfc86868461180f565b80935081925050506000611c11828a8661235d565b9050898114611c55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4c90613ad1565b60405180910390fd5b611c60828a8a61235d565b94505050505095945050505050565b60006001836000015151611c839190613cdc565b67ffffffffffffffff811115611c9c57611c9b613fec565b5b604051908082528060200260200182016040528015611cd557816020015b611cc26124d3565b815260200190600190039081611cba5790505b50905060005b836000015151811015611d385783600001518181518110611cff57611cfe613fbd565b5b6020026020010151828281518110611d1a57611d19613fbd565b5b60200260200101819052508080611d3090613eb4565b915050611cdb565b50818184600001515181518110611d5257611d51613fbd565b5b6020026020010181905250808360000181905250505050565b60006001836000015151611d7f9190613cdc565b67ffffffffffffffff811115611d9857611d97613fec565b5b604051908082528060200260200182016040528015611dc65781602001602082028036833780820191505090505b50905060005b836000015151811015611e385783600001518181518110611df057611def613fbd565b5b6020026020010151828281518110611e0b57611e0a613fbd565b5b602002602001019063ffffffff16908163ffffffff16815250508080611e3090613eb4565b915050611dcc565b50818184600001515181518110611e5257611e51613fbd565b5b602002602001019063ffffffff16908163ffffffff1681525050808360000181905250505050565b600081600001516001836000015151611e939190613d6c565b81518110611ea457611ea3613fbd565b5b6020026020010151905060006001836000015151611ec29190613d6c565b67ffffffffffffffff811115611edb57611eda613fec565b5b604051908082528060200260200182016040528015611f095781602001602082028036833780820191505090505b50905060005b8151811015611f775783600001518181518110611f2f57611f2e613fbd565b5b6020026020010151828281518110611f4a57611f49613fbd565b5b602002602001019063ffffffff16908163ffffffff16815250508080611f6f90613eb4565b915050611f0f565b5080836000018190525050919050565b611f8f6124a7565b81600001516001836000015151611fa69190613d6c565b81518110611fb757611fb6613fbd565b5b6020026020010151905060006001836000015151611fd59190613d6c565b67ffffffffffffffff811115611fee57611fed613fec565b5b60405190808252806020026020018201604052801561202757816020015b6120146124a7565b81526020019060019003908161200c5790505b50905060005b8151811015612086578360000151818151811061204d5761204c613fbd565b5b602002602001015182828151811061206857612067613fbd565b5b6020026020010181905250808061207e90613eb4565b91505061202d565b5080836000018190525050919050565b600060018360000151516120aa9190613cdc565b67ffffffffffffffff8111156120c3576120c2613fec565b5b6040519080825280602002602001820160405280156120fc57816020015b6120e96124a7565b8152602001906001900390816120e15790505b50905060005b83600001515181101561215f578360000151818151811061212657612125613fbd565b5b602002602001015182828151811061214157612140613fbd565b5b6020026020010181905250808061215790613eb4565b915050612102565b5081818460000151518151811061217957612178613fbd565b5b6020026020010181905250808360000181905250505050565b60008082905060005b60208110156121f357600883901b92508585838181106121be576121bd613fbd565b5b9050013560f81c60f81b60f81c60ff168317925081806121dd90613eb4565b92505080806121eb90613eb4565b91505061219b565b50935093915050565b600082905060005b8560000151518110156122d357600060018616141561226d5782828760000151838151811061223657612235613fbd565b5b6020026020010151604051602001612250939291906137ab565b6040516020818303038152906040528051906020012091506122b9565b828660000151828151811061228557612284613fbd565b5b6020026020010151836040516020016122a0939291906137ab565b6040516020818303038152906040528051906020012091505b600185901c945080806122cb90613eb4565b915050612204565b50949350505050565b60006007905090565b60008160000151826020015160405160200161230292919061381b565b604051602081830303815290604052805190602001209050919050565b60008160000151519050919050565b6123366124a7565b8260000151828151811061234d5761234c613fbd565b5b6020026020010151905092915050565b60006123a8848461236d856122e5565b6040518060400160405280601281526020017f56616c7565206d65726b6c6520747265653a00000000000000000000000000008152506121fc565b90509392505050565b604051806101400160405280600060038111156123d1576123d0613f8e565b5b81526020016123de612510565b81526020016123eb612510565b81526020016123f8612533565b8152602001612405612556565b815260200160008019168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600080191681525090565b6040518060a0016040528060008019168152602001612463612573565b81526020016000801916815260200160008019168152602001600063ffffffff1681525090565b61249261401b565b565b6040518060200160405280606081525090565b6040518060400160405280600060078111156124c6576124c5613f8e565b5b8152602001600081525090565b60405180608001604052806124e66124a7565b815260200160008019168152602001600063ffffffff168152602001600063ffffffff1681525090565b604051806040016040528061252361259a565b8152602001600080191681525090565b60405180604001604052806125466125ad565b8152602001600080191681525090565b604051806040016040528060608152602001600080191681525090565b6040518060400160405280600067ffffffffffffffff168152602001600080191681525090565b6040518060200160405280606081525090565b6040518060200160405280606081525090565b60006125d36125ce84613b86565b613b61565b905080838252602082019050828560a08602820111156125f6576125f5614063565b5b60005b85811015612626578161260c8882612c1e565b845260208401935060a083019250506001810190506125f9565b5050509392505050565b600061264361263e84613bb2565b613b61565b9050808382526020820190508285604086028201111561266657612665614063565b5b60005b85811015612696578161267c8882612d5a565b845260208401935060408301925050600181019050612669565b5050509392505050565b60006126b36126ae84613bde565b613b61565b905080838252602082019050828560208602820111156126d6576126d5614063565b5b60005b8581101561270657816126ec8882612dd4565b8452602084019350602083019250506001810190506126d9565b5050509392505050565b600082601f8301126127255761272461404f565b5b81356127358482602086016125c0565b91505092915050565b600082601f8301126127535761275261404f565b5b8135612763848260208601612630565b91505092915050565b600082601f8301126127815761278061404f565b5b81356127918482602086016126a0565b91505092915050565b6000813590506127a981614474565b92915050565b60008083601f8401126127c5576127c461404f565b5b8235905067ffffffffffffffff8111156127e2576127e161404a565b5b6020830191508360018202830111156127fe576127fd614063565b5b9250929050565b6000813590506128148161448b565b92915050565b6000813590506128298161449b565b92915050565b60006020828403121561284557612844614054565b5b81905092915050565b60006040828403121561286457612863614054565b5b81905092915050565b6000610140828403121561288457612883614054565b5b81905092915050565b600061014082840312156128a4576128a3614059565b5b6128af610140613b61565b905060006128bf84828501612805565b600083015250602082013567ffffffffffffffff8111156128e3576128e261405e565b5b6128ef84828501612cee565b602083015250604082013567ffffffffffffffff8111156129135761291261405e565b5b61291f84828501612cee565b604083015250606082013567ffffffffffffffff8111156129435761294261405e565b5b61294f84828501612b46565b606083015250608082013567ffffffffffffffff8111156129735761297261405e565b5b61297f84828501612bb2565b60808301525060a06129938482850161279a565b60a08301525060c06129a784828501612dd4565b60c08301525060e06129bb84828501612dd4565b60e0830152506101006129d084828501612dd4565b610100830152506101206129e68482850161279a565b6101208301525092915050565b600060408284031215612a0957612a08614059565b5b612a136040613b61565b90506000612a2384828501612de9565b6000830152506020612a378482850161279a565b60208301525092915050565b600060c08284031215612a5957612a58614054565b5b81905092915050565b600060c08284031215612a7857612a77614059565b5b612a8260a0613b61565b90506000612a928482850161279a565b6000830152506020612aa6848285016129f3565b6020830152506060612aba8482850161279a565b6040830152506080612ace8482850161279a565b60608301525060a0612ae284828501612dd4565b60808301525092915050565b600060208284031215612b0457612b03614059565b5b612b0e6020613b61565b9050600082013567ffffffffffffffff811115612b2e57612b2d61405e565b5b612b3a8482850161276c565b60008301525092915050565b600060408284031215612b5c57612b5b614059565b5b612b666040613b61565b9050600082013567ffffffffffffffff811115612b8657612b8561405e565b5b612b9284828501612aee565b6000830152506020612ba68482850161279a565b60208301525092915050565b600060408284031215612bc857612bc7614059565b5b612bd26040613b61565b9050600082013567ffffffffffffffff811115612bf257612bf161405e565b5b612bfe84828501612710565b6000830152506020612c128482850161279a565b60208301525092915050565b600060a08284031215612c3457612c33614059565b5b612c3e6080613b61565b90506000612c4e84828501612d5a565b6000830152506040612c628482850161279a565b6020830152506060612c7684828501612dd4565b6040830152506080612c8a84828501612dd4565b60608301525092915050565b600060208284031215612cac57612cab614059565b5b612cb66020613b61565b9050600082013567ffffffffffffffff811115612cd657612cd561405e565b5b612ce28482850161273e565b60008301525092915050565b600060408284031215612d0457612d03614059565b5b612d0e6040613b61565b9050600082013567ffffffffffffffff811115612d2e57612d2d61405e565b5b612d3a84828501612c96565b6000830152506020612d4e8482850161279a565b60208301525092915050565b600060408284031215612d7057612d6f614059565b5b612d7a6040613b61565b90506000612d8a8482850161281a565b6000830152506020612d9e84828501612dbf565b60208301525092915050565b600081359050612db9816144ab565b92915050565b600081359050612dce816144c2565b92915050565b600081359050612de3816144d9565b92915050565b600081359050612df8816144f0565b92915050565b6000806000806000806101608789031215612e1c57612e1b61406d565b5b6000612e2a89828a0161282f565b965050602087013567ffffffffffffffff811115612e4b57612e4a614068565b5b612e5789828a0161286d565b9550506040612e6889828a01612a43565b945050610100612e7a89828a0161284e565b93505061014087013567ffffffffffffffff811115612e9c57612e9b614068565b5b612ea889828a016127af565b92509250509295509295509295565b600060c08284031215612ecd57612ecc61406d565b5b6000612edb84828501612a62565b91505092915050565b600060208284031215612efa57612ef961406d565b5b6000612f0884828501612daa565b91505092915050565b6000612f1d838361364e565b60a08301905092915050565b6000612f35838361370a565b60408301905092915050565b6000612f4d838361375f565b60208301905092915050565b6000612f6482613c3a565b612f6e8185613c8d565b9350612f7983613c0a565b8060005b83811015612faa578151612f918882612f11565b9750612f9c83613c66565b925050600181019050612f7d565b5085935050505092915050565b6000612fc282613c45565b612fcc8185613c9e565b9350612fd783613c1a565b8060005b83811015613008578151612fef8882612f29565b9750612ffa83613c73565b925050600181019050612fdb565b5085935050505092915050565b600061302082613c50565b61302a8185613caf565b935061303583613c2a565b8060005b8381101561306657815161304d8882612f41565b975061305883613c80565b925050600181019050613039565b5085935050505092915050565b61307c81613da0565b82525050565b61309361308e82613da0565b613f27565b82525050565b6130a281613e19565b82525050565b6130b181613e2b565b82525050565b6130c86130c382613e2b565b613f4d565b82525050565b60006130d982613c5b565b6130e38185613cd1565b93506130f3818560208601613e50565b80840191505092915050565b600061310c601583613cc0565b91506131178261409d565b602082019050919050565b600061312f600d83613cc0565b915061313a826140c6565b602082019050919050565b6000613152601983613cc0565b915061315d826140ef565b602082019050919050565b6000613175600e83613cc0565b915061318082614118565b602082019050919050565b6000613198601683613cc0565b91506131a382614141565b602082019050919050565b60006131bb601183613cc0565b91506131c68261416a565b602082019050919050565b60006131de601183613cc0565b91506131e982614193565b602082019050919050565b6000613201601683613cc0565b915061320c826141bc565b602082019050919050565b6000613224601c83613cc0565b915061322f826141e5565b602082019050919050565b6000613247600e83613cd1565b91506132528261420e565b600e82019050919050565b600061326a600683613cd1565b915061327582614237565b600682019050919050565b600061328d601683613cc0565b915061329882614260565b602082019050919050565b60006132b0600783613cc0565b91506132bb82614289565b602082019050919050565b60006132d3600c83613cc0565b91506132de826142b2565b602082019050919050565b60006132f6600f83613cc0565b9150613301826142db565b602082019050919050565b6000613319600d83613cc0565b915061332482614304565b602082019050919050565b600061333c601a83613cc0565b91506133478261432d565b602082019050919050565b600061335f600683613cd1565b915061336a82614356565b600682019050919050565b6000613382601d83613cc0565b915061338d8261437f565b602082019050919050565b60006133a5601183613cc0565b91506133b0826143a8565b602082019050919050565b60006133c8600e83613cc0565b91506133d3826143d1565b602082019050919050565b60006133eb600783613cc0565b91506133f6826143fa565b602082019050919050565b600061340e600e83613cd1565b915061341982614423565b600e82019050919050565b60006101408301600083015161343d6000860182613099565b506020830151848203602086015261345582826136cd565b9150506040830151848203604086015261346f82826136cd565b9150506060830151848203606086015261348982826135d4565b915050608083015184820360808601526134a38282613611565b91505060a08301516134b860a0860182613073565b5060c08301516134cb60c086018261375f565b5060e08301516134de60e086018261375f565b506101008301516134f361010086018261375f565b50610120830151613508610120860182613073565b508091505092915050565b604082016000820151613529600085018261376e565b50602082015161353c6020850182613073565b50505050565b60c0820160008201516135586000850182613073565b50602082015161356b6020850182613513565b50604082015161357e6060850182613073565b5060608201516135916080850182613073565b5060808201516135a460a085018261375f565b50505050565b600060208301600083015184820360008601526135c78282613015565b9150508091505092915050565b600060408301600083015184820360008601526135f182826135aa565b91505060208301516136066020860182613073565b508091505092915050565b6000604083016000830151848203600086015261362e8282612f59565b91505060208301516136436020860182613073565b508091505092915050565b60a082016000820151613664600085018261370a565b5060208201516136776040850182613073565b50604082015161368a606085018261375f565b50606082015161369d608085018261375f565b50505050565b600060208301600083015184820360008601526136c08282612fb7565b9150508091505092915050565b600060408301600083015184820360008601526136ea82826136a3565b91505060208301516136ff6020860182613073565b508091505092915050565b60408201600082015161372060008501826130a8565b5060208201516137336020850182613739565b50505050565b61374281613dde565b82525050565b61375961375482613dde565b613f31565b82525050565b61376881613de8565b82525050565b61377781613df8565b82525050565b61378e61378982613df8565b613f3b565b82525050565b6137a56137a082613e0c565b613f4d565b82525050565b60006137b782866130ce565b91506137c38285613082565b6020820191506137d38284613082565b602082019150819050949350505050565b60006137ef8261323a565b91506137fb828561377d565b60088201915061380b8284613082565b6020820191508190509392505050565b60006138268261325d565b915061383282856130b7565b6001820191506138428284613748565b6020820191508190509392505050565b600061385d82613352565b91506138698286613794565b600182019150613879828561377d565b6008820191506138898284613082565b602082019150819050949350505050565b60006138a582613401565b91506138b18285613082565b6020820191506138c18284613082565b6020820191508190509392505050565b600060208201905081810360008301526138ea816130ff565b9050919050565b6000602082019050818103600083015261390a81613122565b9050919050565b6000602082019050818103600083015261392a81613145565b9050919050565b6000602082019050818103600083015261394a81613168565b9050919050565b6000602082019050818103600083015261396a8161318b565b9050919050565b6000602082019050818103600083015261398a816131ae565b9050919050565b600060208201905081810360008301526139aa816131d1565b9050919050565b600060208201905081810360008301526139ca816131f4565b9050919050565b600060208201905081810360008301526139ea81613217565b9050919050565b60006020820190508181036000830152613a0a81613280565b9050919050565b60006020820190508181036000830152613a2a816132a3565b9050919050565b60006020820190508181036000830152613a4a816132c6565b9050919050565b60006020820190508181036000830152613a6a816132e9565b9050919050565b60006020820190508181036000830152613a8a8161330c565b9050919050565b60006020820190508181036000830152613aaa8161332f565b9050919050565b60006020820190508181036000830152613aca81613375565b9050919050565b60006020820190508181036000830152613aea81613398565b9050919050565b60006020820190508181036000830152613b0a816133bb565b9050919050565b60006020820190508181036000830152613b2a816133de565b9050919050565b600060e0820190508181036000830152613b4b8185613424565b9050613b5a6020830184613542565b9392505050565b6000613b6b613b7c565b9050613b778282613e83565b919050565b6000604051905090565b600067ffffffffffffffff821115613ba157613ba0613fec565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613bcd57613bcc613fec565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613bf957613bf8613fec565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613ce782613dde565b9150613cf283613dde565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613d2757613d26613f5f565b5b828201905092915050565b6000613d3d82613de8565b9150613d4883613de8565b92508263ffffffff03821115613d6157613d60613f5f565b5b828201905092915050565b6000613d7782613dde565b9150613d8283613dde565b925082821015613d9557613d94613f5f565b5b828203905092915050565b6000819050919050565b6000819050613db88261444c565b919050565b6000819050613dcb82614460565b919050565b600061ffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b6000613e2482613daa565b9050919050565b6000613e3682613dbd565b9050919050565b6000613e49368361288d565b9050919050565b60005b83811015613e6e578082015181840152602081019050613e53565b83811115613e7d576000848401525b50505050565b613e8c82614072565b810181811067ffffffffffffffff82111715613eab57613eaa613fec565b5b80604052505050565b6000613ebf82613dde565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613ef257613ef1613f5f565b5b600182019050919050565b6000613f0882613e0c565b915060ff821415613f1c57613f1b613f5f565b5b600182019050919050565b6000819050919050565b6000819050919050565b6000613f4682614083565b9050919050565b6000613f5882614090565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160c01b9050919050565b60008160f81b9050919050565b7f4241445f46554e435f5245465f434f4e54454e54530000000000000000000000600082015250565b7f4241445f43414c4c5f4441544100000000000000000000000000000000000000600082015250565b7f434f4e53545f505553485f494e56414c49445f4f50434f444500000000000000600082015250565b7f494e56414c49445f4f50434f4445000000000000000000000000000000000000600082015250565b7f494e56414c49445f52455455524e5f50435f4441544100000000000000000000600082015250565b7f4241445f57494e444f575f4c454e475448000000000000000000000000000000600082015250565b7f4241445f454c454d454e54535f524f4f54000000000000000000000000000000600082015250565b7f494e56414c49445f52455455524e5f50435f5459504500000000000000000000600082015250565b7f4d4f56455f494e5445524e414c5f494e56414c49445f4f50434f444500000000600082015250565b7f43616c6c20696e6469726563743a000000000000000000000000000000000000600082015250565b7f56616c75653a0000000000000000000000000000000000000000000000000000600082015250565b7f4241445f43414c4c5f494e4449524543545f4441544100000000000000000000600082015250565b7f4241445f49333200000000000000000000000000000000000000000000000000600082015250565b7f4241445f424c4f434b5f50430000000000000000000000000000000000000000600082015250565b7f4241445f5441424c45535f524f4f540000000000000000000000000000000000600082015250565b7f4241445f454c454d5f5459504500000000000000000000000000000000000000600082015250565b7f4241445f43524f53535f4d4f44554c455f43414c4c5f44415441000000000000600082015250565b7f5461626c653a0000000000000000000000000000000000000000000000000000600082015250565b7f4241445f43414c4c45525f494e5445524e414c5f43414c4c5f44415441000000600082015250565b7f57524f4e475f4d45524b4c455f524f4f54000000000000000000000000000000600082015250565b7f4241445f56414c55455f54595045000000000000000000000000000000000000600082015250565b7f4e4f545f49333200000000000000000000000000000000000000000000000000600082015250565b7f5461626c6520656c656d656e743a000000000000000000000000000000000000600082015250565b6004811061445d5761445c613f8e565b5b50565b6008811061447157614470613f8e565b5b50565b61447d81613da0565b811461448857600080fd5b50565b6004811061449857600080fd5b50565b600881106144a857600080fd5b50565b6144b481613dd0565b81146144bf57600080fd5b50565b6144cb81613dde565b81146144d657600080fd5b50565b6144e281613de8565b81146144ed57600080fd5b50565b6144f981613df8565b811461450457600080fd5b5056fea26469706673582212203568b7cafcd1ab113e2cd8237c65a1aa8178fdbc25d62ba232a2b701890aca7364736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}