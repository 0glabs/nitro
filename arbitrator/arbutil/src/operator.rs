// Copyright 2021-2023, Offchain Labs, Inc.
// For license information, see https://github.com/nitro/blob/master/LICENSE

use std::fmt;
use std::fmt::{Debug, Display, Formatter};
use std::hash::Hash;
use wasmparser::Operator;

#[derive(Debug, Eq, Hash, PartialEq)]
pub struct OperatorCode(usize);

impl Display for OperatorCode {
    fn fmt(&self, f: &mut Formatter) -> fmt::Result {
        let name = match self {
            OperatorCode(0x00) => "Unreachable",
            OperatorCode(0x01) => "Nop",
            OperatorCode(0x02) => "Block",
            OperatorCode(0x03) => "Loop",
            OperatorCode(0x04) => "If",
            OperatorCode(0x05) => "Else",
            OperatorCode(0x06) => "Try",
            OperatorCode(0x07) => "Catch",
            OperatorCode(0x08) => "Throw",
            OperatorCode(0x09) => "Rethrow",
            OperatorCode(0x0b) => "End",
            OperatorCode(0x0c) => "Br",
            OperatorCode(0x0d) => "BrIf",
            OperatorCode(0x0e) => "BrTable",
            OperatorCode(0x0f) => "Return",
            OperatorCode(0x10) => "Call",
            OperatorCode(0x11) => "CallIndirect",
            OperatorCode(0x12) => "ReturnCall",
            OperatorCode(0x13) => "ReturnCallIndirect",
            OperatorCode(0x18) => "Delegate",
            OperatorCode(0x19) => "CatchAll",
            OperatorCode(0x1a) => "Drop",
            OperatorCode(0x1b) => "Select",
            OperatorCode(0x1c) => "TypedSelect",
            OperatorCode(0x20) => "LocalGet",
            OperatorCode(0x21) => "LocalSet",
            OperatorCode(0x22) => "LocalTee",
            OperatorCode(0x23) => "GlobalGet",
            OperatorCode(0x24) => "GlobalSet",
            OperatorCode(0x25) => "TableGet",
            OperatorCode(0x26) => "TableSet",
            OperatorCode(0x28) => "I32Load",
            OperatorCode(0x29) => "I64Load",
            OperatorCode(0x2a) => "F32Load",
            OperatorCode(0x2b) => "F64Load",
            OperatorCode(0x2c) => "I32Load8S",
            OperatorCode(0x2d) => "I32Load8U",
            OperatorCode(0x2e) => "I32Load16S",
            OperatorCode(0x2f) => "I32Load16U",
            OperatorCode(0x30) => "I64Load8S",
            OperatorCode(0x31) => "I64Load8U",
            OperatorCode(0x32) => "I64Load16S",
            OperatorCode(0x33) => "I64Load16U",
            OperatorCode(0x34) => "I64Load32S",
            OperatorCode(0x35) => "I64Load32U",
            OperatorCode(0x36) => "I32Store",
            OperatorCode(0x37) => "I64Store",
            OperatorCode(0x38) => "F32Store",
            OperatorCode(0x39) => "F64Store",
            OperatorCode(0x3a) => "I32Store8",
            OperatorCode(0x3b) => "I32Store16",
            OperatorCode(0x3c) => "I64Store8",
            OperatorCode(0x3d) => "I64Store16",
            OperatorCode(0x3e) => "I64Store32",
            OperatorCode(0x3f) => "MemorySize",
            OperatorCode(0x40) => "MemoryGrow",
            OperatorCode(0x41) => "I32Const",
            OperatorCode(0x42) => "I64Const",
            OperatorCode(0x43) => "F32Const",
            OperatorCode(0x44) => "F64Const",
            OperatorCode(0x45) => "I32Eqz",
            OperatorCode(0x46) => "I32Eq",
            OperatorCode(0x47) => "I32Ne",
            OperatorCode(0x48) => "I32LtS",
            OperatorCode(0x49) => "I32LtU",
            OperatorCode(0x4a) => "I32GtS",
            OperatorCode(0x4b) => "I32GtU",
            OperatorCode(0x4c) => "I32LeS",
            OperatorCode(0x4d) => "I32LeU",
            OperatorCode(0x4e) => "I32GeS",
            OperatorCode(0x4f) => "I32GeU",
            OperatorCode(0x50) => "I64Eqz",
            OperatorCode(0x51) => "I64Eq",
            OperatorCode(0x52) => "I64Ne",
            OperatorCode(0x53) => "I64LtS",
            OperatorCode(0x54) => "I64LtU",
            OperatorCode(0x55) => "I64GtS",
            OperatorCode(0x56) => "I64GtU",
            OperatorCode(0x57) => "I64LeS",
            OperatorCode(0x58) => "I64LeU",
            OperatorCode(0x59) => "I64GeS",
            OperatorCode(0x5a) => "I64GeU",
            OperatorCode(0x5b) => "F32Eq",
            OperatorCode(0x5c) => "F32Ne",
            OperatorCode(0x5d) => "F32Lt",
            OperatorCode(0x5e) => "F32Gt",
            OperatorCode(0x5f) => "F32Le",
            OperatorCode(0x60) => "F32Ge",
            OperatorCode(0x61) => "F64Eq",
            OperatorCode(0x62) => "F64Ne",
            OperatorCode(0x63) => "F64Lt",
            OperatorCode(0x64) => "F64Gt",
            OperatorCode(0x65) => "F64Le",
            OperatorCode(0x66) => "F64Ge",
            OperatorCode(0x67) => "I32Clz",
            OperatorCode(0x68) => "I32Ctz",
            OperatorCode(0x69) => "I32Popcnt",
            OperatorCode(0x6a) => "I32Add",
            OperatorCode(0x6b) => "I32Sub",
            OperatorCode(0x6c) => "I32Mul",
            OperatorCode(0x6d) => "I32DivS",
            OperatorCode(0x6e) => "I32DivU",
            OperatorCode(0x6f) => "I32RemS",
            OperatorCode(0x70) => "I32RemU",
            OperatorCode(0x71) => "I32And",
            OperatorCode(0x72) => "I32Or",
            OperatorCode(0x73) => "I32Xor",
            OperatorCode(0x74) => "I32Shl",
            OperatorCode(0x75) => "I32ShrS",
            OperatorCode(0x76) => "I32ShrU",
            OperatorCode(0x77) => "I32Rotl",
            OperatorCode(0x78) => "I32Rotr",
            OperatorCode(0x79) => "I64Clz",
            OperatorCode(0x7a) => "I64Ctz",
            OperatorCode(0x7b) => "I64Popcnt",
            OperatorCode(0x7c) => "I64Add",
            OperatorCode(0x7d) => "I64Sub",
            OperatorCode(0x7e) => "I64Mul",
            OperatorCode(0x7f) => "I64DivS",
            OperatorCode(0x80) => "I64DivU",
            OperatorCode(0x81) => "I64RemS",
            OperatorCode(0x82) => "I64RemU",
            OperatorCode(0x83) => "I64And",
            OperatorCode(0x84) => "I64Or",
            OperatorCode(0x85) => "I64Xor",
            OperatorCode(0x86) => "I64Shl",
            OperatorCode(0x87) => "I64ShrS",
            OperatorCode(0x88) => "I64ShrU",
            OperatorCode(0x89) => "I64Rotl",
            OperatorCode(0x8a) => "I64Rotr",
            OperatorCode(0x8b) => "F32Abs",
            OperatorCode(0x8c) => "F32Neg",
            OperatorCode(0x8d) => "F32Ceil",
            OperatorCode(0x8e) => "F32Floor",
            OperatorCode(0x8f) => "F32Trunc",
            OperatorCode(0x90) => "F32Nearest",
            OperatorCode(0x91) => "F32Sqrt",
            OperatorCode(0x92) => "F32Add",
            OperatorCode(0x93) => "F32Sub",
            OperatorCode(0x94) => "F32Mul",
            OperatorCode(0x95) => "F32Div",
            OperatorCode(0x96) => "F32Min",
            OperatorCode(0x97) => "F32Max",
            OperatorCode(0x98) => "F32Copysign",
            OperatorCode(0x99) => "F64Abs",
            OperatorCode(0x9a) => "F64Neg",
            OperatorCode(0x9b) => "F64Ceil",
            OperatorCode(0x9c) => "F64Floor",
            OperatorCode(0x9d) => "F64Trunc",
            OperatorCode(0x9e) => "F64Nearest",
            OperatorCode(0x9f) => "F64Sqrt",
            OperatorCode(0xa0) => "F64Add",
            OperatorCode(0xa1) => "F64Sub",
            OperatorCode(0xa2) => "F64Mul",
            OperatorCode(0xa3) => "F64Div",
            OperatorCode(0xa4) => "F64Min",
            OperatorCode(0xa5) => "F64Max",
            OperatorCode(0xa6) => "F64Copysign",
            OperatorCode(0xa7) => "I32WrapI64",
            OperatorCode(0xa8) => "I32TruncF32S",
            OperatorCode(0xa9) => "I32TruncF32U",
            OperatorCode(0xaa) => "I32TruncF64S",
            OperatorCode(0xab) => "I32TruncF64U",
            OperatorCode(0xac) => "I64ExtendI32S",
            OperatorCode(0xad) => "I64ExtendI32U",
            OperatorCode(0xae) => "I64TruncF32S",
            OperatorCode(0xaf) => "I64TruncF32U",
            OperatorCode(0xb0) => "I64TruncF64S",
            OperatorCode(0xb1) => "I64TruncF64U",
            OperatorCode(0xb2) => "F32ConvertI32S",
            OperatorCode(0xb3) => "F32ConvertI32U",
            OperatorCode(0xb4) => "F32ConvertI64S",
            OperatorCode(0xb5) => "F32ConvertI64U",
            OperatorCode(0xb6) => "F32DemoteF64",
            OperatorCode(0xb7) => "F64ConvertI32S",
            OperatorCode(0xb8) => "F64ConvertI32U",
            OperatorCode(0xb9) => "F64ConvertI64S",
            OperatorCode(0xba) => "F64ConvertI64U",
            OperatorCode(0xbb) => "F64PromoteF32",
            OperatorCode(0xbc) => "I32ReinterpretF32",
            OperatorCode(0xbd) => "I64ReinterpretF64",
            OperatorCode(0xbe) => "F32ReinterpretI32",
            OperatorCode(0xbf) => "F64ReinterpretI64",
            OperatorCode(0xc0) => "I32Extend8S",
            OperatorCode(0xc1) => "I32Extend16S",
            OperatorCode(0xc2) => "I64Extend8S",
            OperatorCode(0xc3) => "I64Extend16S",
            OperatorCode(0xc4) => "I64Extend32S",
            OperatorCode(0xd0) => "RefNull",
            OperatorCode(0xd1) => "RefIsNull",
            OperatorCode(0xd2) => "RefFunc",
            OperatorCode(0xfc00) => "I32TruncSatF32S",
            OperatorCode(0xfc01) => "I32TruncSatF32U",
            OperatorCode(0xfc02) => "I32TruncSatF64S",
            OperatorCode(0xfc03) => "I32TruncSatF64U",
            OperatorCode(0xfc04) => "I64TruncSatF32S",
            OperatorCode(0xfc05) => "I64TruncSatF32U",
            OperatorCode(0xfc06) => "I64TruncSatF64S",
            OperatorCode(0xfc07) => "I64TruncSatF64U",
            OperatorCode(0xfc08) => "MemoryInit",
            OperatorCode(0xfc09) => "DataDrop",
            OperatorCode(0xfc0a) => "MemoryCopy",
            OperatorCode(0xfc0b) => "MemoryFill",
            OperatorCode(0xfc0c) => "TableInit",
            OperatorCode(0xfc0d) => "ElemDrop",
            OperatorCode(0xfc0e) => "TableCopy",
            OperatorCode(0xfc0f) => "TableGrow",
            OperatorCode(0xfc10) => "TableSize",
            OperatorCode(0xfc11) => "TableFill",
            OperatorCode(0xfd00) => "V128Load",
            OperatorCode(0xfd01) => "V128Load8x8S",
            OperatorCode(0xfd02) => "V128Load8x8U",
            OperatorCode(0xfd03) => "V128Load16x4S",
            OperatorCode(0xfd04) => "V128Load16x4U",
            OperatorCode(0xfd05) => "V128Load32x2S",
            OperatorCode(0xfd06) => "V128Load32x2U",
            OperatorCode(0xfd07) => "V128Load8Splat",
            OperatorCode(0xfd08) => "V128Load16Splat",
            OperatorCode(0xfd09) => "V128Load32Splat",
            OperatorCode(0xfd0a) => "V128Load64Splat",
            OperatorCode(0xfd0b) => "V128Store",
            OperatorCode(0xfd0c) => "V128Const",
            OperatorCode(0xfd0d) => "I8x16Shuffle",
            OperatorCode(0xfd0e) => "I8x16Swizzle",
            OperatorCode(0xfd0f) => "I8x16Splat",
            OperatorCode(0xfd10) => "I16x8Splat",
            OperatorCode(0xfd11) => "I32x4Splat",
            OperatorCode(0xfd12) => "I64x2Splat",
            OperatorCode(0xfd13) => "F32x4Splat",
            OperatorCode(0xfd14) => "F64x2Splat",
            OperatorCode(0xfd15) => "I8x16ExtractLaneS",
            OperatorCode(0xfd16) => "I8x16ExtractLaneU",
            OperatorCode(0xfd17) => "I8x16ReplaceLane",
            OperatorCode(0xfd18) => "I16x8ExtractLaneS",
            OperatorCode(0xfd19) => "I16x8ExtractLaneU",
            OperatorCode(0xfd1a) => "I16x8ReplaceLane",
            OperatorCode(0xfd1b) => "I32x4ExtractLane",
            OperatorCode(0xfd1c) => "I32x4ReplaceLane",
            OperatorCode(0xfd1d) => "I64x2ExtractLane",
            OperatorCode(0xfd1e) => "I64x2ReplaceLane",
            OperatorCode(0xfd1f) => "F32x4ExtractLane",
            OperatorCode(0xfd20) => "F32x4ReplaceLane",
            OperatorCode(0xfd21) => "F64x2ExtractLane",
            OperatorCode(0xfd22) => "F64x2ReplaceLane",
            OperatorCode(0xfd23) => "I8x16Eq",
            OperatorCode(0xfd24) => "I8x16Ne",
            OperatorCode(0xfd25) => "I8x16LtS",
            OperatorCode(0xfd26) => "I8x16LtU",
            OperatorCode(0xfd27) => "I8x16GtS",
            OperatorCode(0xfd28) => "I8x16GtU",
            OperatorCode(0xfd29) => "I8x16LeS",
            OperatorCode(0xfd2a) => "I8x16LeU",
            OperatorCode(0xfd2b) => "I8x16GeS",
            OperatorCode(0xfd2c) => "I8x16GeU",
            OperatorCode(0xfd2d) => "I16x8Eq",
            OperatorCode(0xfd2e) => "I16x8Ne",
            OperatorCode(0xfd2f) => "I16x8LtS",
            OperatorCode(0xfd30) => "I16x8LtU",
            OperatorCode(0xfd31) => "I16x8GtS",
            OperatorCode(0xfd32) => "I16x8GtU",
            OperatorCode(0xfd33) => "I16x8LeS",
            OperatorCode(0xfd34) => "I16x8LeU",
            OperatorCode(0xfd35) => "I16x8GeS",
            OperatorCode(0xfd36) => "I16x8GeU",
            OperatorCode(0xfd37) => "I32x4Eq",
            OperatorCode(0xfd38) => "I32x4Ne",
            OperatorCode(0xfd39) => "I32x4LtS",
            OperatorCode(0xfd3a) => "I32x4LtU",
            OperatorCode(0xfd3b) => "I32x4GtS",
            OperatorCode(0xfd3c) => "I32x4GtU",
            OperatorCode(0xfd3d) => "I32x4LeS",
            OperatorCode(0xfd3e) => "I32x4LeU",
            OperatorCode(0xfd3f) => "I32x4GeS",
            OperatorCode(0xfd40) => "I32x4GeU",
            OperatorCode(0xfd41) => "F32x4Eq",
            OperatorCode(0xfd42) => "F32x4Ne",
            OperatorCode(0xfd43) => "F32x4Lt",
            OperatorCode(0xfd44) => "F32x4Gt",
            OperatorCode(0xfd45) => "F32x4Le",
            OperatorCode(0xfd46) => "F32x4Ge",
            OperatorCode(0xfd47) => "F64x2Eq",
            OperatorCode(0xfd48) => "F64x2Ne",
            OperatorCode(0xfd49) => "F64x2Lt",
            OperatorCode(0xfd4a) => "F64x2Gt",
            OperatorCode(0xfd4b) => "F64x2Le",
            OperatorCode(0xfd4c) => "F64x2Ge",
            OperatorCode(0xfd4d) => "V128Not",
            OperatorCode(0xfd4e) => "V128And",
            OperatorCode(0xfd4f) => "V128AndNot",
            OperatorCode(0xfd50) => "V128Or",
            OperatorCode(0xfd51) => "V128Xor",
            OperatorCode(0xfd52) => "V128Bitselect",
            OperatorCode(0xfd53) => "V128AnyTrue",
            OperatorCode(0xfd54) => "V128Load8Lane",
            OperatorCode(0xfd55) => "V128Load16Lane",
            OperatorCode(0xfd56) => "V128Load32Lane",
            OperatorCode(0xfd57) => "V128Load64Lane",
            OperatorCode(0xfd58) => "V128Store8Lane",
            OperatorCode(0xfd59) => "V128Store16Lane",
            OperatorCode(0xfd5a) => "V128Store32Lane",
            OperatorCode(0xfd5b) => "V128Store64Lane",
            OperatorCode(0xfd5c) => "V128Load32Zero",
            OperatorCode(0xfd5d) => "V128Load64Zero",
            OperatorCode(0xfd5e) => "F32x4DemoteF64x2Zero",
            OperatorCode(0xfd5f) => "F64x2PromoteLowF32x4",
            OperatorCode(0xfd60) => "I8x16Abs",
            OperatorCode(0xfd61) => "I8x16Neg",
            OperatorCode(0xfd62) => "I8x16Popcnt",
            OperatorCode(0xfd63) => "I8x16AllTrue",
            OperatorCode(0xfd64) => "I8x16Bitmask",
            OperatorCode(0xfd65) => "I8x16NarrowI16x8S",
            OperatorCode(0xfd66) => "I8x16NarrowI16x8U",
            OperatorCode(0xfd67) => "F32x4Ceil",
            OperatorCode(0xfd68) => "F32x4Floor",
            OperatorCode(0xfd69) => "F32x4Trunc",
            OperatorCode(0xfd6a) => "F32x4Nearest",
            OperatorCode(0xfd6b) => "I8x16Shl",
            OperatorCode(0xfd6c) => "I8x16ShrS",
            OperatorCode(0xfd6d) => "I8x16ShrU",
            OperatorCode(0xfd6e) => "I8x16Add",
            OperatorCode(0xfd6f) => "I8x16AddSatS",
            OperatorCode(0xfd70) => "I8x16AddSatU",
            OperatorCode(0xfd71) => "I8x16Sub",
            OperatorCode(0xfd72) => "I8x16SubSatS",
            OperatorCode(0xfd73) => "I8x16SubSatU",
            OperatorCode(0xfd74) => "F64x2Ceil",
            OperatorCode(0xfd75) => "F64x2Floor",
            OperatorCode(0xfd76) => "I8x16MinS",
            OperatorCode(0xfd77) => "I8x16MinU",
            OperatorCode(0xfd78) => "I8x16MaxS",
            OperatorCode(0xfd79) => "I8x16MaxU",
            OperatorCode(0xfd7a) => "F64x2Trunc",
            OperatorCode(0xfd7b) => "I8x16RoundingAverageU",
            OperatorCode(0xfd7c) => "I16x8ExtAddPairwiseI8x16S",
            OperatorCode(0xfd7d) => "I16x8ExtAddPairwiseI8x16U",
            OperatorCode(0xfd7e) => "I32x4ExtAddPairwiseI16x8S",
            OperatorCode(0xfd7f) => "I32x4ExtAddPairwiseI16x8U",
            OperatorCode(0xfd80) => "I16x8Abs",
            OperatorCode(0xfd81) => "I16x8Neg",
            OperatorCode(0xfd82) => "I16x8Q15MulrSatS",
            OperatorCode(0xfd83) => "I16x8AllTrue",
            OperatorCode(0xfd84) => "I16x8Bitmask",
            OperatorCode(0xfd85) => "I16x8NarrowI32x4S",
            OperatorCode(0xfd86) => "I16x8NarrowI32x4U",
            OperatorCode(0xfd87) => "I16x8ExtendLowI8x16S",
            OperatorCode(0xfd88) => "I16x8ExtendHighI8x16S",
            OperatorCode(0xfd89) => "I16x8ExtendLowI8x16U",
            OperatorCode(0xfd8a) => "I16x8ExtendHighI8x16U",
            OperatorCode(0xfd8b) => "I16x8Shl",
            OperatorCode(0xfd8c) => "I16x8ShrS",
            OperatorCode(0xfd8d) => "I16x8ShrU",
            OperatorCode(0xfd8e) => "I16x8Add",
            OperatorCode(0xfd8f) => "I16x8AddSatS",
            OperatorCode(0xfd90) => "I16x8AddSatU",
            OperatorCode(0xfd91) => "I16x8Sub",
            OperatorCode(0xfd92) => "I16x8SubSatS",
            OperatorCode(0xfd93) => "I16x8SubSatU",
            OperatorCode(0xfd94) => "F64x2Nearest",
            OperatorCode(0xfd95) => "I16x8Mul",
            OperatorCode(0xfd96) => "I16x8MinS",
            OperatorCode(0xfd97) => "I16x8MinU",
            OperatorCode(0xfd98) => "I16x8MaxS",
            OperatorCode(0xfd99) => "I16x8MaxU",
            OperatorCode(0xfd9b) => "I16x8RoundingAverageU",
            OperatorCode(0xfd9c) => "I16x8ExtMulLowI8x16S",
            OperatorCode(0xfd9d) => "I16x8ExtMulHighI8x16S",
            OperatorCode(0xfd9e) => "I16x8ExtMulLowI8x16U",
            OperatorCode(0xfd9f) => "I16x8ExtMulHighI8x16U",
            OperatorCode(0xfda0) => "I32x4Abs",
            OperatorCode(0xfda2) => "I8x16RelaxedSwizzle",
            OperatorCode(0xfda1) => "I32x4Neg",
            OperatorCode(0xfda3) => "I32x4AllTrue",
            OperatorCode(0xfda4) => "I32x4Bitmask",
            OperatorCode(0xfda5) => "I32x4RelaxedTruncSatF32x4S",
            OperatorCode(0xfda6) => "I32x4RelaxedTruncSatF32x4U",
            OperatorCode(0xfda7) => "I32x4ExtendLowI16x8S",
            OperatorCode(0xfda8) => "I32x4ExtendHighI16x8S",
            OperatorCode(0xfda9) => "I32x4ExtendLowI16x8U",
            OperatorCode(0xfdaa) => "I32x4ExtendHighI16x8U",
            OperatorCode(0xfdab) => "I32x4Shl",
            OperatorCode(0xfdac) => "I32x4ShrS",
            OperatorCode(0xfdad) => "I32x4ShrU",
            OperatorCode(0xfdae) => "I32x4Add",
            OperatorCode(0xfdaf) => "F32x4Fma",
            OperatorCode(0xfdb0) => "F32x4Fms",
            OperatorCode(0xfdb1) => "I32x4Sub",
            OperatorCode(0xfdb2) => "I8x16LaneSelect",
            OperatorCode(0xfdb3) => "I16x8LaneSelect",
            OperatorCode(0xfdb4) => "F32x4RelaxedMin",
            OperatorCode(0xfdb5) => "I32x4Mul",
            OperatorCode(0xfdb6) => "I32x4MinS",
            OperatorCode(0xfdb7) => "I32x4MinU",
            OperatorCode(0xfdb8) => "I32x4MaxS",
            OperatorCode(0xfdb9) => "I32x4MaxU",
            OperatorCode(0xfdba) => "I32x4DotI16x8S",
            OperatorCode(0xfdbc) => "I32x4ExtMulLowI16x8S",
            OperatorCode(0xfdbd) => "I32x4ExtMulHighI16x8S",
            OperatorCode(0xfdbe) => "I32x4ExtMulLowI16x8U",
            OperatorCode(0xfdbf) => "I32x4ExtMulHighI16x8U",
            OperatorCode(0xfdc0) => "I64x2Abs",
            OperatorCode(0xfdc1) => "I64x2Neg",
            OperatorCode(0xfdc3) => "I64x2AllTrue",
            OperatorCode(0xfdc4) => "I64x2Bitmask",
            OperatorCode(0xfdc5) => "I32x4RelaxedTruncSatF64x2SZero",
            OperatorCode(0xfdc6) => "I32x4RelaxedTruncSatF64x2UZero",
            OperatorCode(0xfdc7) => "I64x2ExtendLowI32x4S",
            OperatorCode(0xfdc8) => "I64x2ExtendHighI32x4S",
            OperatorCode(0xfdc9) => "I64x2ExtendLowI32x4U",
            OperatorCode(0xfdca) => "I64x2ExtendHighI32x4U",
            OperatorCode(0xfdcb) => "I64x2Shl",
            OperatorCode(0xfdcc) => "I64x2ShrS",
            OperatorCode(0xfdcd) => "I64x2ShrU",
            OperatorCode(0xfdce) => "I64x2Add",
            OperatorCode(0xfdcf) => "F64x2Fma",
            OperatorCode(0xfdd0) => "F64x2Fms",
            OperatorCode(0xfdd1) => "I64x2Sub",
            OperatorCode(0xfdd2) => "I32x4LaneSelect",
            OperatorCode(0xfdd3) => "I64x2LaneSelect",
            OperatorCode(0xfdd4) => "F64x2RelaxedMin",
            OperatorCode(0xfdd5) => "I64x2Mul",
            OperatorCode(0xfdd6) => "I64x2Eq",
            OperatorCode(0xfdd7) => "I64x2Ne",
            OperatorCode(0xfdd8) => "I64x2LtS",
            OperatorCode(0xfdd9) => "I64x2GtS",
            OperatorCode(0xfdda) => "I64x2LeS",
            OperatorCode(0xfddb) => "I64x2GeS",
            OperatorCode(0xfddc) => "I64x2ExtMulLowI32x4S",
            OperatorCode(0xfddd) => "I64x2ExtMulHighI32x4S",
            OperatorCode(0xfdde) => "I64x2ExtMulLowI32x4U",
            OperatorCode(0xfddf) => "I64x2ExtMulHighI32x4U",
            OperatorCode(0xfde0) => "F32x4Abs",
            OperatorCode(0xfde1) => "F32x4Neg",
            OperatorCode(0xfde2) => "F32x4RelaxedMax",
            OperatorCode(0xfde3) => "F32x4Sqrt",
            OperatorCode(0xfde4) => "F32x4Add",
            OperatorCode(0xfde5) => "F32x4Sub",
            OperatorCode(0xfde6) => "F32x4Mul",
            OperatorCode(0xfde7) => "F32x4Div",
            OperatorCode(0xfde8) => "F32x4Min",
            OperatorCode(0xfde9) => "F32x4Max",
            OperatorCode(0xfdea) => "F32x4PMin",
            OperatorCode(0xfdeb) => "F32x4PMax",
            OperatorCode(0xfdec) => "F64x2Abs",
            OperatorCode(0xfded) => "F64x2Neg",
            OperatorCode(0xfdee) => "F64x2RelaxedMax",
            OperatorCode(0xfdef) => "F64x2Sqrt",
            OperatorCode(0xfdf0) => "F64x2Add",
            OperatorCode(0xfdf1) => "F64x2Sub",
            OperatorCode(0xfdf2) => "F64x2Mul",
            OperatorCode(0xfdf3) => "F64x2Div",
            OperatorCode(0xfdf4) => "F64x2Min",
            OperatorCode(0xfdf5) => "F64x2Max",
            OperatorCode(0xfdf6) => "F64x2PMin",
            OperatorCode(0xfdf7) => "F64x2PMax",
            OperatorCode(0xfdf8) => "I32x4TruncSatF32x4S",
            OperatorCode(0xfdf9) => "I32x4TruncSatF32x4U",
            OperatorCode(0xfdfa) => "F32x4ConvertI32x4S",
            OperatorCode(0xfdfb) => "F32x4ConvertI32x4U",
            OperatorCode(0xfdfc) => "I32x4TruncSatF64x2SZero",
            OperatorCode(0xfdfd) => "I32x4TruncSatF64x2UZero",
            OperatorCode(0xfdfe) => "F64x2ConvertLowI32x4S",
            OperatorCode(0xfdff) => "F64x2ConvertLowI32x4U",
            OperatorCode(0xfe00) => "MemoryAtomicNotify",
            OperatorCode(0xfe01) => "MemoryAtomicWait32",
            OperatorCode(0xfe02) => "MemoryAtomicWait64",
            OperatorCode(0xfe03) => "AtomicFence",
            OperatorCode(0xfe10) => "I32AtomicLoad",
            OperatorCode(0xfe11) => "I64AtomicLoad",
            OperatorCode(0xfe12) => "I32AtomicLoad8U",
            OperatorCode(0xfe13) => "I32AtomicLoad16U",
            OperatorCode(0xfe14) => "I64AtomicLoad8U",
            OperatorCode(0xfe15) => "I64AtomicLoad16U",
            OperatorCode(0xfe16) => "I64AtomicLoad32U",
            OperatorCode(0xfe17) => "I32AtomicStore",
            OperatorCode(0xfe18) => "I64AtomicStore",
            OperatorCode(0xfe19) => "I32AtomicStore8",
            OperatorCode(0xfe1a) => "I32AtomicStore16",
            OperatorCode(0xfe1b) => "I64AtomicStore8",
            OperatorCode(0xfe1c) => "I64AtomicStore16",
            OperatorCode(0xfe1d) => "I64AtomicStore32",
            OperatorCode(0xfe1e) => "I32AtomicRmwAdd",
            OperatorCode(0xfe1f) => "I64AtomicRmwAdd",
            OperatorCode(0xfe20) => "I32AtomicRmw8AddU",
            OperatorCode(0xfe21) => "I32AtomicRmw16AddU",
            OperatorCode(0xfe22) => "I64AtomicRmw8AddU",
            OperatorCode(0xfe23) => "I64AtomicRmw16AddU",
            OperatorCode(0xfe24) => "I64AtomicRmw32AddU",
            OperatorCode(0xfe25) => "I32AtomicRmwSub",
            OperatorCode(0xfe26) => "I64AtomicRmwSub",
            OperatorCode(0xfe27) => "I32AtomicRmw8SubU",
            OperatorCode(0xfe28) => "I32AtomicRmw16SubU",
            OperatorCode(0xfe29) => "I64AtomicRmw8SubU",
            OperatorCode(0xfe2a) => "I64AtomicRmw16SubU",
            OperatorCode(0xfe2b) => "I64AtomicRmw32SubU",
            OperatorCode(0xfe2c) => "I32AtomicRmwAnd",
            OperatorCode(0xfe2d) => "I64AtomicRmwAnd",
            OperatorCode(0xfe2e) => "I32AtomicRmw8AndU",
            OperatorCode(0xfe2f) => "I32AtomicRmw16AndU",
            OperatorCode(0xfe30) => "I64AtomicRmw8AndU",
            OperatorCode(0xfe31) => "I64AtomicRmw16AndU",
            OperatorCode(0xfe32) => "I64AtomicRmw32AndU",
            OperatorCode(0xfe33) => "I32AtomicRmwOr",
            OperatorCode(0xfe34) => "I64AtomicRmwOr",
            OperatorCode(0xfe35) => "I32AtomicRmw8OrU",
            OperatorCode(0xfe36) => "I32AtomicRmw16OrU",
            OperatorCode(0xfe37) => "I64AtomicRmw8OrU",
            OperatorCode(0xfe38) => "I64AtomicRmw16OrU",
            OperatorCode(0xfe39) => "I64AtomicRmw32OrU",
            OperatorCode(0xfe3a) => "I32AtomicRmwXor",
            OperatorCode(0xfe3b) => "I64AtomicRmwXor",
            OperatorCode(0xfe3c) => "I32AtomicRmw8XorU",
            OperatorCode(0xfe3d) => "I32AtomicRmw16XorU",
            OperatorCode(0xfe3e) => "I64AtomicRmw8XorU",
            OperatorCode(0xfe3f) => "I64AtomicRmw16XorU",
            OperatorCode(0xfe40) => "I64AtomicRmw32XorU",
            OperatorCode(0xfe41) => "I32AtomicRmwXchg",
            OperatorCode(0xfe42) => "I64AtomicRmwXchg",
            OperatorCode(0xfe43) => "I32AtomicRmw8XchgU",
            OperatorCode(0xfe44) => "I32AtomicRmw16XchgU",
            OperatorCode(0xfe45) => "I64AtomicRmw8XchgU",
            OperatorCode(0xfe46) => "I64AtomicRmw16XchgU",
            OperatorCode(0xfe47) => "I64AtomicRmw32XchgU",
            OperatorCode(0xfe48) => "I32AtomicRmwCmpxchg",
            OperatorCode(0xfe49) => "I64AtomicRmwCmpxchg",
            OperatorCode(0xfe4a) => "I32AtomicRmw8CmpxchgU",
            OperatorCode(0xfe4b) => "I32AtomicRmw16CmpxchgU",
            OperatorCode(0xfe4c) => "I64AtomicRmw8CmpxchgU",
            OperatorCode(0xfe4d) => "I64AtomicRmw16CmpxchgU",
            OperatorCode(0xfe4e) => "I64AtomicRmw32CmpxchgU",
            _ => "UNKNOWN",
        };
        write!(f, "{}", name)
    }
}

impl<'a> From<&Operator<'a>> for OperatorCode {
    fn from(op: &Operator) -> Self {
        use Operator::*;

        match op {
            Unreachable => OperatorCode(0x00),
            Nop => OperatorCode(0x01),
            Block { .. } => OperatorCode(0x02),
            Loop { .. } => OperatorCode(0x03),
            If { .. } => OperatorCode(0x04),
            Else => OperatorCode(0x05),
            Try { .. } => OperatorCode(0x06),
            Catch { .. } => OperatorCode(0x07),
            Throw { .. } => OperatorCode(0x08),
            Rethrow { .. } => OperatorCode(0x09),
            End => OperatorCode(0x0b),
            Br { .. } => OperatorCode(0x0c),
            BrIf { .. } => OperatorCode(0x0d),
            BrTable { .. } => OperatorCode(0x0e),
            Return => OperatorCode(0x0f),
            Call { .. } => OperatorCode(0x10),
            CallIndirect { .. } => OperatorCode(0x11),
            ReturnCall { .. } => OperatorCode(0x12),
            ReturnCallIndirect { .. } => OperatorCode(0x13),
            Delegate { .. } => OperatorCode(0x18),
            CatchAll => OperatorCode(0x19),
            Drop => OperatorCode(0x1a),
            Select => OperatorCode(0x1b),
            TypedSelect { .. } => OperatorCode(0x1c),
            LocalGet { .. } => OperatorCode(0x20),
            LocalSet { .. } => OperatorCode(0x21),
            LocalTee { .. } => OperatorCode(0x22),
            GlobalGet { .. } => OperatorCode(0x23),
            GlobalSet { .. } => OperatorCode(0x24),
            TableGet { .. } => OperatorCode(0x25),
            TableSet { .. } => OperatorCode(0x26),
            I32Load { .. } => OperatorCode(0x28),
            I64Load { .. } => OperatorCode(0x29),
            F32Load { .. } => OperatorCode(0x2a),
            F64Load { .. } => OperatorCode(0x2b),
            I32Load8S { .. } => OperatorCode(0x2c),
            I32Load8U { .. } => OperatorCode(0x2d),
            I32Load16S { .. } => OperatorCode(0x2e),
            I32Load16U { .. } => OperatorCode(0x2f),
            I64Load8S { .. } => OperatorCode(0x30),
            I64Load8U { .. } => OperatorCode(0x31),
            I64Load16S { .. } => OperatorCode(0x32),
            I64Load16U { .. } => OperatorCode(0x33),
            I64Load32S { .. } => OperatorCode(0x34),
            I64Load32U { .. } => OperatorCode(0x35),
            I32Store { .. } => OperatorCode(0x36),
            I64Store { .. } => OperatorCode(0x37),
            F32Store { .. } => OperatorCode(0x38),
            F64Store { .. } => OperatorCode(0x39),
            I32Store8 { .. } => OperatorCode(0x3a),
            I32Store16 { .. } => OperatorCode(0x3b),
            I64Store8 { .. } => OperatorCode(0x3c),
            I64Store16 { .. } => OperatorCode(0x3d),
            I64Store32 { .. } => OperatorCode(0x3e),
            MemorySize { .. } => OperatorCode(0x3f),
            MemoryGrow { .. } => OperatorCode(0x40),
            I32Const { .. } => OperatorCode(0x41),
            I64Const { .. } => OperatorCode(0x42),
            F32Const { .. } => OperatorCode(0x43),
            F64Const { .. } => OperatorCode(0x44),
            I32Eqz => OperatorCode(0x45),
            I32Eq => OperatorCode(0x46),
            I32Ne => OperatorCode(0x47),
            I32LtS => OperatorCode(0x48),
            I32LtU => OperatorCode(0x49),
            I32GtS => OperatorCode(0x4a),
            I32GtU => OperatorCode(0x4b),
            I32LeS => OperatorCode(0x4c),
            I32LeU => OperatorCode(0x4d),
            I32GeS => OperatorCode(0x4e),
            I32GeU => OperatorCode(0x4f),
            I64Eqz => OperatorCode(0x50),
            I64Eq => OperatorCode(0x51),
            I64Ne => OperatorCode(0x52),
            I64LtS => OperatorCode(0x53),
            I64LtU => OperatorCode(0x54),
            I64GtS => OperatorCode(0x55),
            I64GtU => OperatorCode(0x56),
            I64LeS => OperatorCode(0x57),
            I64LeU => OperatorCode(0x58),
            I64GeS => OperatorCode(0x59),
            I64GeU => OperatorCode(0x5a),
            F32Eq => OperatorCode(0x5b),
            F32Ne => OperatorCode(0x5c),
            F32Lt => OperatorCode(0x5d),
            F32Gt => OperatorCode(0x5e),
            F32Le => OperatorCode(0x5f),
            F32Ge => OperatorCode(0x60),
            F64Eq => OperatorCode(0x61),
            F64Ne => OperatorCode(0x62),
            F64Lt => OperatorCode(0x63),
            F64Gt => OperatorCode(0x64),
            F64Le => OperatorCode(0x65),
            F64Ge => OperatorCode(0x66),
            I32Clz => OperatorCode(0x67),
            I32Ctz => OperatorCode(0x68),
            I32Popcnt => OperatorCode(0x69),
            I32Add => OperatorCode(0x6a),
            I32Sub => OperatorCode(0x6b),
            I32Mul => OperatorCode(0x6c),
            I32DivS => OperatorCode(0x6d),
            I32DivU => OperatorCode(0x6e),
            I32RemS => OperatorCode(0x6f),
            I32RemU => OperatorCode(0x70),
            I32And => OperatorCode(0x71),
            I32Or => OperatorCode(0x72),
            I32Xor => OperatorCode(0x73),
            I32Shl => OperatorCode(0x74),
            I32ShrS => OperatorCode(0x75),
            I32ShrU => OperatorCode(0x76),
            I32Rotl => OperatorCode(0x77),
            I32Rotr => OperatorCode(0x78),
            I64Clz => OperatorCode(0x79),
            I64Ctz => OperatorCode(0x7a),
            I64Popcnt => OperatorCode(0x7b),
            I64Add => OperatorCode(0x7c),
            I64Sub => OperatorCode(0x7d),
            I64Mul => OperatorCode(0x7e),
            I64DivS => OperatorCode(0x7f),
            I64DivU => OperatorCode(0x80),
            I64RemS => OperatorCode(0x81),
            I64RemU => OperatorCode(0x82),
            I64And => OperatorCode(0x83),
            I64Or => OperatorCode(0x84),
            I64Xor => OperatorCode(0x85),
            I64Shl => OperatorCode(0x86),
            I64ShrS => OperatorCode(0x87),
            I64ShrU => OperatorCode(0x88),
            I64Rotl => OperatorCode(0x89),
            I64Rotr => OperatorCode(0x8a),
            F32Abs => OperatorCode(0x8b),
            F32Neg => OperatorCode(0x8c),
            F32Ceil => OperatorCode(0x8d),
            F32Floor => OperatorCode(0x8e),
            F32Trunc => OperatorCode(0x8f),
            F32Nearest => OperatorCode(0x90),
            F32Sqrt => OperatorCode(0x91),
            F32Add => OperatorCode(0x92),
            F32Sub => OperatorCode(0x93),
            F32Mul => OperatorCode(0x94),
            F32Div => OperatorCode(0x95),
            F32Min => OperatorCode(0x96),
            F32Max => OperatorCode(0x97),
            F32Copysign => OperatorCode(0x98),
            F64Abs => OperatorCode(0x99),
            F64Neg => OperatorCode(0x9a),
            F64Ceil => OperatorCode(0x9b),
            F64Floor => OperatorCode(0x9c),
            F64Trunc => OperatorCode(0x9d),
            F64Nearest => OperatorCode(0x9e),
            F64Sqrt => OperatorCode(0x9f),
            F64Add => OperatorCode(0xa0),
            F64Sub => OperatorCode(0xa1),
            F64Mul => OperatorCode(0xa2),
            F64Div => OperatorCode(0xa3),
            F64Min => OperatorCode(0xa4),
            F64Max => OperatorCode(0xa5),
            F64Copysign => OperatorCode(0xa6),
            I32WrapI64 => OperatorCode(0xa7),
            I32TruncF32S => OperatorCode(0xa8),
            I32TruncF32U => OperatorCode(0xa9),
            I32TruncF64S => OperatorCode(0xaa),
            I32TruncF64U => OperatorCode(0xab),
            I64ExtendI32S => OperatorCode(0xac),
            I64ExtendI32U => OperatorCode(0xad),
            I64TruncF32S => OperatorCode(0xae),
            I64TruncF32U => OperatorCode(0xaf),
            I64TruncF64S => OperatorCode(0xb0),
            I64TruncF64U => OperatorCode(0xb1),
            F32ConvertI32S => OperatorCode(0xb2),
            F32ConvertI32U => OperatorCode(0xb3),
            F32ConvertI64S => OperatorCode(0xb4),
            F32ConvertI64U => OperatorCode(0xb5),
            F32DemoteF64 => OperatorCode(0xb6),
            F64ConvertI32S => OperatorCode(0xb7),
            F64ConvertI32U => OperatorCode(0xb8),
            F64ConvertI64S => OperatorCode(0xb9),
            F64ConvertI64U => OperatorCode(0xba),
            F64PromoteF32 => OperatorCode(0xbb),
            I32ReinterpretF32 => OperatorCode(0xbc),
            I64ReinterpretF64 => OperatorCode(0xbd),
            F32ReinterpretI32 => OperatorCode(0xbe),
            F64ReinterpretI64 => OperatorCode(0xbf),
            I32Extend8S => OperatorCode(0xc0),
            I32Extend16S => OperatorCode(0xc1),
            I64Extend8S => OperatorCode(0xc2),
            I64Extend16S => OperatorCode(0xc3),
            I64Extend32S => OperatorCode(0xc4),
            RefNull { .. } => OperatorCode(0xd0),
            RefIsNull => OperatorCode(0xd1),
            RefFunc { .. } => OperatorCode(0xd2),
            I32TruncSatF32S => OperatorCode(0xfc00),
            I32TruncSatF32U => OperatorCode(0xfc01),
            I32TruncSatF64S => OperatorCode(0xfc02),
            I32TruncSatF64U => OperatorCode(0xfc03),
            I64TruncSatF32S => OperatorCode(0xfc04),
            I64TruncSatF32U => OperatorCode(0xfc05),
            I64TruncSatF64S => OperatorCode(0xfc06),
            I64TruncSatF64U => OperatorCode(0xfc07),
            MemoryInit { .. } => OperatorCode(0xfc08),
            DataDrop { .. } => OperatorCode(0xfc09),
            MemoryCopy { .. } => OperatorCode(0xfc0a),
            MemoryFill { .. } => OperatorCode(0xfc0b),
            TableInit { .. } => OperatorCode(0xfc0c),
            ElemDrop { .. } => OperatorCode(0xfc0d),
            TableCopy { .. } => OperatorCode(0xfc0e),
            TableGrow { .. } => OperatorCode(0xfc0f),
            TableSize { .. } => OperatorCode(0xfc10),
            TableFill { .. } => OperatorCode(0xfc11),
            V128Load { .. } => OperatorCode(0xfd00),
            V128Load8x8S { .. } => OperatorCode(0xfd01),
            V128Load8x8U { .. } => OperatorCode(0xfd02),
            V128Load16x4S { .. } => OperatorCode(0xfd03),
            V128Load16x4U { .. } => OperatorCode(0xfd04),
            V128Load32x2S { .. } => OperatorCode(0xfd05),
            V128Load32x2U { .. } => OperatorCode(0xfd06),
            V128Load8Splat { .. } => OperatorCode(0xfd07),
            V128Load16Splat { .. } => OperatorCode(0xfd08),
            V128Load32Splat { .. } => OperatorCode(0xfd09),
            V128Load64Splat { .. } => OperatorCode(0xfd0a),
            V128Store { .. } => OperatorCode(0xfd0b),
            V128Const { .. } => OperatorCode(0xfd0c),
            I8x16Shuffle { .. } => OperatorCode(0xfd0d),
            I8x16Swizzle => OperatorCode(0xfd0e),
            I8x16Splat => OperatorCode(0xfd0f),
            I16x8Splat => OperatorCode(0xfd10),
            I32x4Splat => OperatorCode(0xfd11),
            I64x2Splat => OperatorCode(0xfd12),
            F32x4Splat => OperatorCode(0xfd13),
            F64x2Splat => OperatorCode(0xfd14),
            I8x16ExtractLaneS { .. } => OperatorCode(0xfd15),
            I8x16ExtractLaneU { .. } => OperatorCode(0xfd16),
            I8x16ReplaceLane { .. } => OperatorCode(0xfd17),
            I16x8ExtractLaneS { .. } => OperatorCode(0xfd18),
            I16x8ExtractLaneU { .. } => OperatorCode(0xfd19),
            I16x8ReplaceLane { .. } => OperatorCode(0xfd1a),
            I32x4ExtractLane { .. } => OperatorCode(0xfd1b),
            I32x4ReplaceLane { .. } => OperatorCode(0xfd1c),
            I64x2ExtractLane { .. } => OperatorCode(0xfd1d),
            I64x2ReplaceLane { .. } => OperatorCode(0xfd1e),
            F32x4ExtractLane { .. } => OperatorCode(0xfd1f),
            F32x4ReplaceLane { .. } => OperatorCode(0xfd20),
            F64x2ExtractLane { .. } => OperatorCode(0xfd21),
            F64x2ReplaceLane { .. } => OperatorCode(0xfd22),
            I8x16Eq => OperatorCode(0xfd23),
            I8x16Ne => OperatorCode(0xfd24),
            I8x16LtS => OperatorCode(0xfd25),
            I8x16LtU => OperatorCode(0xfd26),
            I8x16GtS => OperatorCode(0xfd27),
            I8x16GtU => OperatorCode(0xfd28),
            I8x16LeS => OperatorCode(0xfd29),
            I8x16LeU => OperatorCode(0xfd2a),
            I8x16GeS => OperatorCode(0xfd2b),
            I8x16GeU => OperatorCode(0xfd2c),
            I16x8Eq => OperatorCode(0xfd2d),
            I16x8Ne => OperatorCode(0xfd2e),
            I16x8LtS => OperatorCode(0xfd2f),
            I16x8LtU => OperatorCode(0xfd30),
            I16x8GtS => OperatorCode(0xfd31),
            I16x8GtU => OperatorCode(0xfd32),
            I16x8LeS => OperatorCode(0xfd33),
            I16x8LeU => OperatorCode(0xfd34),
            I16x8GeS => OperatorCode(0xfd35),
            I16x8GeU => OperatorCode(0xfd36),
            I32x4Eq => OperatorCode(0xfd37),
            I32x4Ne => OperatorCode(0xfd38),
            I32x4LtS => OperatorCode(0xfd39),
            I32x4LtU => OperatorCode(0xfd3a),
            I32x4GtS => OperatorCode(0xfd3b),
            I32x4GtU => OperatorCode(0xfd3c),
            I32x4LeS => OperatorCode(0xfd3d),
            I32x4LeU => OperatorCode(0xfd3e),
            I32x4GeS => OperatorCode(0xfd3f),
            I32x4GeU => OperatorCode(0xfd40),
            F32x4Eq => OperatorCode(0xfd41),
            F32x4Ne => OperatorCode(0xfd42),
            F32x4Lt => OperatorCode(0xfd43),
            F32x4Gt => OperatorCode(0xfd44),
            F32x4Le => OperatorCode(0xfd45),
            F32x4Ge => OperatorCode(0xfd46),
            F64x2Eq => OperatorCode(0xfd47),
            F64x2Ne => OperatorCode(0xfd48),
            F64x2Lt => OperatorCode(0xfd49),
            F64x2Gt => OperatorCode(0xfd4a),
            F64x2Le => OperatorCode(0xfd4b),
            F64x2Ge => OperatorCode(0xfd4c),
            V128Not => OperatorCode(0xfd4d),
            V128And => OperatorCode(0xfd4e),
            V128AndNot => OperatorCode(0xfd4f),
            V128Or => OperatorCode(0xfd50),
            V128Xor => OperatorCode(0xfd51),
            V128Bitselect => OperatorCode(0xfd52),
            V128AnyTrue => OperatorCode(0xfd53),
            V128Load8Lane { .. } => OperatorCode(0xfd54),
            V128Load16Lane { .. } => OperatorCode(0xfd55),
            V128Load32Lane { .. } => OperatorCode(0xfd56),
            V128Load64Lane { .. } => OperatorCode(0xfd57),
            V128Store8Lane { .. } => OperatorCode(0xfd58),
            V128Store16Lane { .. } => OperatorCode(0xfd59),
            V128Store32Lane { .. } => OperatorCode(0xfd5a),
            V128Store64Lane { .. } => OperatorCode(0xfd5b),
            V128Load32Zero { .. } => OperatorCode(0xfd5c),
            V128Load64Zero { .. } => OperatorCode(0xfd5d),
            F32x4DemoteF64x2Zero => OperatorCode(0xfd5e),
            F64x2PromoteLowF32x4 => OperatorCode(0xfd5f),
            I8x16Abs => OperatorCode(0xfd60),
            I8x16Neg => OperatorCode(0xfd61),
            I8x16Popcnt => OperatorCode(0xfd62),
            I8x16AllTrue => OperatorCode(0xfd63),
            I8x16Bitmask => OperatorCode(0xfd64),
            I8x16NarrowI16x8S => OperatorCode(0xfd65),
            I8x16NarrowI16x8U => OperatorCode(0xfd66),
            F32x4Ceil => OperatorCode(0xfd67),
            F32x4Floor => OperatorCode(0xfd68),
            F32x4Trunc => OperatorCode(0xfd69),
            F32x4Nearest => OperatorCode(0xfd6a),
            I8x16Shl => OperatorCode(0xfd6b),
            I8x16ShrS => OperatorCode(0xfd6c),
            I8x16ShrU => OperatorCode(0xfd6d),
            I8x16Add => OperatorCode(0xfd6e),
            I8x16AddSatS => OperatorCode(0xfd6f),
            I8x16AddSatU => OperatorCode(0xfd70),
            I8x16Sub => OperatorCode(0xfd71),
            I8x16SubSatS => OperatorCode(0xfd72),
            I8x16SubSatU => OperatorCode(0xfd73),
            F64x2Ceil => OperatorCode(0xfd74),
            F64x2Floor => OperatorCode(0xfd75),
            I8x16MinS => OperatorCode(0xfd76),
            I8x16MinU => OperatorCode(0xfd77),
            I8x16MaxS => OperatorCode(0xfd78),
            I8x16MaxU => OperatorCode(0xfd79),
            F64x2Trunc => OperatorCode(0xfd7a),
            I8x16RoundingAverageU => OperatorCode(0xfd7b),
            I16x8ExtAddPairwiseI8x16S => OperatorCode(0xfd7c),
            I16x8ExtAddPairwiseI8x16U => OperatorCode(0xfd7d),
            I32x4ExtAddPairwiseI16x8S => OperatorCode(0xfd7e),
            I32x4ExtAddPairwiseI16x8U => OperatorCode(0xfd7f),
            I16x8Abs => OperatorCode(0xfd80),
            I16x8Neg => OperatorCode(0xfd81),
            I16x8Q15MulrSatS => OperatorCode(0xfd82),
            I16x8AllTrue => OperatorCode(0xfd83),
            I16x8Bitmask => OperatorCode(0xfd84),
            I16x8NarrowI32x4S => OperatorCode(0xfd85),
            I16x8NarrowI32x4U => OperatorCode(0xfd86),
            I16x8ExtendLowI8x16S => OperatorCode(0xfd87),
            I16x8ExtendHighI8x16S => OperatorCode(0xfd88),
            I16x8ExtendLowI8x16U => OperatorCode(0xfd89),
            I16x8ExtendHighI8x16U => OperatorCode(0xfd8a),
            I16x8Shl => OperatorCode(0xfd8b),
            I16x8ShrS => OperatorCode(0xfd8c),
            I16x8ShrU => OperatorCode(0xfd8d),
            I16x8Add => OperatorCode(0xfd8e),
            I16x8AddSatS => OperatorCode(0xfd8f),
            I16x8AddSatU => OperatorCode(0xfd90),
            I16x8Sub => OperatorCode(0xfd91),
            I16x8SubSatS => OperatorCode(0xfd92),
            I16x8SubSatU => OperatorCode(0xfd93),
            F64x2Nearest => OperatorCode(0xfd94),
            I16x8Mul => OperatorCode(0xfd95),
            I16x8MinS => OperatorCode(0xfd96),
            I16x8MinU => OperatorCode(0xfd97),
            I16x8MaxS => OperatorCode(0xfd98),
            I16x8MaxU => OperatorCode(0xfd99),
            I16x8RoundingAverageU => OperatorCode(0xfd9b),
            I16x8ExtMulLowI8x16S => OperatorCode(0xfd9c),
            I16x8ExtMulHighI8x16S => OperatorCode(0xfd9d),
            I16x8ExtMulLowI8x16U => OperatorCode(0xfd9e),
            I16x8ExtMulHighI8x16U => OperatorCode(0xfd9f),
            I32x4Abs => OperatorCode(0xfda0),
            I8x16RelaxedSwizzle => OperatorCode(0xfda2),
            I32x4Neg => OperatorCode(0xfda1),
            I32x4AllTrue => OperatorCode(0xfda3),
            I32x4Bitmask => OperatorCode(0xfda4),
            I32x4RelaxedTruncSatF32x4S => OperatorCode(0xfda5),
            I32x4RelaxedTruncSatF32x4U => OperatorCode(0xfda6),
            I32x4ExtendLowI16x8S => OperatorCode(0xfda7),
            I32x4ExtendHighI16x8S => OperatorCode(0xfda8),
            I32x4ExtendLowI16x8U => OperatorCode(0xfda9),
            I32x4ExtendHighI16x8U => OperatorCode(0xfdaa),
            I32x4Shl => OperatorCode(0xfdab),
            I32x4ShrS => OperatorCode(0xfdac),
            I32x4ShrU => OperatorCode(0xfdad),
            I32x4Add => OperatorCode(0xfdae),
            F32x4Fma => OperatorCode(0xfdaf),
            F32x4Fms => OperatorCode(0xfdb0),
            I32x4Sub => OperatorCode(0xfdb1),
            I8x16LaneSelect => OperatorCode(0xfdb2),
            I16x8LaneSelect => OperatorCode(0xfdb3),
            F32x4RelaxedMin => OperatorCode(0xfdb4),
            I32x4Mul => OperatorCode(0xfdb5),
            I32x4MinS => OperatorCode(0xfdb6),
            I32x4MinU => OperatorCode(0xfdb7),
            I32x4MaxS => OperatorCode(0xfdb8),
            I32x4MaxU => OperatorCode(0xfdb9),
            I32x4DotI16x8S => OperatorCode(0xfdba),
            I32x4ExtMulLowI16x8S => OperatorCode(0xfdbc),
            I32x4ExtMulHighI16x8S => OperatorCode(0xfdbd),
            I32x4ExtMulLowI16x8U => OperatorCode(0xfdbe),
            I32x4ExtMulHighI16x8U => OperatorCode(0xfdbf),
            I64x2Abs => OperatorCode(0xfdc0),
            I64x2Neg => OperatorCode(0xfdc1),
            I64x2AllTrue => OperatorCode(0xfdc3),
            I64x2Bitmask => OperatorCode(0xfdc4),
            I32x4RelaxedTruncSatF64x2SZero => OperatorCode(0xfdc5),
            I32x4RelaxedTruncSatF64x2UZero => OperatorCode(0xfdc6),
            I64x2ExtendLowI32x4S => OperatorCode(0xfdc7),
            I64x2ExtendHighI32x4S => OperatorCode(0xfdc8),
            I64x2ExtendLowI32x4U => OperatorCode(0xfdc9),
            I64x2ExtendHighI32x4U => OperatorCode(0xfdca),
            I64x2Shl => OperatorCode(0xfdcb),
            I64x2ShrS => OperatorCode(0xfdcc),
            I64x2ShrU => OperatorCode(0xfdcd),
            I64x2Add => OperatorCode(0xfdce),
            F64x2Fma => OperatorCode(0xfdcf),
            F64x2Fms => OperatorCode(0xfdd0),
            I64x2Sub => OperatorCode(0xfdd1),
            I32x4LaneSelect => OperatorCode(0xfdd2),
            I64x2LaneSelect => OperatorCode(0xfdd3),
            F64x2RelaxedMin => OperatorCode(0xfdd4),
            I64x2Mul => OperatorCode(0xfdd5),
            I64x2Eq => OperatorCode(0xfdd6),
            I64x2Ne => OperatorCode(0xfdd7),
            I64x2LtS => OperatorCode(0xfdd8),
            I64x2GtS => OperatorCode(0xfdd9),
            I64x2LeS => OperatorCode(0xfdda),
            I64x2GeS => OperatorCode(0xfddb),
            I64x2ExtMulLowI32x4S => OperatorCode(0xfddc),
            I64x2ExtMulHighI32x4S => OperatorCode(0xfddd),
            I64x2ExtMulLowI32x4U => OperatorCode(0xfdde),
            I64x2ExtMulHighI32x4U => OperatorCode(0xfddf),
            F32x4Abs => OperatorCode(0xfde0),
            F32x4Neg => OperatorCode(0xfde1),
            F32x4RelaxedMax => OperatorCode(0xfde2),
            F32x4Sqrt => OperatorCode(0xfde3),
            F32x4Add => OperatorCode(0xfde4),
            F32x4Sub => OperatorCode(0xfde5),
            F32x4Mul => OperatorCode(0xfde6),
            F32x4Div => OperatorCode(0xfde7),
            F32x4Min => OperatorCode(0xfde8),
            F32x4Max => OperatorCode(0xfde9),
            F32x4PMin => OperatorCode(0xfdea),
            F32x4PMax => OperatorCode(0xfdeb),
            F64x2Abs => OperatorCode(0xfdec),
            F64x2Neg => OperatorCode(0xfded),
            F64x2RelaxedMax => OperatorCode(0xfdee),
            F64x2Sqrt => OperatorCode(0xfdef),
            F64x2Add => OperatorCode(0xfdf0),
            F64x2Sub => OperatorCode(0xfdf1),
            F64x2Mul => OperatorCode(0xfdf2),
            F64x2Div => OperatorCode(0xfdf3),
            F64x2Min => OperatorCode(0xfdf4),
            F64x2Max => OperatorCode(0xfdf5),
            F64x2PMin => OperatorCode(0xfdf6),
            F64x2PMax => OperatorCode(0xfdf7),
            I32x4TruncSatF32x4S => OperatorCode(0xfdf8),
            I32x4TruncSatF32x4U => OperatorCode(0xfdf9),
            F32x4ConvertI32x4S => OperatorCode(0xfdfa),
            F32x4ConvertI32x4U => OperatorCode(0xfdfb),
            I32x4TruncSatF64x2SZero => OperatorCode(0xfdfc),
            I32x4TruncSatF64x2UZero => OperatorCode(0xfdfd),
            F64x2ConvertLowI32x4S => OperatorCode(0xfdfe),
            F64x2ConvertLowI32x4U => OperatorCode(0xfdff),
            MemoryAtomicNotify { .. } => OperatorCode(0xfe00),
            MemoryAtomicWait32 { .. } => OperatorCode(0xfe01),
            MemoryAtomicWait64 { .. } => OperatorCode(0xfe02),
            AtomicFence { .. } => OperatorCode(0xfe03),
            I32AtomicLoad { .. } => OperatorCode(0xfe10),
            I64AtomicLoad { .. } => OperatorCode(0xfe11),
            I32AtomicLoad8U { .. } => OperatorCode(0xfe12),
            I32AtomicLoad16U { .. } => OperatorCode(0xfe13),
            I64AtomicLoad8U { .. } => OperatorCode(0xfe14),
            I64AtomicLoad16U { .. } => OperatorCode(0xfe15),
            I64AtomicLoad32U { .. } => OperatorCode(0xfe16),
            I32AtomicStore { .. } => OperatorCode(0xfe17),
            I64AtomicStore { .. } => OperatorCode(0xfe18),
            I32AtomicStore8 { .. } => OperatorCode(0xfe19),
            I32AtomicStore16 { .. } => OperatorCode(0xfe1a),
            I64AtomicStore8 { .. } => OperatorCode(0xfe1b),
            I64AtomicStore16 { .. } => OperatorCode(0xfe1c),
            I64AtomicStore32 { .. } => OperatorCode(0xfe1d),
            I32AtomicRmwAdd { .. } => OperatorCode(0xfe1e),
            I64AtomicRmwAdd { .. } => OperatorCode(0xfe1f),
            I32AtomicRmw8AddU { .. } => OperatorCode(0xfe20),
            I32AtomicRmw16AddU { .. } => OperatorCode(0xfe21),
            I64AtomicRmw8AddU { .. } => OperatorCode(0xfe22),
            I64AtomicRmw16AddU { .. } => OperatorCode(0xfe23),
            I64AtomicRmw32AddU { .. } => OperatorCode(0xfe24),
            I32AtomicRmwSub { .. } => OperatorCode(0xfe25),
            I64AtomicRmwSub { .. } => OperatorCode(0xfe26),
            I32AtomicRmw8SubU { .. } => OperatorCode(0xfe27),
            I32AtomicRmw16SubU { .. } => OperatorCode(0xfe28),
            I64AtomicRmw8SubU { .. } => OperatorCode(0xfe29),
            I64AtomicRmw16SubU { .. } => OperatorCode(0xfe2a),
            I64AtomicRmw32SubU { .. } => OperatorCode(0xfe2b),
            I32AtomicRmwAnd { .. } => OperatorCode(0xfe2c),
            I64AtomicRmwAnd { .. } => OperatorCode(0xfe2d),
            I32AtomicRmw8AndU { .. } => OperatorCode(0xfe2e),
            I32AtomicRmw16AndU { .. } => OperatorCode(0xfe2f),
            I64AtomicRmw8AndU { .. } => OperatorCode(0xfe30),
            I64AtomicRmw16AndU { .. } => OperatorCode(0xfe31),
            I64AtomicRmw32AndU { .. } => OperatorCode(0xfe32),
            I32AtomicRmwOr { .. } => OperatorCode(0xfe33),
            I64AtomicRmwOr { .. } => OperatorCode(0xfe34),
            I32AtomicRmw8OrU { .. } => OperatorCode(0xfe35),
            I32AtomicRmw16OrU { .. } => OperatorCode(0xfe36),
            I64AtomicRmw8OrU { .. } => OperatorCode(0xfe37),
            I64AtomicRmw16OrU { .. } => OperatorCode(0xfe38),
            I64AtomicRmw32OrU { .. } => OperatorCode(0xfe39),
            I32AtomicRmwXor { .. } => OperatorCode(0xfe3a),
            I64AtomicRmwXor { .. } => OperatorCode(0xfe3b),
            I32AtomicRmw8XorU { .. } => OperatorCode(0xfe3c),
            I32AtomicRmw16XorU { .. } => OperatorCode(0xfe3d),
            I64AtomicRmw8XorU { .. } => OperatorCode(0xfe3e),
            I64AtomicRmw16XorU { .. } => OperatorCode(0xfe3f),
            I64AtomicRmw32XorU { .. } => OperatorCode(0xfe40),
            I32AtomicRmwXchg { .. } => OperatorCode(0xfe41),
            I64AtomicRmwXchg { .. } => OperatorCode(0xfe42),
            I32AtomicRmw8XchgU { .. } => OperatorCode(0xfe43),
            I32AtomicRmw16XchgU { .. } => OperatorCode(0xfe44),
            I64AtomicRmw8XchgU { .. } => OperatorCode(0xfe45),
            I64AtomicRmw16XchgU { .. } => OperatorCode(0xfe46),
            I64AtomicRmw32XchgU { .. } => OperatorCode(0xfe47),
            I32AtomicRmwCmpxchg { .. } => OperatorCode(0xfe48),
            I64AtomicRmwCmpxchg { .. } => OperatorCode(0xfe49),
            I32AtomicRmw8CmpxchgU { .. } => OperatorCode(0xfe4a),
            I32AtomicRmw16CmpxchgU { .. } => OperatorCode(0xfe4b),
            I64AtomicRmw8CmpxchgU { .. } => OperatorCode(0xfe4c),
            I64AtomicRmw16CmpxchgU { .. } => OperatorCode(0xfe4d),
            I64AtomicRmw32CmpxchgU { .. } => OperatorCode(0xfe4e),
        }
    }
}

// Base cost of operators
pub fn operator_base_cost(op: &Operator) -> u64 {
    use Operator::*;

    match op {
        Unreachable => 1,
        Nop => 1,
        Block { .. } => 1,
        Loop { .. } => 1,
        If { .. } => 1,
        Else => 1,
        Try { .. } => 1,
        Catch { .. } => 1,
        Throw { .. } => 1,
        Rethrow { .. } => 1,
        End => 1,
        Br { .. } => 1,
        BrIf { .. } => 1,
        BrTable { .. } => 1,
        Return => 1,
        Call { .. } => 1,
        CallIndirect { .. } => 1,
        ReturnCall { .. } => 1,
        ReturnCallIndirect { .. } => 1,
        Delegate { .. } => 1,
        CatchAll => 1,
        Drop => 1,
        Select => 1,
        TypedSelect { .. } => 1,
        LocalGet { .. } => 1,
        LocalSet { .. } => 1,
        LocalTee { .. } => 1,
        GlobalGet { .. } => 1,
        GlobalSet { .. } => 1,
        TableGet { .. } => 1,
        TableSet { .. } => 1,
        I32Load { .. } => 1,
        I64Load { .. } => 1,
        F32Load { .. } => 1,
        F64Load { .. } => 1,
        I32Load8S { .. } => 1,
        I32Load8U { .. } => 1,
        I32Load16S { .. } => 1,
        I32Load16U { .. } => 1,
        I64Load8S { .. } => 1,
        I64Load8U { .. } => 1,
        I64Load16S { .. } => 1,
        I64Load16U { .. } => 1,
        I64Load32S { .. } => 1,
        I64Load32U { .. } => 1,
        I32Store { .. } => 1,
        I64Store { .. } => 1,
        F32Store { .. } => 1,
        F64Store { .. } => 1,
        I32Store8 { .. } => 1,
        I32Store16 { .. } => 1,
        I64Store8 { .. } => 1,
        I64Store16 { .. } => 1,
        I64Store32 { .. } => 1,
        MemorySize { .. } => 1,
        MemoryGrow { .. } => 1,
        I32Const { .. } => 1,
        I64Const { .. } => 1,
        F32Const { .. } => 1,
        F64Const { .. } => 1,
        I32Eqz => 1,
        I32Eq => 1,
        I32Ne => 1,
        I32LtS => 1,
        I32LtU => 1,
        I32GtS => 1,
        I32GtU => 1,
        I32LeS => 1,
        I32LeU => 1,
        I32GeS => 1,
        I32GeU => 1,
        I64Eqz => 1,
        I64Eq => 1,
        I64Ne => 1,
        I64LtS => 1,
        I64LtU => 1,
        I64GtS => 1,
        I64GtU => 1,
        I64LeS => 1,
        I64LeU => 1,
        I64GeS => 1,
        I64GeU => 1,
        F32Eq => 1,
        F32Ne => 1,
        F32Lt => 1,
        F32Gt => 1,
        F32Le => 1,
        F32Ge => 1,
        F64Eq => 1,
        F64Ne => 1,
        F64Lt => 1,
        F64Gt => 1,
        F64Le => 1,
        F64Ge => 1,
        I32Clz => 1,
        I32Ctz => 1,
        I32Popcnt => 1,
        I32Add => 1,
        I32Sub => 1,
        I32Mul => 1,
        I32DivS => 1,
        I32DivU => 1,
        I32RemS => 1,
        I32RemU => 1,
        I32And => 1,
        I32Or => 1,
        I32Xor => 1,
        I32Shl => 1,
        I32ShrS => 1,
        I32ShrU => 1,
        I32Rotl => 1,
        I32Rotr => 1,
        I64Clz => 1,
        I64Ctz => 1,
        I64Popcnt => 1,
        I64Add => 1,
        I64Sub => 1,
        I64Mul => 1,
        I64DivS => 1,
        I64DivU => 1,
        I64RemS => 1,
        I64RemU => 1,
        I64And => 1,
        I64Or => 1,
        I64Xor => 1,
        I64Shl => 1,
        I64ShrS => 1,
        I64ShrU => 1,
        I64Rotl => 1,
        I64Rotr => 1,
        F32Abs => 1,
        F32Neg => 1,
        F32Ceil => 1,
        F32Floor => 1,
        F32Trunc => 1,
        F32Nearest => 1,
        F32Sqrt => 1,
        F32Add => 1,
        F32Sub => 1,
        F32Mul => 1,
        F32Div => 1,
        F32Min => 1,
        F32Max => 1,
        F32Copysign => 1,
        F64Abs => 1,
        F64Neg => 1,
        F64Ceil => 1,
        F64Floor => 1,
        F64Trunc => 1,
        F64Nearest => 1,
        F64Sqrt => 1,
        F64Add => 1,
        F64Sub => 1,
        F64Mul => 1,
        F64Div => 1,
        F64Min => 1,
        F64Max => 1,
        F64Copysign => 1,
        I32WrapI64 => 1,
        I32TruncF32S => 1,
        I32TruncF32U => 1,
        I32TruncF64S => 1,
        I32TruncF64U => 1,
        I64ExtendI32S => 1,
        I64ExtendI32U => 1,
        I64TruncF32S => 1,
        I64TruncF32U => 1,
        I64TruncF64S => 1,
        I64TruncF64U => 1,
        F32ConvertI32S => 1,
        F32ConvertI32U => 1,
        F32ConvertI64S => 1,
        F32ConvertI64U => 1,
        F32DemoteF64 => 1,
        F64ConvertI32S => 1,
        F64ConvertI32U => 1,
        F64ConvertI64S => 1,
        F64ConvertI64U => 1,
        F64PromoteF32 => 1,
        I32ReinterpretF32 => 1,
        I64ReinterpretF64 => 1,
        F32ReinterpretI32 => 1,
        F64ReinterpretI64 => 1,
        I32Extend8S => 1,
        I32Extend16S => 1,
        I64Extend8S => 1,
        I64Extend16S => 1,
        I64Extend32S => 1,
        RefNull { .. } => 1,
        RefIsNull => 1,
        RefFunc { .. } => 1,
        I32TruncSatF32S => 1,
        I32TruncSatF32U => 1,
        I32TruncSatF64S => 1,
        I32TruncSatF64U => 1,
        I64TruncSatF32S => 1,
        I64TruncSatF32U => 1,
        I64TruncSatF64S => 1,
        I64TruncSatF64U => 1,
        MemoryInit { .. } => 1,
        DataDrop { .. } => 1,
        MemoryCopy { .. } => 1,
        MemoryFill { .. } => 1,
        TableInit { .. } => 1,
        ElemDrop { .. } => 1,
        TableCopy { .. } => 1,
        TableGrow { .. } => 1,
        TableSize { .. } => 1,
        TableFill { .. } => 1,
        V128Load { .. } => 1,
        V128Load8x8S { .. } => 1,
        V128Load8x8U { .. } => 1,
        V128Load16x4S { .. } => 1,
        V128Load16x4U { .. } => 1,
        V128Load32x2S { .. } => 1,
        V128Load32x2U { .. } => 1,
        V128Load8Splat { .. } => 1,
        V128Load16Splat { .. } => 1,
        V128Load32Splat { .. } => 1,
        V128Load64Splat { .. } => 1,
        V128Store { .. } => 1,
        V128Const { .. } => 1,
        I8x16Shuffle { .. } => 1,
        I8x16Swizzle => 1,
        I8x16Splat => 1,
        I16x8Splat => 1,
        I32x4Splat => 1,
        I64x2Splat => 1,
        F32x4Splat => 1,
        F64x2Splat => 1,
        I8x16ExtractLaneS { .. } => 1,
        I8x16ExtractLaneU { .. } => 1,
        I8x16ReplaceLane { .. } => 1,
        I16x8ExtractLaneS { .. } => 1,
        I16x8ExtractLaneU { .. } => 1,
        I16x8ReplaceLane { .. } => 1,
        I32x4ExtractLane { .. } => 1,
        I32x4ReplaceLane { .. } => 1,
        I64x2ExtractLane { .. } => 1,
        I64x2ReplaceLane { .. } => 1,
        F32x4ExtractLane { .. } => 1,
        F32x4ReplaceLane { .. } => 1,
        F64x2ExtractLane { .. } => 1,
        F64x2ReplaceLane { .. } => 1,
        I8x16Eq => 1,
        I8x16Ne => 1,
        I8x16LtS => 1,
        I8x16LtU => 1,
        I8x16GtS => 1,
        I8x16GtU => 1,
        I8x16LeS => 1,
        I8x16LeU => 1,
        I8x16GeS => 1,
        I8x16GeU => 1,
        I16x8Eq => 1,
        I16x8Ne => 1,
        I16x8LtS => 1,
        I16x8LtU => 1,
        I16x8GtS => 1,
        I16x8GtU => 1,
        I16x8LeS => 1,
        I16x8LeU => 1,
        I16x8GeS => 1,
        I16x8GeU => 1,
        I32x4Eq => 1,
        I32x4Ne => 1,
        I32x4LtS => 1,
        I32x4LtU => 1,
        I32x4GtS => 1,
        I32x4GtU => 1,
        I32x4LeS => 1,
        I32x4LeU => 1,
        I32x4GeS => 1,
        I32x4GeU => 1,
        F32x4Eq => 1,
        F32x4Ne => 1,
        F32x4Lt => 1,
        F32x4Gt => 1,
        F32x4Le => 1,
        F32x4Ge => 1,
        F64x2Eq => 1,
        F64x2Ne => 1,
        F64x2Lt => 1,
        F64x2Gt => 1,
        F64x2Le => 1,
        F64x2Ge => 1,
        V128Not => 1,
        V128And => 1,
        V128AndNot => 1,
        V128Or => 1,
        V128Xor => 1,
        V128Bitselect => 1,
        V128AnyTrue => 1,
        V128Load8Lane { .. } => 1,
        V128Load16Lane { .. } => 1,
        V128Load32Lane { .. } => 1,
        V128Load64Lane { .. } => 1,
        V128Store8Lane { .. } => 1,
        V128Store16Lane { .. } => 1,
        V128Store32Lane { .. } => 1,
        V128Store64Lane { .. } => 1,
        V128Load32Zero { .. } => 1,
        V128Load64Zero { .. } => 1,
        F32x4DemoteF64x2Zero => 1,
        F64x2PromoteLowF32x4 => 1,
        I8x16Abs => 1,
        I8x16Neg => 1,
        I8x16Popcnt => 1,
        I8x16AllTrue => 1,
        I8x16Bitmask => 1,
        I8x16NarrowI16x8S => 1,
        I8x16NarrowI16x8U => 1,
        F32x4Ceil => 1,
        F32x4Floor => 1,
        F32x4Trunc => 1,
        F32x4Nearest => 1,
        I8x16Shl => 1,
        I8x16ShrS => 1,
        I8x16ShrU => 1,
        I8x16Add => 1,
        I8x16AddSatS => 1,
        I8x16AddSatU => 1,
        I8x16Sub => 1,
        I8x16SubSatS => 1,
        I8x16SubSatU => 1,
        F64x2Ceil => 1,
        F64x2Floor => 1,
        I8x16MinS => 1,
        I8x16MinU => 1,
        I8x16MaxS => 1,
        I8x16MaxU => 1,
        F64x2Trunc => 1,
        I8x16RoundingAverageU => 1,
        I16x8ExtAddPairwiseI8x16S => 1,
        I16x8ExtAddPairwiseI8x16U => 1,
        I32x4ExtAddPairwiseI16x8S => 1,
        I32x4ExtAddPairwiseI16x8U => 1,
        I16x8Abs => 1,
        I16x8Neg => 1,
        I16x8Q15MulrSatS => 1,
        I16x8AllTrue => 1,
        I16x8Bitmask => 1,
        I16x8NarrowI32x4S => 1,
        I16x8NarrowI32x4U => 1,
        I16x8ExtendLowI8x16S => 1,
        I16x8ExtendHighI8x16S => 1,
        I16x8ExtendLowI8x16U => 1,
        I16x8ExtendHighI8x16U => 1,
        I16x8Shl => 1,
        I16x8ShrS => 1,
        I16x8ShrU => 1,
        I16x8Add => 1,
        I16x8AddSatS => 1,
        I16x8AddSatU => 1,
        I16x8Sub => 1,
        I16x8SubSatS => 1,
        I16x8SubSatU => 1,
        F64x2Nearest => 1,
        I16x8Mul => 1,
        I16x8MinS => 1,
        I16x8MinU => 1,
        I16x8MaxS => 1,
        I16x8MaxU => 1,
        I16x8RoundingAverageU => 1,
        I16x8ExtMulLowI8x16S => 1,
        I16x8ExtMulHighI8x16S => 1,
        I16x8ExtMulLowI8x16U => 1,
        I16x8ExtMulHighI8x16U => 1,
        I32x4Abs => 1,
        I8x16RelaxedSwizzle => 1,
        I32x4Neg => 1,
        I32x4AllTrue => 1,
        I32x4Bitmask => 1,
        I32x4RelaxedTruncSatF32x4S => 1,
        I32x4RelaxedTruncSatF32x4U => 1,
        I32x4ExtendLowI16x8S => 1,
        I32x4ExtendHighI16x8S => 1,
        I32x4ExtendLowI16x8U => 1,
        I32x4ExtendHighI16x8U => 1,
        I32x4Shl => 1,
        I32x4ShrS => 1,
        I32x4ShrU => 1,
        I32x4Add => 1,
        F32x4Fma => 1,
        F32x4Fms => 1,
        I32x4Sub => 1,
        I8x16LaneSelect => 1,
        I16x8LaneSelect => 1,
        F32x4RelaxedMin => 1,
        I32x4Mul => 1,
        I32x4MinS => 1,
        I32x4MinU => 1,
        I32x4MaxS => 1,
        I32x4MaxU => 1,
        I32x4DotI16x8S => 1,
        I32x4ExtMulLowI16x8S => 1,
        I32x4ExtMulHighI16x8S => 1,
        I32x4ExtMulLowI16x8U => 1,
        I32x4ExtMulHighI16x8U => 1,
        I64x2Abs => 1,
        I64x2Neg => 1,
        I64x2AllTrue => 1,
        I64x2Bitmask => 1,
        I32x4RelaxedTruncSatF64x2SZero => 1,
        I32x4RelaxedTruncSatF64x2UZero => 1,
        I64x2ExtendLowI32x4S => 1,
        I64x2ExtendHighI32x4S => 1,
        I64x2ExtendLowI32x4U => 1,
        I64x2ExtendHighI32x4U => 1,
        I64x2Shl => 1,
        I64x2ShrS => 1,
        I64x2ShrU => 1,
        I64x2Add => 1,
        F64x2Fma => 1,
        F64x2Fms => 1,
        I64x2Sub => 1,
        I32x4LaneSelect => 1,
        I64x2LaneSelect => 1,
        F64x2RelaxedMin => 1,
        I64x2Mul => 1,
        I64x2Eq => 1,
        I64x2Ne => 1,
        I64x2LtS => 1,
        I64x2GtS => 1,
        I64x2LeS => 1,
        I64x2GeS => 1,
        I64x2ExtMulLowI32x4S => 1,
        I64x2ExtMulHighI32x4S => 1,
        I64x2ExtMulLowI32x4U => 1,
        I64x2ExtMulHighI32x4U => 1,
        F32x4Abs => 1,
        F32x4Neg => 1,
        F32x4RelaxedMax => 1,
        F32x4Sqrt => 1,
        F32x4Add => 1,
        F32x4Sub => 1,
        F32x4Mul => 1,
        F32x4Div => 1,
        F32x4Min => 1,
        F32x4Max => 1,
        F32x4PMin => 1,
        F32x4PMax => 1,
        F64x2Abs => 1,
        F64x2Neg => 1,
        F64x2RelaxedMax => 1,
        F64x2Sqrt => 1,
        F64x2Add => 1,
        F64x2Sub => 1,
        F64x2Mul => 1,
        F64x2Div => 1,
        F64x2Min => 1,
        F64x2Max => 1,
        F64x2PMin => 1,
        F64x2PMax => 1,
        I32x4TruncSatF32x4S => 1,
        I32x4TruncSatF32x4U => 1,
        F32x4ConvertI32x4S => 1,
        F32x4ConvertI32x4U => 1,
        I32x4TruncSatF64x2SZero => 1,
        I32x4TruncSatF64x2UZero => 1,
        F64x2ConvertLowI32x4S => 1,
        F64x2ConvertLowI32x4U => 1,
        MemoryAtomicNotify { .. } => 1,
        MemoryAtomicWait32 { .. } => 1,
        MemoryAtomicWait64 { .. } => 1,
        AtomicFence { .. } => 1,
        I32AtomicLoad { .. } => 1,
        I64AtomicLoad { .. } => 1,
        I32AtomicLoad8U { .. } => 1,
        I32AtomicLoad16U { .. } => 1,
        I64AtomicLoad8U { .. } => 1,
        I64AtomicLoad16U { .. } => 1,
        I64AtomicLoad32U { .. } => 1,
        I32AtomicStore { .. } => 1,
        I64AtomicStore { .. } => 1,
        I32AtomicStore8 { .. } => 1,
        I32AtomicStore16 { .. } => 1,
        I64AtomicStore8 { .. } => 1,
        I64AtomicStore16 { .. } => 1,
        I64AtomicStore32 { .. } => 1,
        I32AtomicRmwAdd { .. } => 1,
        I64AtomicRmwAdd { .. } => 1,
        I32AtomicRmw8AddU { .. } => 1,
        I32AtomicRmw16AddU { .. } => 1,
        I64AtomicRmw8AddU { .. } => 1,
        I64AtomicRmw16AddU { .. } => 1,
        I64AtomicRmw32AddU { .. } => 1,
        I32AtomicRmwSub { .. } => 1,
        I64AtomicRmwSub { .. } => 1,
        I32AtomicRmw8SubU { .. } => 1,
        I32AtomicRmw16SubU { .. } => 1,
        I64AtomicRmw8SubU { .. } => 1,
        I64AtomicRmw16SubU { .. } => 1,
        I64AtomicRmw32SubU { .. } => 1,
        I32AtomicRmwAnd { .. } => 1,
        I64AtomicRmwAnd { .. } => 1,
        I32AtomicRmw8AndU { .. } => 1,
        I32AtomicRmw16AndU { .. } => 1,
        I64AtomicRmw8AndU { .. } => 1,
        I64AtomicRmw16AndU { .. } => 1,
        I64AtomicRmw32AndU { .. } => 1,
        I32AtomicRmwOr { .. } => 1,
        I64AtomicRmwOr { .. } => 1,
        I32AtomicRmw8OrU { .. } => 1,
        I32AtomicRmw16OrU { .. } => 1,
        I64AtomicRmw8OrU { .. } => 1,
        I64AtomicRmw16OrU { .. } => 1,
        I64AtomicRmw32OrU { .. } => 1,
        I32AtomicRmwXor { .. } => 1,
        I64AtomicRmwXor { .. } => 1,
        I32AtomicRmw8XorU { .. } => 1,
        I32AtomicRmw16XorU { .. } => 1,
        I64AtomicRmw8XorU { .. } => 1,
        I64AtomicRmw16XorU { .. } => 1,
        I64AtomicRmw32XorU { .. } => 1,
        I32AtomicRmwXchg { .. } => 1,
        I64AtomicRmwXchg { .. } => 1,
        I32AtomicRmw8XchgU { .. } => 1,
        I32AtomicRmw16XchgU { .. } => 1,
        I64AtomicRmw8XchgU { .. } => 1,
        I64AtomicRmw16XchgU { .. } => 1,
        I64AtomicRmw32XchgU { .. } => 1,
        I32AtomicRmwCmpxchg { .. } => 1,
        I64AtomicRmwCmpxchg { .. } => 1,
        I32AtomicRmw8CmpxchgU { .. } => 1,
        I32AtomicRmw16CmpxchgU { .. } => 1,
        I64AtomicRmw8CmpxchgU { .. } => 1,
        I64AtomicRmw16CmpxchgU { .. } => 1,
        I64AtomicRmw32CmpxchgU { .. } => 1,
    }
}

// Multiplier to take operator parameters into account
pub fn operator_factor(op: &Operator) -> u64 {
    use Operator::*;

    match op {
        Unreachable => 1,
        Nop => 1,
        Block { .. } => 1,
        Loop { .. } => 1,
        If { .. } => 1,
        Else => 1,
        Try { .. } => 1,
        Catch { .. } => 1,
        Throw { .. } => 1,
        Rethrow { .. } => 1,
        End => 1,
        Br { .. } => 1,
        BrIf { .. } => 1,
        BrTable { .. } => 1,
        Return => 1,
        Call { .. } => 1,
        CallIndirect { .. } => 1,
        ReturnCall { .. } => 1,
        ReturnCallIndirect { .. } => 1,
        Delegate { .. } => 1,
        CatchAll => 1,
        Drop => 1,
        Select => 1,
        TypedSelect { .. } => 1,
        LocalGet { .. } => 1,
        LocalSet { .. } => 1,
        LocalTee { .. } => 1,
        GlobalGet { .. } => 1,
        GlobalSet { .. } => 1,
        TableGet { .. } => 1,
        TableSet { .. } => 1,
        I32Load { .. } => 1,
        I64Load { .. } => 1,
        F32Load { .. } => 1,
        F64Load { .. } => 1,
        I32Load8S { .. } => 1,
        I32Load8U { .. } => 1,
        I32Load16S { .. } => 1,
        I32Load16U { .. } => 1,
        I64Load8S { .. } => 1,
        I64Load8U { .. } => 1,
        I64Load16S { .. } => 1,
        I64Load16U { .. } => 1,
        I64Load32S { .. } => 1,
        I64Load32U { .. } => 1,
        I32Store { .. } => 1,
        I64Store { .. } => 1,
        F32Store { .. } => 1,
        F64Store { .. } => 1,
        I32Store8 { .. } => 1,
        I32Store16 { .. } => 1,
        I64Store8 { .. } => 1,
        I64Store16 { .. } => 1,
        I64Store32 { .. } => 1,
        MemorySize { .. } => 1,
        MemoryGrow { .. } => 1,
        I32Const { .. } => 1,
        I64Const { .. } => 1,
        F32Const { .. } => 1,
        F64Const { .. } => 1,
        I32Eqz => 1,
        I32Eq => 1,
        I32Ne => 1,
        I32LtS => 1,
        I32LtU => 1,
        I32GtS => 1,
        I32GtU => 1,
        I32LeS => 1,
        I32LeU => 1,
        I32GeS => 1,
        I32GeU => 1,
        I64Eqz => 1,
        I64Eq => 1,
        I64Ne => 1,
        I64LtS => 1,
        I64LtU => 1,
        I64GtS => 1,
        I64GtU => 1,
        I64LeS => 1,
        I64LeU => 1,
        I64GeS => 1,
        I64GeU => 1,
        F32Eq => 1,
        F32Ne => 1,
        F32Lt => 1,
        F32Gt => 1,
        F32Le => 1,
        F32Ge => 1,
        F64Eq => 1,
        F64Ne => 1,
        F64Lt => 1,
        F64Gt => 1,
        F64Le => 1,
        F64Ge => 1,
        I32Clz => 1,
        I32Ctz => 1,
        I32Popcnt => 1,
        I32Add => 1,
        I32Sub => 1,
        I32Mul => 1,
        I32DivS => 1,
        I32DivU => 1,
        I32RemS => 1,
        I32RemU => 1,
        I32And => 1,
        I32Or => 1,
        I32Xor => 1,
        I32Shl => 1,
        I32ShrS => 1,
        I32ShrU => 1,
        I32Rotl => 1,
        I32Rotr => 1,
        I64Clz => 1,
        I64Ctz => 1,
        I64Popcnt => 1,
        I64Add => 1,
        I64Sub => 1,
        I64Mul => 1,
        I64DivS => 1,
        I64DivU => 1,
        I64RemS => 1,
        I64RemU => 1,
        I64And => 1,
        I64Or => 1,
        I64Xor => 1,
        I64Shl => 1,
        I64ShrS => 1,
        I64ShrU => 1,
        I64Rotl => 1,
        I64Rotr => 1,
        F32Abs => 1,
        F32Neg => 1,
        F32Ceil => 1,
        F32Floor => 1,
        F32Trunc => 1,
        F32Nearest => 1,
        F32Sqrt => 1,
        F32Add => 1,
        F32Sub => 1,
        F32Mul => 1,
        F32Div => 1,
        F32Min => 1,
        F32Max => 1,
        F32Copysign => 1,
        F64Abs => 1,
        F64Neg => 1,
        F64Ceil => 1,
        F64Floor => 1,
        F64Trunc => 1,
        F64Nearest => 1,
        F64Sqrt => 1,
        F64Add => 1,
        F64Sub => 1,
        F64Mul => 1,
        F64Div => 1,
        F64Min => 1,
        F64Max => 1,
        F64Copysign => 1,
        I32WrapI64 => 1,
        I32TruncF32S => 1,
        I32TruncF32U => 1,
        I32TruncF64S => 1,
        I32TruncF64U => 1,
        I64ExtendI32S => 1,
        I64ExtendI32U => 1,
        I64TruncF32S => 1,
        I64TruncF32U => 1,
        I64TruncF64S => 1,
        I64TruncF64U => 1,
        F32ConvertI32S => 1,
        F32ConvertI32U => 1,
        F32ConvertI64S => 1,
        F32ConvertI64U => 1,
        F32DemoteF64 => 1,
        F64ConvertI32S => 1,
        F64ConvertI32U => 1,
        F64ConvertI64S => 1,
        F64ConvertI64U => 1,
        F64PromoteF32 => 1,
        I32ReinterpretF32 => 1,
        I64ReinterpretF64 => 1,
        F32ReinterpretI32 => 1,
        F64ReinterpretI64 => 1,
        I32Extend8S => 1,
        I32Extend16S => 1,
        I64Extend8S => 1,
        I64Extend16S => 1,
        I64Extend32S => 1,
        RefNull { .. } => 1,
        RefIsNull => 1,
        RefFunc { .. } => 1,
        I32TruncSatF32S => 1,
        I32TruncSatF32U => 1,
        I32TruncSatF64S => 1,
        I32TruncSatF64U => 1,
        I64TruncSatF32S => 1,
        I64TruncSatF32U => 1,
        I64TruncSatF64S => 1,
        I64TruncSatF64U => 1,
        MemoryInit { .. } => 1,
        DataDrop { .. } => 1,
        MemoryCopy { .. } => 1,
        MemoryFill { .. } => 1,
        TableInit { .. } => 1,
        ElemDrop { .. } => 1,
        TableCopy { .. } => 1,
        TableGrow { .. } => 1,
        TableSize { .. } => 1,
        TableFill { .. } => 1,
        V128Load { .. } => 1,
        V128Load8x8S { .. } => 1,
        V128Load8x8U { .. } => 1,
        V128Load16x4S { .. } => 1,
        V128Load16x4U { .. } => 1,
        V128Load32x2S { .. } => 1,
        V128Load32x2U { .. } => 1,
        V128Load8Splat { .. } => 1,
        V128Load16Splat { .. } => 1,
        V128Load32Splat { .. } => 1,
        V128Load64Splat { .. } => 1,
        V128Store { .. } => 1,
        V128Const { .. } => 1,
        I8x16Shuffle { .. } => 1,
        I8x16Swizzle => 1,
        I8x16Splat => 1,
        I16x8Splat => 1,
        I32x4Splat => 1,
        I64x2Splat => 1,
        F32x4Splat => 1,
        F64x2Splat => 1,
        I8x16ExtractLaneS { .. } => 1,
        I8x16ExtractLaneU { .. } => 1,
        I8x16ReplaceLane { .. } => 1,
        I16x8ExtractLaneS { .. } => 1,
        I16x8ExtractLaneU { .. } => 1,
        I16x8ReplaceLane { .. } => 1,
        I32x4ExtractLane { .. } => 1,
        I32x4ReplaceLane { .. } => 1,
        I64x2ExtractLane { .. } => 1,
        I64x2ReplaceLane { .. } => 1,
        F32x4ExtractLane { .. } => 1,
        F32x4ReplaceLane { .. } => 1,
        F64x2ExtractLane { .. } => 1,
        F64x2ReplaceLane { .. } => 1,
        I8x16Eq => 1,
        I8x16Ne => 1,
        I8x16LtS => 1,
        I8x16LtU => 1,
        I8x16GtS => 1,
        I8x16GtU => 1,
        I8x16LeS => 1,
        I8x16LeU => 1,
        I8x16GeS => 1,
        I8x16GeU => 1,
        I16x8Eq => 1,
        I16x8Ne => 1,
        I16x8LtS => 1,
        I16x8LtU => 1,
        I16x8GtS => 1,
        I16x8GtU => 1,
        I16x8LeS => 1,
        I16x8LeU => 1,
        I16x8GeS => 1,
        I16x8GeU => 1,
        I32x4Eq => 1,
        I32x4Ne => 1,
        I32x4LtS => 1,
        I32x4LtU => 1,
        I32x4GtS => 1,
        I32x4GtU => 1,
        I32x4LeS => 1,
        I32x4LeU => 1,
        I32x4GeS => 1,
        I32x4GeU => 1,
        F32x4Eq => 1,
        F32x4Ne => 1,
        F32x4Lt => 1,
        F32x4Gt => 1,
        F32x4Le => 1,
        F32x4Ge => 1,
        F64x2Eq => 1,
        F64x2Ne => 1,
        F64x2Lt => 1,
        F64x2Gt => 1,
        F64x2Le => 1,
        F64x2Ge => 1,
        V128Not => 1,
        V128And => 1,
        V128AndNot => 1,
        V128Or => 1,
        V128Xor => 1,
        V128Bitselect => 1,
        V128AnyTrue => 1,
        V128Load8Lane { .. } => 1,
        V128Load16Lane { .. } => 1,
        V128Load32Lane { .. } => 1,
        V128Load64Lane { .. } => 1,
        V128Store8Lane { .. } => 1,
        V128Store16Lane { .. } => 1,
        V128Store32Lane { .. } => 1,
        V128Store64Lane { .. } => 1,
        V128Load32Zero { .. } => 1,
        V128Load64Zero { .. } => 1,
        F32x4DemoteF64x2Zero => 1,
        F64x2PromoteLowF32x4 => 1,
        I8x16Abs => 1,
        I8x16Neg => 1,
        I8x16Popcnt => 1,
        I8x16AllTrue => 1,
        I8x16Bitmask => 1,
        I8x16NarrowI16x8S => 1,
        I8x16NarrowI16x8U => 1,
        F32x4Ceil => 1,
        F32x4Floor => 1,
        F32x4Trunc => 1,
        F32x4Nearest => 1,
        I8x16Shl => 1,
        I8x16ShrS => 1,
        I8x16ShrU => 1,
        I8x16Add => 1,
        I8x16AddSatS => 1,
        I8x16AddSatU => 1,
        I8x16Sub => 1,
        I8x16SubSatS => 1,
        I8x16SubSatU => 1,
        F64x2Ceil => 1,
        F64x2Floor => 1,
        I8x16MinS => 1,
        I8x16MinU => 1,
        I8x16MaxS => 1,
        I8x16MaxU => 1,
        F64x2Trunc => 1,
        I8x16RoundingAverageU => 1,
        I16x8ExtAddPairwiseI8x16S => 1,
        I16x8ExtAddPairwiseI8x16U => 1,
        I32x4ExtAddPairwiseI16x8S => 1,
        I32x4ExtAddPairwiseI16x8U => 1,
        I16x8Abs => 1,
        I16x8Neg => 1,
        I16x8Q15MulrSatS => 1,
        I16x8AllTrue => 1,
        I16x8Bitmask => 1,
        I16x8NarrowI32x4S => 1,
        I16x8NarrowI32x4U => 1,
        I16x8ExtendLowI8x16S => 1,
        I16x8ExtendHighI8x16S => 1,
        I16x8ExtendLowI8x16U => 1,
        I16x8ExtendHighI8x16U => 1,
        I16x8Shl => 1,
        I16x8ShrS => 1,
        I16x8ShrU => 1,
        I16x8Add => 1,
        I16x8AddSatS => 1,
        I16x8AddSatU => 1,
        I16x8Sub => 1,
        I16x8SubSatS => 1,
        I16x8SubSatU => 1,
        F64x2Nearest => 1,
        I16x8Mul => 1,
        I16x8MinS => 1,
        I16x8MinU => 1,
        I16x8MaxS => 1,
        I16x8MaxU => 1,
        I16x8RoundingAverageU => 1,
        I16x8ExtMulLowI8x16S => 1,
        I16x8ExtMulHighI8x16S => 1,
        I16x8ExtMulLowI8x16U => 1,
        I16x8ExtMulHighI8x16U => 1,
        I32x4Abs => 1,
        I8x16RelaxedSwizzle => 1,
        I32x4Neg => 1,
        I32x4AllTrue => 1,
        I32x4Bitmask => 1,
        I32x4RelaxedTruncSatF32x4S => 1,
        I32x4RelaxedTruncSatF32x4U => 1,
        I32x4ExtendLowI16x8S => 1,
        I32x4ExtendHighI16x8S => 1,
        I32x4ExtendLowI16x8U => 1,
        I32x4ExtendHighI16x8U => 1,
        I32x4Shl => 1,
        I32x4ShrS => 1,
        I32x4ShrU => 1,
        I32x4Add => 1,
        F32x4Fma => 1,
        F32x4Fms => 1,
        I32x4Sub => 1,
        I8x16LaneSelect => 1,
        I16x8LaneSelect => 1,
        F32x4RelaxedMin => 1,
        I32x4Mul => 1,
        I32x4MinS => 1,
        I32x4MinU => 1,
        I32x4MaxS => 1,
        I32x4MaxU => 1,
        I32x4DotI16x8S => 1,
        I32x4ExtMulLowI16x8S => 1,
        I32x4ExtMulHighI16x8S => 1,
        I32x4ExtMulLowI16x8U => 1,
        I32x4ExtMulHighI16x8U => 1,
        I64x2Abs => 1,
        I64x2Neg => 1,
        I64x2AllTrue => 1,
        I64x2Bitmask => 1,
        I32x4RelaxedTruncSatF64x2SZero => 1,
        I32x4RelaxedTruncSatF64x2UZero => 1,
        I64x2ExtendLowI32x4S => 1,
        I64x2ExtendHighI32x4S => 1,
        I64x2ExtendLowI32x4U => 1,
        I64x2ExtendHighI32x4U => 1,
        I64x2Shl => 1,
        I64x2ShrS => 1,
        I64x2ShrU => 1,
        I64x2Add => 1,
        F64x2Fma => 1,
        F64x2Fms => 1,
        I64x2Sub => 1,
        I32x4LaneSelect => 1,
        I64x2LaneSelect => 1,
        F64x2RelaxedMin => 1,
        I64x2Mul => 1,
        I64x2Eq => 1,
        I64x2Ne => 1,
        I64x2LtS => 1,
        I64x2GtS => 1,
        I64x2LeS => 1,
        I64x2GeS => 1,
        I64x2ExtMulLowI32x4S => 1,
        I64x2ExtMulHighI32x4S => 1,
        I64x2ExtMulLowI32x4U => 1,
        I64x2ExtMulHighI32x4U => 1,
        F32x4Abs => 1,
        F32x4Neg => 1,
        F32x4RelaxedMax => 1,
        F32x4Sqrt => 1,
        F32x4Add => 1,
        F32x4Sub => 1,
        F32x4Mul => 1,
        F32x4Div => 1,
        F32x4Min => 1,
        F32x4Max => 1,
        F32x4PMin => 1,
        F32x4PMax => 1,
        F64x2Abs => 1,
        F64x2Neg => 1,
        F64x2RelaxedMax => 1,
        F64x2Sqrt => 1,
        F64x2Add => 1,
        F64x2Sub => 1,
        F64x2Mul => 1,
        F64x2Div => 1,
        F64x2Min => 1,
        F64x2Max => 1,
        F64x2PMin => 1,
        F64x2PMax => 1,
        I32x4TruncSatF32x4S => 1,
        I32x4TruncSatF32x4U => 1,
        F32x4ConvertI32x4S => 1,
        F32x4ConvertI32x4U => 1,
        I32x4TruncSatF64x2SZero => 1,
        I32x4TruncSatF64x2UZero => 1,
        F64x2ConvertLowI32x4S => 1,
        F64x2ConvertLowI32x4U => 1,
        MemoryAtomicNotify { .. } => 1,
        MemoryAtomicWait32 { .. } => 1,
        MemoryAtomicWait64 { .. } => 1,
        AtomicFence { .. } => 1,
        I32AtomicLoad { .. } => 1,
        I64AtomicLoad { .. } => 1,
        I32AtomicLoad8U { .. } => 1,
        I32AtomicLoad16U { .. } => 1,
        I64AtomicLoad8U { .. } => 1,
        I64AtomicLoad16U { .. } => 1,
        I64AtomicLoad32U { .. } => 1,
        I32AtomicStore { .. } => 1,
        I64AtomicStore { .. } => 1,
        I32AtomicStore8 { .. } => 1,
        I32AtomicStore16 { .. } => 1,
        I64AtomicStore8 { .. } => 1,
        I64AtomicStore16 { .. } => 1,
        I64AtomicStore32 { .. } => 1,
        I32AtomicRmwAdd { .. } => 1,
        I64AtomicRmwAdd { .. } => 1,
        I32AtomicRmw8AddU { .. } => 1,
        I32AtomicRmw16AddU { .. } => 1,
        I64AtomicRmw8AddU { .. } => 1,
        I64AtomicRmw16AddU { .. } => 1,
        I64AtomicRmw32AddU { .. } => 1,
        I32AtomicRmwSub { .. } => 1,
        I64AtomicRmwSub { .. } => 1,
        I32AtomicRmw8SubU { .. } => 1,
        I32AtomicRmw16SubU { .. } => 1,
        I64AtomicRmw8SubU { .. } => 1,
        I64AtomicRmw16SubU { .. } => 1,
        I64AtomicRmw32SubU { .. } => 1,
        I32AtomicRmwAnd { .. } => 1,
        I64AtomicRmwAnd { .. } => 1,
        I32AtomicRmw8AndU { .. } => 1,
        I32AtomicRmw16AndU { .. } => 1,
        I64AtomicRmw8AndU { .. } => 1,
        I64AtomicRmw16AndU { .. } => 1,
        I64AtomicRmw32AndU { .. } => 1,
        I32AtomicRmwOr { .. } => 1,
        I64AtomicRmwOr { .. } => 1,
        I32AtomicRmw8OrU { .. } => 1,
        I32AtomicRmw16OrU { .. } => 1,
        I64AtomicRmw8OrU { .. } => 1,
        I64AtomicRmw16OrU { .. } => 1,
        I64AtomicRmw32OrU { .. } => 1,
        I32AtomicRmwXor { .. } => 1,
        I64AtomicRmwXor { .. } => 1,
        I32AtomicRmw8XorU { .. } => 1,
        I32AtomicRmw16XorU { .. } => 1,
        I64AtomicRmw8XorU { .. } => 1,
        I64AtomicRmw16XorU { .. } => 1,
        I64AtomicRmw32XorU { .. } => 1,
        I32AtomicRmwXchg { .. } => 1,
        I64AtomicRmwXchg { .. } => 1,
        I32AtomicRmw8XchgU { .. } => 1,
        I32AtomicRmw16XchgU { .. } => 1,
        I64AtomicRmw8XchgU { .. } => 1,
        I64AtomicRmw16XchgU { .. } => 1,
        I64AtomicRmw32XchgU { .. } => 1,
        I32AtomicRmwCmpxchg { .. } => 1,
        I64AtomicRmwCmpxchg { .. } => 1,
        I32AtomicRmw8CmpxchgU { .. } => 1,
        I32AtomicRmw16CmpxchgU { .. } => 1,
        I64AtomicRmw8CmpxchgU { .. } => 1,
        I64AtomicRmw16CmpxchgU { .. } => 1,
        I64AtomicRmw32CmpxchgU { .. } => 1,
    }
}

// Cost of operator taking into account parameter factor
pub fn operator_full_cost(op: &Operator) -> u64 {
    operator_base_cost(op) * operator_factor(op)
}
